{"version":3,"file":"main.d8753b8e0596755131e3.bundle.js","mappings":"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","sources":["webpack://treads/./src/game/AudioManager.ts","webpack://treads/./src/game/tanks/Tank.ts","webpack://treads/./src/game/Ammunition.ts","webpack://treads/./src/game/BombFragment.ts","webpack://treads/./src/game/Bomb.ts","webpack://treads/./src/game/GameRenderer.ts","webpack://treads/./src/game/GameCanvas.ts","webpack://treads/./src/game/Obstacle.ts","webpack://treads/./src/game/ObstacleCanvas.ts","webpack://treads/./src/game/navigation/Navigator.ts","webpack://treads/./src/game/navigation/AStarNavigator.ts","webpack://treads/./src/game/Node.ts","webpack://treads/./src/game/navigation/NavigationGrid.ts","webpack://treads/./src/game/navigation/SimpleNavigator.ts","webpack://treads/./src/game/navigation/SimplePathFinder.ts","webpack://treads/./src/ui/PastelColorPalette.ts","webpack://treads/./src/game/Reticule.ts","webpack://treads/./src/game/tanks/EnemyTank.ts","webpack://treads/./src/game/tanks/BomberTank.ts","webpack://treads/./src/game/tanks/PlayerTank.ts","webpack://treads/./src/game/tanks/SimpleMovingTank.ts","webpack://treads/./src/game/navigation/StationaryNavigator.ts","webpack://treads/./src/game/tanks/StationaryRandomAimTank.ts","webpack://treads/./src/game/tanks/StationaryTank.ts","webpack://treads/./src/game/tanks/SuperBomberMovingTank.ts","webpack://treads/./src/game/Level.ts","webpack://treads/./src/index.ts","webpack://treads/./src/ui/LevelSelector.ts"],"sourcesContent":["import backgroundMusic from '../assets/audio/backgroundMusic.mp3';\nimport bombExplode from '../assets/audio/bombExplode.mp3';\nimport tankDestroy from '../assets/audio/tankDestroy.mp3';\nimport tankFire from '../assets/audio/tankFire.mp3';\n\nexport enum AudioFile {\n\tTANK_FIRE = 1,\n\tTANK_DESTROY = 2,\n\tBOMB_EXPLODE = 3,\n\tBACKGROUND_MUSIC = 4,\n}\n\nexport class AudioManager {\n\tprivate audioContext: AudioContext;\n\tprivate audioBuffers: Map<AudioFile, AudioBuffer>;\n\tprivate backgroundMusicSource: AudioBufferSourceNode | null;\n\n\tconstructor() {\n\t\tthis.audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();\n\t\tthis.audioBuffers = new Map();\n\t\tthis.backgroundMusicSource = null;\n\t}\n\n\tloadAllAudio(): Promise<void[]> {\n\t\tconst promises = [\n\t\t\tthis.loadAudio(AudioFile.TANK_FIRE, tankFire),\n\t\t\tthis.loadAudio(AudioFile.TANK_DESTROY, tankDestroy),\n\t\t\tthis.loadAudio(AudioFile.BOMB_EXPLODE, bombExplode),\n\t\t\tthis.loadAudio(AudioFile.BACKGROUND_MUSIC, backgroundMusic),\n\t\t];\n\t\treturn Promise.all(promises);\n\t}\n\n\tloadAudio(audioFile: AudioFile, url: string): Promise<void> {\n\t\treturn fetch(url)\n\t\t\t.then((response) => response.arrayBuffer())\n\t\t\t.then((arrayBuffer) => this.audioContext.decodeAudioData(arrayBuffer))\n\t\t\t.then((audioBuffer) => {\n\t\t\t\tthis.audioBuffers.set(audioFile, audioBuffer);\n\t\t\t})\n\t\t\t.catch((error) => console.error(`Error loading audio file: ${url}`, error));\n\t}\n\n\tplay(audioFile: AudioFile): void {\n\t\tconst buffer = this.audioBuffers.get(audioFile);\n\t\tif (buffer) {\n\t\t\tconst source = this.audioContext.createBufferSource();\n\t\t\tsource.buffer = buffer;\n\t\t\tsource.connect(this.audioContext.destination);\n\t\t\tsource.start(0);\n\t\t} else {\n\t\t\tconsole.warn(`Audio buffer for ${audioFile} not found`);\n\t\t}\n\t}\n\n\tgetAudioContext(): AudioContext {\n\t\treturn this.audioContext;\n\t}\n\n\tplayBackgroundMusic(): void {\n\t\tconst buffer = this.audioBuffers.get(AudioFile.BACKGROUND_MUSIC);\n\t\tif (buffer) {\n\t\t\tthis.stopBackgroundMusic();\n\t\t\tthis.backgroundMusicSource = this.audioContext.createBufferSource();\n\t\t\tthis.backgroundMusicSource.buffer = buffer;\n\t\t\tthis.backgroundMusicSource.loop = true;\n\t\t\tthis.backgroundMusicSource.connect(this.audioContext.destination);\n\t\t\tthis.backgroundMusicSource.start(0);\n\t\t} else {\n\t\t\tconsole.warn(`Background music buffer not found`);\n\t\t}\n\t}\n\n\tstopBackgroundMusic(): void {\n\t\tif (this.backgroundMusicSource) {\n\t\t\tthis.backgroundMusicSource.stop(0);\n\t\t\tthis.backgroundMusicSource.disconnect();\n\t\t\tthis.backgroundMusicSource = null;\n\t\t}\n\t}\n}\n","import { Ammunition } from '../Ammunition';\nimport { AudioManager } from '../AudioManager';\nimport { Bomb } from '../Bomb';\nimport { BombFragment } from '../BombFragment';\nimport { ObstacleCanvas } from '../ObstacleCanvas';\nimport { Reticule } from '../Reticule';\n\nexport enum Direction {\n\tNORTH = 1,\n\tSOUTH = 2,\n\tEAST = 3,\n\tWEST = 4,\n\tNORTHEAST = 5,\n\tNORTHWEST = 6,\n\tSOUTHEAST = 7,\n\tSOUTHWEST = 8,\n\tUNKNOWN = 9,\n}\n\nexport class Tank {\n\tpublic xPosition: number;\n\tpublic yPosition: number;\n\tpublic xLeft: number;\n\tpublic xRight: number;\n\tpublic yTop: number;\n\tpublic yBottom: number;\n\tpublic speed: number;\n\tpublic size: number;\n\tpublic tankMidpoint: number;\n\tpublic color: string;\n\tpublic reticule: Reticule;\n\tpublic gunBarrellWidth = 7;\n\tpublic isDestroyed = false;\n\tpublic isExploding = false;\n\tpublic obstacleCanvas: ObstacleCanvas;\n\tpublic twoPi: number = 2 * Math.PI;\n\tpublic lastDirectionMoved: Direction = Direction.UNKNOWN;\n\tpublic wasLastMoveBlocked = false;\n\tpublic consecutiveDirectionMoves = 0;\n\tpublic audioManager: AudioManager;\n\tpublic aimAngle: number;\n\tpublic aimXPos: number;\n\tpublic aimYPos: number;\n\tpublic xOffset: number;\n\tpublic yOffset: number;\n\tpublic gunBarrellEndX: number;\n\tpublic gunBarrellEndY: number;\n\tpublic ammunition: Ammunition[] = [];\n\tpublic maxAmmunition: number;\n\tpublic bombs: Bomb[] = [];\n\tpublic maxBombs: number;\n\tpublic canvasWidth: number;\n\tpublic canvasHeight: number;\n\tprivate fragments: BombFragment[];\n\n\tconstructor(\n\t\tcanvas: HTMLCanvasElement,\n\t\treticule: Reticule,\n\t\txPosition: number,\n\t\tyPosition: number,\n\t\tspeed: number,\n\t\tsize: number,\n\t\tcolor: string,\n\t\tobstacleCanvas: ObstacleCanvas,\n\t\tammunition: Ammunition[],\n\t\tbombs: Bomb[],\n\t\taudioManager: AudioManager\n\t) {\n\t\tthis.reticule = reticule;\n\t\tthis.xPosition = xPosition;\n\t\tthis.yPosition = yPosition;\n\t\tthis.xLeft = xPosition;\n\t\tthis.xRight = xPosition + size;\n\t\tthis.yTop = yPosition;\n\t\tthis.yBottom = yPosition + size;\n\t\tthis.speed = speed;\n\t\tthis.size = size;\n\t\tthis.color = color;\n\t\tthis.canvasWidth = canvas.width;\n\t\tthis.canvasHeight = canvas.height;\n\t\tthis.obstacleCanvas = obstacleCanvas;\n\t\tthis.tankMidpoint = this.size / 2;\n\t\tthis.ammunition = ammunition;\n\t\tthis.maxAmmunition = ammunition.length;\n\t\tthis.bombs = bombs;\n\t\tthis.maxBombs = bombs.length;\n\t\tthis.audioManager = audioManager;\n\t\tconst canvasRect: DOMRect = canvas.getBoundingClientRect();\n\t\tthis.xOffset = canvasRect.left;\n\t\tthis.yOffset = canvasRect.top;\n\t\t// Set the initital X and Y aim position to the center of the canvas\n\t\tthis.aimXPos = canvas.width / 2;\n\t\tthis.aimYPos = canvas.height / 2;\n\n\t\tconst dx: number = this.aimXPos - this.xPosition - this.tankMidpoint;\n\t\tconst dy: number = this.aimYPos - this.yPosition - this.tankMidpoint;\n\t\tlet theta = Math.atan2(dy, dx);\n\t\tif (theta < 0) {\n\t\t\ttheta += 2 * Math.PI;\n\t\t}\n\t\tthis.aimAngle = theta;\n\n\t\tthis.gunBarrellEndX = this.xPosition + this.tankMidpoint + Math.cos(this.aimAngle) * this.size;\n\t\tthis.gunBarrellEndY = this.yPosition + this.tankMidpoint + Math.sin(this.aimAngle) * this.size;\n\n\t\tthis.fragments = [];\n\t}\n\n\tpublic draw(context: CanvasRenderingContext2D): void {\n\t\tif (this.isDestroyed) {\n\t\t\tif (this.isExploding) {\n\t\t\t\tthis.updateExplosion(context);\n\t\t\t}\n\t\t\tcontext.strokeStyle = this.color;\n\t\t\tcontext.lineWidth = 5;\n\t\t\tcontext.setLineDash([]);\n\t\t\tconst xLength = 12;\n\t\t\tcontext.beginPath();\n\t\t\tcontext.moveTo(this.xPosition + this.tankMidpoint - xLength, this.yPosition + this.tankMidpoint - xLength);\n\t\t\tcontext.lineTo(this.xPosition + this.tankMidpoint + xLength, this.yPosition + this.tankMidpoint + xLength);\n\t\t\tcontext.stroke();\n\n\t\t\tcontext.beginPath();\n\t\t\tcontext.moveTo(this.xPosition + this.tankMidpoint - xLength, this.yPosition + this.tankMidpoint + xLength);\n\t\t\tcontext.lineTo(this.xPosition + this.tankMidpoint + xLength, this.yPosition + this.tankMidpoint - xLength);\n\t\t\tcontext.stroke();\n\t\t} else {\n\t\t\tcontext.fillStyle = this.color;\n\t\t\tcontext.fillRect(this.xPosition, this.yPosition, this.size, this.size);\n\n\t\t\tcontext.setLineDash([]);\n\t\t\tcontext.lineJoin = 'bevel';\n\t\t\tcontext.strokeStyle = 'black';\n\t\t\tcontext.lineWidth = 2;\n\t\t\tcontext.strokeRect(this.xPosition, this.yPosition, this.size, this.size);\n\n\t\t\tcontext.beginPath();\n\t\t\tcontext.arc(this.xPosition + this.tankMidpoint, this.yPosition + this.tankMidpoint, this.size / 3, 0, this.twoPi);\n\t\t\tcontext.stroke();\n\n\t\t\tthis.gunBarrellEndX = this.xPosition + this.tankMidpoint + Math.cos(this.aimAngle) * this.size;\n\t\t\tthis.gunBarrellEndY = this.yPosition + this.tankMidpoint + Math.sin(this.aimAngle) * this.size;\n\t\t\tcontext.beginPath();\n\t\t\tcontext.moveTo(this.xPosition + this.tankMidpoint, this.yPosition + this.tankMidpoint);\n\t\t\tcontext.lineTo(this.gunBarrellEndX, this.gunBarrellEndY);\n\t\t\tcontext.lineWidth = this.gunBarrellWidth;\n\t\t\tcontext.stroke();\n\t\t}\n\t}\n\n\tpublic destroy(): void {\n\t\tthis.isDestroyed = true;\n\t\tthis.isExploding = true;\n\t\tthis.createFragments();\n\t\tsetTimeout((): void => {\n\t\t\tthis.isExploding = false;\n\t\t}, 1000);\n\t}\n\n\tcreateFragments(): void {\n\t\tconst fragmentCount = 50;\n\t\tfor (let i = 0; i < fragmentCount; i++) {\n\t\t\tconst angle = Math.random() * 2 * Math.PI;\n\t\t\tconst speed = Math.random() * 5 + 2;\n\t\t\tconst velocityX = Math.cos(angle) * speed;\n\t\t\tconst velocityY = Math.sin(angle) * speed;\n\t\t\tconst grayValue = Math.floor(Math.random() * 256);\n\t\t\tconst alphaValue = Math.random() * 0.5 + 0.5;\n\t\t\tconst fragmentColor = `rgba(${grayValue}, ${grayValue}, ${grayValue}, ${alphaValue})`;\n\t\t\tconst fragment = new BombFragment(\n\t\t\t\tthis.xPosition + this.tankMidpoint,\n\t\t\t\tthis.yPosition + this.tankMidpoint,\n\t\t\t\tMath.random() * 2 + 1,\n\t\t\t\tfragmentColor,\n\t\t\t\tvelocityX,\n\t\t\t\tvelocityY,\n\t\t\t\t10\n\t\t\t);\n\t\t\tthis.fragments.push(fragment);\n\t\t}\n\t}\n\n\tupdateExplosion(context: CanvasRenderingContext2D): void {\n\t\tthis.fragments.forEach((particle) => {\n\t\t\tparticle.update();\n\t\t\tparticle.draw(context);\n\t\t});\n\n\t\tthis.fragments = this.fragments.filter((particle) => particle.life > 0);\n\t}\n\n\tpublic updatePosition(\n\t\tcurrentTank: Tank,\n\t\tplayerTank: Tank,\n\t\tenemyTanks: Tank[],\n\t\tammunition: Ammunition[],\n\t\tbombs: Bomb[]\n\t): void {\n\t\treturn;\n\t}\n\n\tpublic aim(mouseXPos: number, mouseYpos: number, playerTank: Tank): void {\n\t\treturn;\n\t}\n\n\tpublic shoot(playerTank: Tank): void {\n\t\treturn;\n\t}\n\n\tpublic plantBomb(playerTank: Tank): void {\n\t\treturn;\n\t}\n\n\tpublic moveInLastDirectionMoved(): void {\n\t\tthis.moveInCardinalDirection(this.lastDirectionMoved);\n\t}\n\n\tpublic getRandomDirection<Direction>(): Direction[keyof Direction] {\n\t\tconst enumValues = Object.keys(Direction)\n\t\t\t.map((n) => Number.parseInt(n))\n\t\t\t.filter((n) => !Number.isNaN(n)) as unknown as Direction[keyof Direction][];\n\t\tconst randomIndex = Math.floor(Math.random() * enumValues.length);\n\t\tconst randomEnumValue = enumValues[randomIndex];\n\t\treturn randomEnumValue;\n\t}\n\n\tpublic moveInCardinalDirection(direction: Direction): void {\n\t\tif (this.isDestroyed) {\n\t\t\treturn;\n\t\t}\n\t\tswitch (direction) {\n\t\t\tcase Direction.NORTH: {\n\t\t\t\tthis.moveNorth();\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase Direction.SOUTH: {\n\t\t\t\tthis.moveSouth();\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase Direction.EAST: {\n\t\t\t\tthis.moveEast();\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase Direction.WEST: {\n\t\t\t\tthis.moveWest();\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase Direction.NORTHEAST: {\n\t\t\t\tthis.moveNorthEast();\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase Direction.NORTHWEST: {\n\t\t\t\tthis.moveNorthWest();\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase Direction.SOUTHEAST: {\n\t\t\t\tthis.moveSouthEast();\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase Direction.SOUTHWEST: {\n\t\t\t\tthis.moveSouthWest();\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdefault: {\n\t\t\t\tconst enumValues = Object.values(Direction).filter((value) => typeof value === 'number') as Direction[];\n\t\t\t\tconst randomIndex = Math.floor(Math.random() * enumValues.length);\n\t\t\t\tthis.moveInCardinalDirection(enumValues[randomIndex]);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic moveNorth(): void {\n\t\tif (this.isDestroyed) {\n\t\t\treturn;\n\t\t}\n\t\tif (this.lastDirectionMoved == Direction.NORTH) {\n\t\t\tthis.consecutiveDirectionMoves += 1;\n\t\t} else {\n\t\t\tthis.consecutiveDirectionMoves = 0;\n\t\t}\n\t\tthis.lastDirectionMoved = Direction.NORTH;\n\t\tlet blocked = false;\n\t\tfor (const obstacle of this.obstacleCanvas.obstacles) {\n\t\t\tif (\n\t\t\t\tthis.yPosition - this.speed < obstacle.yTop + obstacle.height &&\n\t\t\t\tthis.yPosition > obstacle.yTop &&\n\t\t\t\tobstacle.xLeft < this.xPosition + this.size &&\n\t\t\t\tthis.xPosition < obstacle.xRight\n\t\t\t) {\n\t\t\t\tthis.yPosition = obstacle.yBottom;\n\t\t\t\tblocked = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (!blocked) {\n\t\t\tthis.yPosition = Math.max(this.yPosition - this.speed, 0);\n\t\t} else {\n\t\t\tthis.wasLastMoveBlocked = true;\n\t\t}\n\t}\n\n\tpublic moveSouth(): void {\n\t\tif (this.isDestroyed) {\n\t\t\treturn;\n\t\t}\n\t\tif (this.lastDirectionMoved == Direction.SOUTH) {\n\t\t\tthis.consecutiveDirectionMoves += 1;\n\t\t} else {\n\t\t\tthis.consecutiveDirectionMoves = 0;\n\t\t}\n\t\tthis.lastDirectionMoved = Direction.SOUTH;\n\t\tlet blocked = false;\n\t\tfor (const obstacle of this.obstacleCanvas.obstacles) {\n\t\t\tif (\n\t\t\t\tthis.yPosition + this.speed + this.size > obstacle.yTop &&\n\t\t\t\tthis.yPosition < obstacle.yTop + obstacle.height &&\n\t\t\t\tobstacle.xLeft < this.xPosition + this.size &&\n\t\t\t\tthis.xPosition < obstacle.xRight\n\t\t\t) {\n\t\t\t\tthis.yPosition = obstacle.yTop - this.size;\n\t\t\t\tblocked = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (!blocked) {\n\t\t\tthis.yPosition = Math.min(this.yPosition + this.speed, this.canvasHeight - this.size);\n\t\t} else {\n\t\t\tthis.wasLastMoveBlocked = true;\n\t\t}\n\t}\n\n\tpublic moveWest(): void {\n\t\tif (this.isDestroyed) {\n\t\t\treturn;\n\t\t}\n\t\tif (this.lastDirectionMoved == Direction.WEST) {\n\t\t\tthis.consecutiveDirectionMoves += 1;\n\t\t} else {\n\t\t\tthis.consecutiveDirectionMoves = 0;\n\t\t}\n\t\tthis.lastDirectionMoved = Direction.WEST;\n\t\tlet blocked = false;\n\t\tfor (const obstacle of this.obstacleCanvas.obstacles) {\n\t\t\tif (\n\t\t\t\tthis.xPosition - this.speed < obstacle.xRight &&\n\t\t\t\tthis.xPosition > obstacle.xLeft &&\n\t\t\t\tobstacle.yTop < this.yPosition + this.size &&\n\t\t\t\tthis.yPosition < obstacle.yBottom\n\t\t\t) {\n\t\t\t\tthis.xPosition = obstacle.xRight;\n\t\t\t\tblocked = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (!blocked) {\n\t\t\tthis.xPosition = Math.max(this.xPosition - this.speed, 0);\n\t\t} else {\n\t\t\tthis.wasLastMoveBlocked = true;\n\t\t}\n\t}\n\n\tpublic moveEast(): void {\n\t\tif (this.isDestroyed) {\n\t\t\treturn;\n\t\t}\n\t\tif (this.lastDirectionMoved == Direction.EAST) {\n\t\t\tthis.consecutiveDirectionMoves += 1;\n\t\t} else {\n\t\t\tthis.consecutiveDirectionMoves = 0;\n\t\t}\n\t\tthis.lastDirectionMoved = Direction.EAST;\n\t\tlet blocked = false;\n\t\tfor (const obstacle of this.obstacleCanvas.obstacles) {\n\t\t\tif (\n\t\t\t\tthis.xPosition + this.speed + this.size > obstacle.xLeft &&\n\t\t\t\tthis.xPosition < obstacle.xLeft + obstacle.width &&\n\t\t\t\tobstacle.yTop < this.yPosition + this.size &&\n\t\t\t\tthis.yPosition < obstacle.yBottom\n\t\t\t) {\n\t\t\t\tthis.xPosition = obstacle.xLeft - this.size;\n\t\t\t\tblocked = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (!blocked) {\n\t\t\tthis.xPosition = Math.min(this.xPosition + this.speed, this.canvasWidth - this.size);\n\t\t} else {\n\t\t\tthis.wasLastMoveBlocked = true;\n\t\t}\n\t}\n\n\tpublic moveNorthEast(): void {\n\t\tif (this.isDestroyed) {\n\t\t\treturn;\n\t\t}\n\t\tif (this.lastDirectionMoved == Direction.NORTHEAST) {\n\t\t\tthis.consecutiveDirectionMoves += 1;\n\t\t} else {\n\t\t\tthis.consecutiveDirectionMoves = 0;\n\t\t}\n\t\tthis.lastDirectionMoved = Direction.NORTHEAST;\n\t\tlet blockedNorth = false;\n\t\tlet blockedEast = false;\n\t\tfor (const obstacle of this.obstacleCanvas.obstacles) {\n\t\t\tif (\n\t\t\t\t!blockedNorth &&\n\t\t\t\tthis.yPosition - this.speed < obstacle.yTop + obstacle.height &&\n\t\t\t\tthis.yPosition > obstacle.yTop &&\n\t\t\t\tobstacle.xLeft < this.xPosition + this.size &&\n\t\t\t\tthis.xPosition < obstacle.xRight\n\t\t\t) {\n\t\t\t\tthis.yPosition = obstacle.yBottom;\n\t\t\t\tblockedNorth = true;\n\t\t\t}\n\t\t\tif (\n\t\t\t\t!blockedEast &&\n\t\t\t\tthis.xPosition + this.speed + this.size > obstacle.xLeft &&\n\t\t\t\tthis.xPosition < obstacle.xLeft + obstacle.width &&\n\t\t\t\tobstacle.yTop < this.yPosition + this.size &&\n\t\t\t\tthis.yPosition < obstacle.yBottom\n\t\t\t) {\n\t\t\t\tthis.xPosition = obstacle.xLeft - this.size;\n\t\t\t\tblockedEast = true;\n\t\t\t}\n\t\t}\n\t\tif (blockedNorth && blockedEast) {\n\t\t\tthis.wasLastMoveBlocked = true;\n\t\t}\n\t\tif (!blockedNorth) {\n\t\t\tthis.yPosition = Math.max(this.yPosition - this.speed, 0);\n\t\t}\n\t\tif (!blockedEast) {\n\t\t\tthis.xPosition = Math.min(this.xPosition + this.speed, this.canvasWidth - this.size);\n\t\t}\n\t}\n\n\tpublic moveNorthWest(): void {\n\t\tif (this.isDestroyed) {\n\t\t\treturn;\n\t\t}\n\t\tif (this.lastDirectionMoved == Direction.NORTHWEST) {\n\t\t\tthis.consecutiveDirectionMoves += 1;\n\t\t} else {\n\t\t\tthis.consecutiveDirectionMoves = 0;\n\t\t}\n\t\tthis.lastDirectionMoved = Direction.NORTHWEST;\n\t\tlet blockedNorth = false;\n\t\tlet blockedWest = false;\n\t\tfor (const obstacle of this.obstacleCanvas.obstacles) {\n\t\t\tif (\n\t\t\t\t!blockedNorth &&\n\t\t\t\tthis.yPosition - this.speed < obstacle.yTop + obstacle.height &&\n\t\t\t\tthis.yPosition > obstacle.yTop &&\n\t\t\t\tobstacle.xLeft < this.xPosition + this.size &&\n\t\t\t\tthis.xPosition < obstacle.xRight\n\t\t\t) {\n\t\t\t\tthis.yPosition = obstacle.yBottom;\n\t\t\t\tblockedNorth = true;\n\t\t\t}\n\t\t\tif (\n\t\t\t\t!blockedWest &&\n\t\t\t\tthis.xPosition - this.speed < obstacle.xRight &&\n\t\t\t\tthis.xPosition > obstacle.xLeft &&\n\t\t\t\tobstacle.yTop < this.yPosition + this.size &&\n\t\t\t\tthis.yPosition < obstacle.yBottom\n\t\t\t) {\n\t\t\t\tthis.xPosition = obstacle.xRight;\n\t\t\t\tblockedWest = true;\n\t\t\t}\n\t\t}\n\t\tif (blockedNorth && blockedWest) {\n\t\t\tthis.wasLastMoveBlocked = true;\n\t\t}\n\t\tif (!blockedNorth) {\n\t\t\tthis.yPosition = Math.max(this.yPosition - this.speed, 0);\n\t\t}\n\t\tif (!blockedWest) {\n\t\t\tthis.xPosition = Math.max(this.xPosition - this.speed, 0);\n\t\t}\n\t}\n\n\tpublic moveSouthEast(): void {\n\t\tif (this.isDestroyed) {\n\t\t\treturn;\n\t\t}\n\t\tif (this.lastDirectionMoved == Direction.SOUTHEAST) {\n\t\t\tthis.consecutiveDirectionMoves += 1;\n\t\t} else {\n\t\t\tthis.consecutiveDirectionMoves = 0;\n\t\t}\n\t\tthis.lastDirectionMoved = Direction.SOUTHEAST;\n\t\tlet blockedSouth = false;\n\t\tlet blockedEast = false;\n\t\tfor (const obstacle of this.obstacleCanvas.obstacles) {\n\t\t\tif (\n\t\t\t\t!blockedSouth &&\n\t\t\t\tthis.yPosition + this.speed + this.size > obstacle.yTop &&\n\t\t\t\tthis.yPosition < obstacle.yTop + obstacle.height &&\n\t\t\t\tobstacle.xLeft < this.xPosition + this.size &&\n\t\t\t\tthis.xPosition < obstacle.xRight\n\t\t\t) {\n\t\t\t\tthis.yPosition = obstacle.yTop - this.size;\n\t\t\t\tblockedSouth = true;\n\t\t\t}\n\t\t\tif (\n\t\t\t\t!blockedEast &&\n\t\t\t\tthis.xPosition + this.speed + this.size > obstacle.xLeft &&\n\t\t\t\tthis.xPosition < obstacle.xLeft + obstacle.width &&\n\t\t\t\tobstacle.yTop < this.yPosition + this.size &&\n\t\t\t\tthis.yPosition < obstacle.yBottom\n\t\t\t) {\n\t\t\t\tthis.xPosition = obstacle.xLeft - this.size;\n\t\t\t\tblockedEast = true;\n\t\t\t}\n\t\t}\n\t\tif (blockedSouth && blockedEast) {\n\t\t\tthis.wasLastMoveBlocked = true;\n\t\t}\n\t\tif (!blockedSouth) {\n\t\t\tthis.yPosition = Math.min(this.yPosition + this.speed, this.canvasHeight - this.size);\n\t\t}\n\t\tif (!blockedEast) {\n\t\t\tthis.xPosition = Math.min(this.xPosition + this.speed, this.canvasWidth - this.size);\n\t\t}\n\t}\n\n\tpublic moveSouthWest(): void {\n\t\tif (this.isDestroyed) {\n\t\t\treturn;\n\t\t}\n\t\tif (this.lastDirectionMoved == Direction.SOUTHWEST) {\n\t\t\tthis.consecutiveDirectionMoves += 1;\n\t\t} else {\n\t\t\tthis.consecutiveDirectionMoves = 0;\n\t\t}\n\t\tthis.lastDirectionMoved = Direction.SOUTHWEST;\n\t\tlet blockedSouth = false;\n\t\tlet blockedWest = false;\n\t\tfor (const obstacle of this.obstacleCanvas.obstacles) {\n\t\t\tif (\n\t\t\t\t!blockedSouth &&\n\t\t\t\tthis.yPosition + this.speed + this.size > obstacle.yTop &&\n\t\t\t\tthis.yPosition < obstacle.yTop + obstacle.height &&\n\t\t\t\tobstacle.xLeft < this.xPosition + this.size &&\n\t\t\t\tthis.xPosition < obstacle.xRight\n\t\t\t) {\n\t\t\t\tthis.yPosition = obstacle.yTop - this.size;\n\t\t\t\tblockedSouth = true;\n\t\t\t}\n\t\t\tif (\n\t\t\t\t!blockedWest &&\n\t\t\t\tthis.xPosition - this.speed < obstacle.xRight &&\n\t\t\t\tthis.xPosition > obstacle.xLeft &&\n\t\t\t\tobstacle.yTop < this.yPosition + this.size &&\n\t\t\t\tthis.yPosition < obstacle.yBottom\n\t\t\t) {\n\t\t\t\tthis.xPosition = obstacle.xRight;\n\t\t\t\tblockedWest = true;\n\t\t\t}\n\t\t}\n\t\tif (blockedSouth && blockedWest) {\n\t\t\tthis.wasLastMoveBlocked = true;\n\t\t}\n\t\tif (!blockedSouth) {\n\t\t\tthis.yPosition = Math.min(this.yPosition + this.speed, this.canvasHeight - this.size);\n\t\t}\n\t\tif (!blockedWest) {\n\t\t\tthis.xPosition = Math.max(this.xPosition - this.speed, 0);\n\t\t}\n\t}\n}\n","import { AudioFile, AudioManager } from './AudioManager';\nimport { Bomb } from './Bomb';\nimport { ObstacleCanvas } from './ObstacleCanvas';\nimport { Tank } from './tanks/Tank';\n\nexport class Ammunition {\n\tpublic xPosition: number;\n\tpublic yPosition: number;\n\tpublic xVelocity: number;\n\tpublic yVelocity: number;\n\tpublic theta: number;\n\tpublic bounces: number;\n\tpublic maxBounces: number;\n\tpublic speed: number;\n\tpublic canvasWidth: number;\n\tpublic canvasHeight: number;\n\tpublic isDestroyed: boolean;\n\tpublic audioManager: AudioManager;\n\tpublic radius: number = 4;\n\n\tconstructor(\n\t\tstartX: number,\n\t\tstartY: number,\n\t\ttheta: number,\n\t\tspeed: number,\n\t\tmaxBounces: number,\n\t\tcanvasWidth: number,\n\t\tcanvasHeight: number,\n\t\tisDestroyed: boolean,\n\t\taudioManager: AudioManager\n\t) {\n\t\tthis.xPosition = startX;\n\t\tthis.yPosition = startY;\n\t\tthis.theta = theta;\n\t\tthis.speed = speed;\n\t\tthis.xVelocity = Math.cos(this.theta) * this.speed;\n\t\tthis.yVelocity = Math.sin(this.theta) * this.speed;\n\t\tthis.bounces = 0;\n\t\tthis.maxBounces = maxBounces;\n\t\tthis.canvasWidth = canvasWidth;\n\t\tthis.canvasHeight = canvasHeight;\n\t\tthis.isDestroyed = isDestroyed;\n\t\tthis.audioManager = audioManager;\n\t}\n\n\tupdatePosition(obstacleCanvas: ObstacleCanvas): void {\n\t\tthis.xPosition += this.xVelocity;\n\t\tthis.yPosition += this.yVelocity;\n\n\t\tif (this.xPosition <= 0 || this.xPosition > this.canvasWidth) {\n\t\t\tthis.xVelocity = -this.xVelocity;\n\t\t\tthis.bounces++;\n\t\t}\n\n\t\tif (this.yPosition <= 0 || this.yPosition > this.canvasHeight) {\n\t\t\tthis.yVelocity = -this.yVelocity;\n\t\t\tthis.bounces++;\n\t\t}\n\n\t\tobstacleCanvas.obstacles.forEach((obstacle) => {\n\t\t\tif (\n\t\t\t\tthis.xPosition > obstacle.xLeft &&\n\t\t\t\tthis.xPosition < obstacle.xRight &&\n\t\t\t\tthis.yPosition > obstacle.yTop &&\n\t\t\t\tthis.yPosition < obstacle.yBottom\n\t\t\t) {\n\t\t\t\tthis.bounces++;\n\t\t\t\tconst fromLeft = Math.abs(this.xPosition - obstacle.xLeft);\n\t\t\t\tconst fromRight = Math.abs(this.xPosition - obstacle.xRight);\n\t\t\t\tconst fromTop = Math.abs(this.yPosition - obstacle.yTop);\n\t\t\t\tconst fromBottom = Math.abs(this.yPosition - obstacle.yBottom);\n\t\t\t\tconst minDistance = Math.min(fromLeft, fromRight, fromTop, fromBottom);\n\n\t\t\t\tif (minDistance === fromTop) {\n\t\t\t\t\tthis.yPosition = obstacle.yTop - 1;\n\t\t\t\t\tthis.yVelocity = -this.yVelocity;\n\t\t\t\t} else if (minDistance === fromBottom) {\n\t\t\t\t\tthis.yPosition = obstacle.yBottom + 1;\n\t\t\t\t\tthis.yVelocity = -this.yVelocity;\n\t\t\t\t} else if (minDistance === fromLeft) {\n\t\t\t\t\tthis.xPosition = obstacle.xLeft - 1;\n\t\t\t\t\tthis.xVelocity = -this.xVelocity;\n\t\t\t\t} else if (minDistance === fromRight) {\n\t\t\t\t\tthis.xPosition = obstacle.xRight + 1;\n\t\t\t\t\tthis.xVelocity = -this.xVelocity;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tif (this.bounces > this.maxBounces) {\n\t\t\tthis.isDestroyed = true;\n\t\t}\n\t}\n\n\tcheckEnemyHit(enemyTanks: Tank[]): void {\n\t\tenemyTanks.forEach((enemyTank) => {\n\t\t\tif (enemyTank.isDestroyed) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (\n\t\t\t\tthis.xPosition > enemyTank.xLeft &&\n\t\t\t\tthis.xPosition < enemyTank.xRight &&\n\t\t\t\tthis.yPosition > enemyTank.yTop &&\n\t\t\t\tthis.yPosition < enemyTank.yBottom\n\t\t\t) {\n\t\t\t\tthis.isDestroyed = true;\n\t\t\t\tenemyTank.destroy();\n\t\t\t\tthis.audioManager.play(AudioFile.TANK_DESTROY);\n\t\t\t\tconsole.log('Enemy hit!!!');\n\t\t\t}\n\t\t});\n\t}\n\n\tcheckPlayerHit(playerTank: Tank): void {\n\t\tif (playerTank.isDestroyed) {\n\t\t\treturn;\n\t\t}\n\t\tif (\n\t\t\tthis.xPosition > playerTank.xLeft &&\n\t\t\tthis.xPosition < playerTank.xRight &&\n\t\t\tthis.yPosition > playerTank.yTop &&\n\t\t\tthis.yPosition < playerTank.yBottom\n\t\t) {\n\t\t\tplayerTank.destroy();\n\t\t\tthis.isDestroyed = true;\n\t\t\tconsole.log('Player Hit!!!');\n\t\t}\n\t}\n\n\tcheckAmmunitionCollision(ammunitions: Ammunition[]): void {\n\t\tfor (const ammunition of ammunitions) {\n\t\t\tif (ammunition !== this && !ammunition.isDestroyed) {\n\t\t\t\tconst dx = this.xPosition - ammunition.xPosition;\n\t\t\t\tconst dy = this.yPosition - ammunition.yPosition;\n\t\t\t\tconst distance = Math.sqrt(dx * dx + dy * dy);\n\t\t\t\tif (distance < this.radius + ammunition.radius) {\n\t\t\t\t\tthis.isDestroyed = true;\n\t\t\t\t\tammunition.isDestroyed = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tcheckBombCollision(bombs: Bomb[]): void {\n\t\tfor (const bomb of bombs) {\n\t\t\tif (!bomb.isDestroyed) {\n\t\t\t\tconst dx = this.xPosition - bomb.xPosition;\n\t\t\t\tconst dy = this.yPosition - bomb.yPosition;\n\t\t\t\tconst distance = Math.sqrt(dx * dx + dy * dy);\n\t\t\t\tif (distance < this.radius + bomb.radius) {\n\t\t\t\t\tthis.isDestroyed = true;\n\t\t\t\t\tbomb.destroy();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treload(\n\t\tstartX: number,\n\t\tstartY: number,\n\t\ttheta: number,\n\t\tisDestroyed: boolean,\n\t\tcanvasWidth: number,\n\t\tcanvasHeight: number\n\t) {\n\t\tthis.xPosition = startX;\n\t\tthis.yPosition = startY;\n\t\tthis.theta = theta;\n\t\tthis.isDestroyed = isDestroyed;\n\t\tthis.xVelocity = Math.cos(this.theta) * this.speed;\n\t\tthis.yVelocity = Math.sin(this.theta) * this.speed;\n\t\tthis.canvasWidth = canvasWidth;\n\t\tthis.canvasHeight = canvasHeight;\n\t\tthis.bounces = 0;\n\t}\n\n\tdraw(context: CanvasRenderingContext2D): void {\n\t\tcontext.beginPath();\n\t\tcontext.arc(this.xPosition, this.yPosition, this.radius, 0, 2 * Math.PI);\n\t\tcontext.fillStyle = 'white';\n\t\tcontext.fill();\n\t\tcontext.lineWidth = 2;\n\t\tcontext.strokeStyle = 'black';\n\t\tcontext.stroke();\n\t\tcontext.closePath();\n\t}\n\n\twillHitPlayerTank(obstacleCanvas: ObstacleCanvas, playerTank: Tank): boolean {\n\t\tlet predictedXPosition: number = this.xPosition;\n\t\tlet predictedYPosition: number = this.yPosition;\n\t\tlet predictedXVelocity: number = this.xVelocity;\n\t\tlet predictedYVelocity: number = this.yVelocity;\n\t\tlet predictedBounces = 0;\n\t\twhile (predictedBounces <= this.maxBounces) {\n\t\t\tpredictedXPosition += predictedXVelocity;\n\t\t\tpredictedYPosition += predictedYVelocity;\n\t\t\tif (predictedXPosition <= 0 || predictedXPosition > this.canvasWidth) {\n\t\t\t\tpredictedXVelocity = -predictedXVelocity;\n\t\t\t\tpredictedBounces++;\n\t\t\t}\n\t\t\tif (predictedYPosition <= 0 || predictedYPosition > this.canvasHeight) {\n\t\t\t\tpredictedYVelocity = -predictedYVelocity;\n\t\t\t\tpredictedBounces++;\n\t\t\t}\n\t\t\tobstacleCanvas.obstacles.forEach((obstacle) => {\n\t\t\t\tif (\n\t\t\t\t\tpredictedXPosition > obstacle.xLeft &&\n\t\t\t\t\tpredictedXPosition < obstacle.xRight &&\n\t\t\t\t\tpredictedYPosition > obstacle.yTop &&\n\t\t\t\t\tpredictedYPosition < obstacle.yBottom\n\t\t\t\t) {\n\t\t\t\t\tpredictedBounces++;\n\t\t\t\t\tpredictedXVelocity = -predictedXVelocity;\n\t\t\t\t\tpredictedYVelocity = -predictedYVelocity;\n\t\t\t\t}\n\t\t\t});\n\t\t\tif (\n\t\t\t\tpredictedXPosition > playerTank.xLeft &&\n\t\t\t\tpredictedXPosition < playerTank.xRight &&\n\t\t\t\tpredictedYPosition > playerTank.yTop &&\n\t\t\t\tpredictedYPosition < playerTank.yBottom\n\t\t\t) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n}\n\nexport class PlayerAmmunition extends Ammunition {\n\tconstructor(\n\t\tstartX: number,\n\t\tstartY: number,\n\t\ttheta: number,\n\t\tcanvasWidth: number,\n\t\tcanvasHeight: number,\n\t\tisDestroyed: boolean,\n\t\taudioManager: AudioManager\n\t) {\n\t\tconst playerAmmunitionMaxBounces = 1;\n\t\tconst playerAmmunitionSpeed = 4;\n\t\tsuper(\n\t\t\tstartX,\n\t\t\tstartY,\n\t\t\ttheta,\n\t\t\tplayerAmmunitionSpeed,\n\t\t\tplayerAmmunitionMaxBounces,\n\t\t\tcanvasWidth,\n\t\t\tcanvasHeight,\n\t\t\tisDestroyed,\n\t\t\taudioManager\n\t\t);\n\t}\n}\n\nexport class BasicAIAmmunition extends Ammunition {\n\tconstructor(\n\t\tstartX: number,\n\t\tstartY: number,\n\t\ttheta: number,\n\t\tcanvasWidth: number,\n\t\tcanvasHeight: number,\n\t\tisDestroyed: boolean,\n\t\taudioManager: AudioManager\n\t) {\n\t\tconst BasicAIAmmunitionMaxBounces = 1;\n\t\tconst BasicAIAmmunitionSpeed = 4;\n\t\tsuper(\n\t\t\tstartX,\n\t\t\tstartY,\n\t\t\ttheta,\n\t\t\tBasicAIAmmunitionSpeed,\n\t\t\tBasicAIAmmunitionMaxBounces,\n\t\t\tcanvasWidth,\n\t\t\tcanvasHeight,\n\t\t\tisDestroyed,\n\t\t\taudioManager\n\t\t);\n\t}\n}\n\nexport class SuperAIAmmunition extends Ammunition {\n\tconstructor(\n\t\tstartX: number,\n\t\tstartY: number,\n\t\ttheta: number,\n\t\tcanvasWidth: number,\n\t\tcanvasHeight: number,\n\t\tisDestroyed: boolean,\n\t\taudioManager: AudioManager\n\t) {\n\t\tconst superAIAmmunitionMaxBounces = 2;\n\t\tconst superAIAmmunitionSpeed = 6;\n\t\tsuper(\n\t\t\tstartX,\n\t\t\tstartY,\n\t\t\ttheta,\n\t\t\tsuperAIAmmunitionSpeed,\n\t\t\tsuperAIAmmunitionMaxBounces,\n\t\t\tcanvasWidth,\n\t\t\tcanvasHeight,\n\t\t\tisDestroyed,\n\t\t\taudioManager\n\t\t);\n\t}\n}\n","export class BombFragment {\n\tpublic life: number;\n\n\tprivate x: number;\n\tprivate y: number;\n\tprivate fragmentRadius: number;\n\tprivate fragmentColor: string;\n\tprivate velocityX: number;\n\tprivate velocityY: number;\n\tprivate blastRadius: number;\n\n\tconstructor(x: number, y: number, radius: number, color: string, velocityX: number, velocityY: number, life: number) {\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.fragmentRadius = radius;\n\t\tthis.fragmentColor = color;\n\t\tthis.velocityX = velocityX;\n\t\tthis.velocityY = velocityY;\n\t\tthis.blastRadius = life;\n\t\tthis.life = life;\n\t}\n\n\tupdate(): void {\n\t\tthis.x += this.velocityX;\n\t\tthis.y += this.velocityY;\n\t\tthis.life -= 1;\n\t}\n\n\tdraw(context: CanvasRenderingContext2D): void {\n\t\tcontext.beginPath();\n\t\tcontext.arc(this.x, this.y, this.fragmentRadius * (this.life / this.blastRadius), 0, Math.PI * 2, false);\n\t\tcontext.fillStyle = this.fragmentColor;\n\t\tcontext.fill();\n\t\tcontext.closePath();\n\t}\n}\n","import * as d3 from 'd3';\nimport { AudioFile, AudioManager } from './AudioManager';\nimport { BombFragment } from './BombFragment';\nimport { Tank } from './tanks/Tank';\n\nexport class Bomb {\n\tpublic xPosition: number;\n\tpublic yPosition: number;\n\tpublic blastRadius: number;\n\tpublic blastDelayMS: number;\n\tpublic isDestroyed: boolean;\n\tpublic isExploding: boolean;\n\tpublic fuseStartTime: number;\n\tpublic shouldFlashRed: boolean;\n\tpublic audioManager: AudioManager;\n\tpublic radius: number = 15;\n\n\tprivate fragments: BombFragment[];\n\tprivate fragmentColorScale = d3.scaleLinear<string>().domain([0, 0.5, 1]).range(['red', 'yellow', 'orange']);\n\n\tconstructor(startX: number, startY: number, blastRadius: number, isDestroyed: boolean, audioManager: AudioManager) {\n\t\tthis.xPosition = startX;\n\t\tthis.yPosition = startY;\n\t\tthis.blastRadius = blastRadius;\n\t\tthis.isDestroyed = isDestroyed;\n\t\tthis.audioManager = audioManager;\n\t\tthis.blastDelayMS = 5000;\n\t\tthis.fuseStartTime = 0;\n\t\tthis.shouldFlashRed = false;\n\t\tthis.isExploding = false;\n\t\tthis.fragments = [];\n\t}\n\n\tpublic destroy(): void {\n\t\tif (this.isDestroyed || this.isExploding) {\n\t\t\treturn;\n\t\t}\n\t\tthis.createFragments();\n\t\tthis.audioManager.play(AudioFile.BOMB_EXPLODE);\n\t\tthis.isExploding = true;\n\t\tsetTimeout((): void => {\n\t\t\tthis.isExploding = false;\n\t\t\tthis.isDestroyed = true;\n\t\t}, 500);\n\t}\n\n\tpublic checkEnemyHit(enemyTanks: Tank[]): void {\n\t\tenemyTanks.forEach((enemyTank) => {\n\t\t\tif (enemyTank.isDestroyed) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (this.isExploding) {\n\t\t\t\tif (\n\t\t\t\t\tthis.isExploding &&\n\t\t\t\t\tthis.isPointInsideBlastRadius(\n\t\t\t\t\t\tenemyTank.xPosition + enemyTank.tankMidpoint,\n\t\t\t\t\t\tenemyTank.yPosition + enemyTank.tankMidpoint\n\t\t\t\t\t)\n\t\t\t\t) {\n\t\t\t\t\tenemyTank.destroy();\n\t\t\t\t\tconsole.log('Enemy hit with bomb!!!');\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic checkPlayerHit(playerTank: Tank): void {\n\t\tif (playerTank.isDestroyed) {\n\t\t\treturn;\n\t\t}\n\t\tif (\n\t\t\tthis.isExploding &&\n\t\t\t(this.isPointInsideBlastRadius(playerTank.xLeft, playerTank.yTop) ||\n\t\t\t\tthis.isPointInsideBlastRadius(playerTank.xRight, playerTank.yTop) ||\n\t\t\t\tthis.isPointInsideBlastRadius(playerTank.xLeft, playerTank.yBottom) ||\n\t\t\t\tthis.isPointInsideBlastRadius(playerTank.xRight, playerTank.yBottom) ||\n\t\t\t\tthis.isPointInsideBlastRadius(playerTank.xPosition, playerTank.yPosition))\n\t\t) {\n\t\t\tplayerTank.destroy();\n\t\t\tconsole.log('Player Hit with bomb!!!');\n\t\t}\n\t}\n\n\tpublic setFuse(): void {\n\t\tif (this.isDestroyed) {\n\t\t\treturn;\n\t\t}\n\t\tthis.fuseStartTime = performance.now();\n\t\tthis.animateFuse();\n\t\tsetTimeout((): void => {\n\t\t\tthis.destroy();\n\t\t}, this.blastDelayMS);\n\t}\n\n\tpublic isPointInsideBlastRadius(x: number, y: number): boolean {\n\t\tconst dx = x - this.xPosition;\n\t\tconst dy = y - this.yPosition;\n\t\treturn Math.sqrt(dx * dx + dy * dy) <= this.blastRadius;\n\t}\n\n\tprotected updateExplosion(context: CanvasRenderingContext2D): void {\n\t\tthis.fragments.forEach((particle) => {\n\t\t\tparticle.update();\n\t\t\tparticle.draw(context);\n\t\t});\n\n\t\tthis.fragments = this.fragments.filter((particle) => particle.life > 0);\n\t}\n\n\tpublic draw(context: CanvasRenderingContext2D): void {\n\t\tif (this.isExploding) {\n\t\t\tthis.updateExplosion(context);\n\t\t\treturn;\n\t\t}\n\n\t\tcontext.beginPath();\n\t\tcontext.arc(this.xPosition, this.yPosition, this.radius, 0, 2 * Math.PI);\n\t\tcontext.fillStyle = this.shouldFlashRed ? 'red' : 'yellow';\n\t\tcontext.fill();\n\t\tcontext.lineWidth = 3;\n\t\tcontext.strokeStyle = 'black';\n\t\tcontext.stroke();\n\t\tcontext.closePath();\n\n\t\tcontext.beginPath();\n\t\tcontext.arc(this.xPosition, this.yPosition, 10, 0, 2 * Math.PI);\n\t\tcontext.lineWidth = 1.5;\n\t\tcontext.strokeStyle = 'black';\n\t\tcontext.stroke();\n\t\tcontext.closePath();\n\t}\n\n\tprivate animateFuse(): void {\n\t\tif (this.isDestroyed) {\n\t\t\treturn;\n\t\t}\n\t\tconst elapsedTime = performance.now() - this.fuseStartTime;\n\t\tconst fractionElapsed = elapsedTime / this.blastDelayMS;\n\t\tconst flashThresholds = [0.25, 0.5, 0.625, 0.75, 0.8125, 0.875, 0.90625, 0.9375, 0.96875, 0.984375];\n\t\tthis.shouldFlashRed = flashThresholds.some(\n\t\t\t(threshold) => fractionElapsed > threshold && fractionElapsed < threshold + 0.01\n\t\t);\n\t\trequestAnimationFrame(() => this.animateFuse());\n\t}\n\n\tprivate createFragments(): void {\n\t\tconst fragmentCount = 50;\n\t\tfor (let i = 0; i < fragmentCount; i++) {\n\t\t\tconst angle = Math.random() * 2 * Math.PI;\n\t\t\tconst speed = Math.random() * 5 + 2;\n\t\t\tconst velocityX = Math.cos(angle) * speed;\n\t\t\tconst velocityY = Math.sin(angle) * speed;\n\t\t\tconst fragment = new BombFragment(\n\t\t\t\tthis.xPosition,\n\t\t\t\tthis.yPosition,\n\t\t\t\tMath.random() * 2 + 1,\n\t\t\t\tthis.fragmentColorScale(Math.random()),\n\t\t\t\tvelocityX,\n\t\t\t\tvelocityY,\n\t\t\t\tthis.blastRadius\n\t\t\t);\n\t\t\tthis.fragments.push(fragment);\n\t\t}\n\t}\n}\n\nexport class PlayerBomb extends Bomb {\n\tconstructor(startX: number, startY: number, isDestroyed: boolean, audioManager: AudioManager) {\n\t\tconst playerBombBlastRadius = 50;\n\t\tsuper(startX, startY, playerBombBlastRadius, isDestroyed, audioManager);\n\t}\n}\n\nexport class BasicBomb extends Bomb {\n\tconstructor(startX: number, startY: number, isDestroyed: boolean, audioManager: AudioManager) {\n\t\tconst basicBombBlastRadius = 80;\n\t\tsuper(startX, startY, basicBombBlastRadius, isDestroyed, audioManager);\n\t}\n}\n\nexport class SuperBomb extends Bomb {\n\tconstructor(startX: number, startY: number, isDestroyed: boolean, audioManager: AudioManager) {\n\t\tconst superBombBlastRadius = 100;\n\t\tsuper(startX, startY, superBombBlastRadius, isDestroyed, audioManager);\n\t}\n}\n\nexport class LoveBomb extends Bomb {\n\tconstructor(startX: number, startY: number, isDestroyed: boolean, audioManager: AudioManager) {\n\t\tconst loveBombBlastRadius = 150;\n\t\tsuper(startX, startY, loveBombBlastRadius, isDestroyed, audioManager);\n\t}\n\n\toverride draw(context: CanvasRenderingContext2D): void {\n\t\tif (this.isExploding) {\n\t\t\tthis.updateExplosion(context);\n\t\t\treturn;\n\t\t}\n\t\tcontext.save();\n\t\tcontext.translate(this.xPosition, this.yPosition);\n\t\tcontext.scale(1, 1.3);\n\t\tcontext.beginPath();\n\t\tcontext.moveTo(0, 0);\n\t\tcontext.bezierCurveTo(12, -12, 24, 0, 0, 24);\n\t\tcontext.bezierCurveTo(-24, 0, -12, -12, 0, 0);\n\t\tcontext.fillStyle = this.shouldFlashRed ? 'red' : '#FFC2D1';\n\t\tcontext.fill();\n\t\tcontext.lineWidth = 3;\n\t\tcontext.strokeStyle = 'black';\n\t\tcontext.stroke();\n\t\tcontext.closePath();\n\t\tcontext.restore();\n\t}\n}\n","import { Ammunition } from './Ammunition';\nimport { Bomb } from './Bomb';\nimport { Tank } from './tanks/Tank';\n\nexport class GameRenderer {\n\tpublic playerWin = false;\n\tpublic enemyWin = false;\n\n\tprivate context: CanvasRenderingContext2D | null;\n\n\tconstructor(public canvas: HTMLCanvasElement) {\n\t\tconst context = this.canvas.getContext('2d');\n\t\tif (!context) {\n\t\t\tthrow new Error('2d context not supported or canvas element not found.');\n\t\t}\n\t\tthis.context = context;\n\t}\n\n\tpublic initializeCanvas(width: number, height: number): void {\n\t\tthis.canvas.width = width;\n\t\tthis.canvas.height = height;\n\t}\n\n\trenderLevelOverScreen() {\n\t\tif (!this.context) {\n\t\t\tthrow new Error('2d context not supported or canvas element not found.');\n\t\t}\n\n\t\tconst message = this.playerWin ? 'Win' : this.enemyWin ? 'Lose' : '';\n\t\tif (message === '') {\n\t\t\treturn;\n\t\t}\n\n\t\tconst fontSize = 100;\n\t\tthis.context.font = `${fontSize}px Arial`;\n\t\tthis.context.lineWidth = 5;\n\t\tthis.context.strokeStyle = this.playerWin ? 'green' : 'red';\n\t\tthis.context.fillStyle = this.playerWin ? 'green' : 'red';\n\n\t\tconst textWidth = this.context.measureText(message).width;\n\t\tconst x = (this.canvas.width - textWidth) / 2;\n\t\tconst y = this.canvas.height / 2 + fontSize / 2;\n\n\t\tthis.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\n\t\tthis.context.strokeText(message, x, y);\n\t\tthis.context.fillText(message, x, y);\n\t}\n\n\trender(progress: number, playerTank: Tank, enemyTanks: Tank[]): void {\n\t\tif (!this.context) {\n\t\t\tthrow new Error('2d context not supported or canvas element not found.');\n\t\t}\n\t\tthis.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\n\n\t\tif (playerTank.isDestroyed) {\n\t\t\tthis.enemyWin = true;\n\t\t} else if (enemyTanks.every((tank) => tank.isDestroyed)) {\n\t\t\tthis.playerWin = true;\n\t\t}\n\t\tif (this.enemyWin || this.playerWin) {\n\t\t\tthis.renderLevelOverScreen();\n\t\t}\n\t\tconst allAmmunition: Ammunition[] = [\n\t\t\t...enemyTanks.flatMap((enemyTank) => enemyTank.ammunition),\n\t\t\t...playerTank.ammunition,\n\t\t];\n\t\tconst allBombs: Bomb[] = [...enemyTanks.flatMap((enemyTank) => enemyTank.bombs), ...playerTank.bombs];\n\t\tplayerTank.updatePosition(playerTank, playerTank, enemyTanks, allAmmunition, allBombs);\n\t\tplayerTank.aim(playerTank.aimXPos, playerTank.aimYPos, playerTank);\n\n\t\tenemyTanks.forEach((enemyTank) => {\n\t\t\tif (!enemyTank.isDestroyed) {\n\t\t\t\tenemyTank.updatePosition(enemyTank, playerTank, enemyTanks, allAmmunition, allBombs);\n\t\t\t\tenemyTank.aim(enemyTank.aimXPos, enemyTank.aimYPos, playerTank);\n\t\t\t\tenemyTank.shoot(playerTank);\n\t\t\t\tenemyTank.plantBomb(playerTank);\n\t\t\t}\n\t\t});\n\t\tenemyTanks.forEach((enemyTank) => {\n\t\t\tenemyTank.draw(this.context as CanvasRenderingContext2D);\n\t\t\tenemyTank.ammunition.forEach((ammunition) => {\n\t\t\t\tif (ammunition.isDestroyed) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tammunition.checkAmmunitionCollision(allAmmunition);\n\t\t\t\tammunition.checkBombCollision([...playerTank.bombs]);\n\t\t\t\tammunition.updatePosition(enemyTank.obstacleCanvas);\n\t\t\t\tammunition.checkPlayerHit(playerTank);\n\t\t\t\tammunition.draw(this.context as CanvasRenderingContext2D);\n\t\t\t});\n\t\t\tenemyTank.bombs.forEach((bomb) => {\n\t\t\t\tif (bomb.isDestroyed && !bomb.isExploding) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tbomb.checkPlayerHit(playerTank);\n\t\t\t\tbomb.draw(this.context as CanvasRenderingContext2D);\n\t\t\t});\n\t\t});\n\n\t\tplayerTank.draw(this.context as CanvasRenderingContext2D);\n\t\tif (!playerTank.isDestroyed) {\n\t\t\tplayerTank.reticule.draw(\n\t\t\t\tthis.context as CanvasRenderingContext2D,\n\t\t\t\tplayerTank.xPosition,\n\t\t\t\tplayerTank.yPosition,\n\t\t\t\tplayerTank.aimXPos,\n\t\t\t\tplayerTank.aimYPos\n\t\t\t);\n\t\t}\n\t\tplayerTank.ammunition.forEach((ammunition) => {\n\t\t\tif (ammunition.isDestroyed) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tammunition.checkAmmunitionCollision(allAmmunition);\n\t\t\tammunition.checkBombCollision(allBombs);\n\t\t\tammunition.updatePosition(playerTank.obstacleCanvas);\n\t\t\tammunition.checkEnemyHit(enemyTanks);\n\t\t\tammunition.checkPlayerHit(playerTank);\n\t\t\tammunition.draw(this.context as CanvasRenderingContext2D);\n\t\t});\n\t\tplayerTank.bombs.forEach((bomb) => {\n\t\t\tif (bomb.isDestroyed && !bomb.isExploding) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tbomb.checkEnemyHit(enemyTanks);\n\t\t\tbomb.checkPlayerHit(playerTank);\n\t\t\tbomb.draw(this.context as CanvasRenderingContext2D);\n\t\t});\n\t}\n}\n","import { GameRenderer } from './GameRenderer';\nimport { ObstacleCanvas } from './ObstacleCanvas';\nimport { Tank } from './tanks/Tank';\n\nexport class GameCanvas {\n\tpublic gameRenderer: GameRenderer;\n\tprivate playerTank: Tank | null = null;\n\tprivate enemyTanks: Tank[] = [];\n\tprivate lastRenderTime: number;\n\tpublic obstacleCanvas: ObstacleCanvas;\n\tpublic width: number;\n\tpublic height: number;\n\tpublic animationFrameID: number | null = null;\n\n\tconstructor(canvasSelector: string, width: number, height: number, obstacleCanvas: ObstacleCanvas) {\n\t\tthis.width = width;\n\t\tthis.height = height;\n\t\tthis.obstacleCanvas = obstacleCanvas;\n\t\tthis.animationFrameID = null;\n\t\tthis.gameRenderer = new GameRenderer(document.querySelector(canvasSelector) as HTMLCanvasElement);\n\t\tthis.gameRenderer.initializeCanvas(this.width, this.height);\n\t\tthis.lastRenderTime = 0;\n\t\twindow.addEventListener('resize', this.resizeCanvas.bind(this));\n\t}\n\n\tpublic start() {\n\t\tif (!this.animationFrameID) {\n\t\t\tthis.animationFrameID = requestAnimationFrame(this.gameLoop.bind(this));\n\t\t}\n\t}\n\n\tpublic stop() {\n\t\tif (this.animationFrameID) {\n\t\t\tcancelAnimationFrame(this.animationFrameID);\n\t\t\tthis.animationFrameID = null;\n\t\t}\n\t}\n\n\tprivate resizeCanvas(): void {}\n\n\tprivate gameLoop(timeStamp: number): void {\n\t\tif (this.playerTank != null) {\n\t\t\tconst progress = timeStamp - this.lastRenderTime;\n\t\t\tthis.gameRenderer.render(progress, this.playerTank, this.enemyTanks);\n\t\t\tthis.lastRenderTime = timeStamp;\n\t\t\tthis.animationFrameID = requestAnimationFrame(this.gameLoop.bind(this));\n\t\t}\n\t}\n\n\tpublic addEnemyTank(tank: Tank): void {\n\t\tthis.enemyTanks.push(tank);\n\t}\n\n\tpublic addPlayerTank(tank: Tank): void {\n\t\tthis.playerTank = tank;\n\t}\n}\n","export class Obstacle {\n\tpublic xLeft: number;\n\tpublic xRight: number;\n\tpublic yTop: number;\n\tpublic yBottom: number;\n\tpublic width: number;\n\tpublic height: number;\n\n\tconstructor(startX: number, startY: number, width: number, height: number) {\n\t\tthis.xLeft = startX;\n\t\tthis.yTop = startY;\n\t\tthis.width = width;\n\t\tthis.height = height;\n\t\tthis.yBottom = this.yTop + this.height;\n\t\tthis.xRight = this.xLeft + this.width;\n\t}\n\n\tdraw(context: CanvasRenderingContext2D): void {\n\t\tcontext.beginPath();\n\t\tcontext.rect(this.xLeft, this.yTop, this.width, this.height);\n\t\tcontext.fillStyle = '#1d1c1a';\n\t\tcontext.fill();\n\t}\n}\n","import { Obstacle } from './Obstacle';\n\nexport class ObstacleCanvas {\n\tprivate obstacleCanvas: HTMLCanvasElement;\n\tpublic obstacles: Obstacle[] = [];\n\tpublic width: number;\n\tpublic height: number;\n\n\tconstructor(obstacleCanvasSelector: string, width: number, height: number, obstacles: Obstacle[]) {\n\t\tthis.width = width;\n\t\tthis.height = height;\n\t\tthis.obstacles = obstacles;\n\t\twindow.addEventListener('resize', this.resizeCanvas.bind(this));\n\t\tthis.obstacleCanvas = document.querySelector(obstacleCanvasSelector) as HTMLCanvasElement;\n\t\tthis.obstacleCanvas.width = width;\n\t\tthis.obstacleCanvas.height = height;\n\t\tobstacles.forEach((obstacle) => {\n\t\t\tobstacle.draw(this.obstacleCanvas.getContext('2d') as CanvasRenderingContext2D);\n\t\t});\n\t}\n\n\tpublic clearObstacles(): void {\n\t\tconst context = this.obstacleCanvas.getContext('2d');\n\t\tif (context) {\n\t\t\tcontext.clearRect(0, 0, this.obstacleCanvas.width, this.obstacleCanvas.height);\n\t\t}\n\t\tthis.obstacles = [];\n\t}\n\n\tprivate resizeCanvas(): void {}\n}\n","import { Ammunition } from '../Ammunition';\nimport { Bomb } from '../Bomb';\nimport { Tank } from '../tanks/Tank';\n\nexport abstract class Navigator {\n\tabstract aggressionFactor: number;\n\n\tabstract draw(context: CanvasRenderingContext2D): void;\n\n\tabstract updatePosition(\n\t\tcurrentTank: Tank,\n\t\tplayerTank: Tank,\n\t\tenemyTanks: Tank[],\n\t\tammunition: Ammunition[],\n\t\tbombs: Bomb[]\n\t): void;\n}\n","import { Ammunition } from '../Ammunition';\nimport { Bomb } from '../Bomb';\nimport { Node } from '../Node';\nimport { Direction, Tank } from '../tanks/Tank';\nimport { NavigationGrid } from './NavigationGrid';\nimport { Navigator } from './Navigator';\n\nexport class AStarNavigator extends Navigator {\n\tpublic aggressionFactor = 15;\n\tpublic pathRecaculationInterval = 60;\n\tprivate navigationGrid: NavigationGrid;\n\tprivate currentNode: Node | null = null;\n\tprivate path: Node[] | null = [];\n\n\tconstructor(navigationGrid: NavigationGrid) {\n\t\tsuper();\n\t\tthis.navigationGrid = navigationGrid;\n\t}\n\n\tpublic draw(context: CanvasRenderingContext2D): void {\n\t\tthis.navigationGrid.draw(context);\n\t}\n\n\tpublic updatePosition(\n\t\tcurrentTank: Tank,\n\t\tplayerTank: Tank,\n\t\tenemyTanks: Tank[],\n\t\tammunition: Ammunition[],\n\t\tbombs: Bomb[]\n\t): void {\n\t\tthis.pathRecaculationInterval -= 1;\n\t\tif (this.path == null || this.path.length == 0 || this.pathRecaculationInterval == 0) {\n\t\t\tthis.navigationGrid.reset();\n\t\t\tconst startNode: Node = this.navigationGrid.getNodeFromTank(currentTank);\n\t\t\tconst targetNode: Node = this.navigationGrid.getNodeFromTank(playerTank);\n\t\t\tconst destinationNode: Node = this.navigationGrid.getRandomNodeInRadiusOfTarget(\n\t\t\t\ttargetNode,\n\t\t\t\tthis.aggressionFactor\n\t\t\t);\n\t\t\tthis.path = this.navigationGrid.aStar(startNode, destinationNode);\n\t\t\tthis.pathRecaculationInterval = 60;\n\t\t\tif (this.path == null) {\n\t\t\t\tconsole.log(`Path is null`);\n\t\t\t}\n\t\t} else {\n\t\t\tthis.currentNode = this.navigationGrid.getNodeFromTank(currentTank);\n\t\t\tconst dx = this.path[0].x - this.currentNode.x;\n\t\t\tconst dy = this.path[0].y - this.currentNode.y;\n\n\t\t\tif (currentTank.wasLastMoveBlocked && currentTank.consecutiveDirectionMoves > 2) {\n\t\t\t\tconst randomDirection: Direction = currentTank.getRandomDirection();\n\t\t\t\tcurrentTank.moveInCardinalDirection(randomDirection);\n\t\t\t\tcurrentTank.consecutiveDirectionMoves = 0;\n\t\t\t\tconst randomNumber: number = Math.random();\n\t\t\t\tif (dx === 1 && dy === 0) {\n\t\t\t\t\tif (randomNumber < 0.5) {\n\t\t\t\t\t\tcurrentTank.moveSouthEast();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcurrentTank.moveNorthEast();\n\t\t\t\t\t}\n\t\t\t\t} else if (dx === -1 && dy === 0) {\n\t\t\t\t\tif (randomNumber < 0.5) {\n\t\t\t\t\t\tcurrentTank.moveNorthWest();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcurrentTank.moveSouthWest();\n\t\t\t\t\t}\n\t\t\t\t} else if (dx === 0 && dy === 1) {\n\t\t\t\t\tif (randomNumber < 0.5) {\n\t\t\t\t\t\tcurrentTank.moveSouthEast();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcurrentTank.moveSouthWest();\n\t\t\t\t\t}\n\t\t\t\t} else if (dx === 0 && dy === -1) {\n\t\t\t\t\tif (randomNumber < 0.5) {\n\t\t\t\t\t\tcurrentTank.moveNorthWest();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcurrentTank.moveNorthEast();\n\t\t\t\t\t}\n\t\t\t\t} else if (dx === 1 && dy === 1) {\n\t\t\t\t\tif (randomNumber < 0.5) {\n\t\t\t\t\t\tcurrentTank.moveSouth();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcurrentTank.moveEast();\n\t\t\t\t\t}\n\t\t\t\t} else if (dx === 1 && dy === -1) {\n\t\t\t\t\tif (randomNumber < 0.5) {\n\t\t\t\t\t\tcurrentTank.moveNorth();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcurrentTank.moveEast();\n\t\t\t\t\t}\n\t\t\t\t} else if (dx === -1 && dy === 1) {\n\t\t\t\t\tif (randomNumber < 0.5) {\n\t\t\t\t\t\tcurrentTank.moveSouth();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcurrentTank.moveWest();\n\t\t\t\t\t}\n\t\t\t\t} else if (dx === -1 && dy === -1) {\n\t\t\t\t\tif (randomNumber < 0.5) {\n\t\t\t\t\t\tcurrentTank.moveNorth();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcurrentTank.moveWest();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (dx === 1 && dy === 0) {\n\t\t\t\t\tcurrentTank.moveEast();\n\t\t\t\t} else if (dx === -1 && dy === 0) {\n\t\t\t\t\tcurrentTank.moveWest();\n\t\t\t\t} else if (dx === 0 && dy === 1) {\n\t\t\t\t\tcurrentTank.moveSouth();\n\t\t\t\t} else if (dx === 0 && dy === -1) {\n\t\t\t\t\tcurrentTank.moveNorth();\n\t\t\t\t} else if (dx === 1 && dy === 1) {\n\t\t\t\t\tcurrentTank.moveSouthEast();\n\t\t\t\t} else if (dx === 1 && dy === -1) {\n\t\t\t\t\tcurrentTank.moveNorthEast();\n\t\t\t\t} else if (dx === -1 && dy === 1) {\n\t\t\t\t\tcurrentTank.moveSouthWest();\n\t\t\t\t} else if (dx === -1 && dy === -1) {\n\t\t\t\t\tcurrentTank.moveNorthWest();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.path[0].x == this.currentNode.x && this.path[0].y == this.currentNode.y) {\n\t\t\t\tthis.path.splice(0, 1);\n\t\t\t}\n\t\t}\n\n\t\tcurrentTank.xLeft = currentTank.xPosition;\n\t\tcurrentTank.xRight = currentTank.xPosition + currentTank.size;\n\t\tcurrentTank.yTop = currentTank.yPosition;\n\t\tcurrentTank.yBottom = currentTank.yPosition + currentTank.size;\n\t}\n}\n","export class Node {\n\tpublic x: number;\n\tpublic y: number;\n\tpublic g = 0;\n\tpublic h = 0;\n\tpublic f = 0;\n\tpublic walkable = true;\n\tpublic parent: Node | null = null;\n\n\tconstructor(x: number, y: number) {\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t}\n}\n","import { GameCanvas } from '../GameCanvas';\nimport { Node } from '../Node';\nimport { ObstacleCanvas } from '../ObstacleCanvas';\nimport { Tank } from '../tanks/Tank';\n\nexport class NavigationGrid {\n\tpublic grid: Node[][] = [];\n\tpublic gridCellWidth = 30;\n\tpublic gridXLength: number;\n\tpublic gridYLength: number;\n\tpublic path: Node[] = [];\n\tpublic stationary: boolean;\n\tpublic color: string;\n\n\tconstructor(\n\t\tgameCanvas?: GameCanvas,\n\t\tobstacleCanvas?: ObstacleCanvas,\n\t\tstationary: boolean = true,\n\t\tcolor: string = 'gray'\n\t) {\n\t\tthis.color = color;\n\t\tif (!gameCanvas || !obstacleCanvas || stationary) {\n\t\t\tthis.gridXLength = 0;\n\t\t\tthis.gridYLength = 0;\n\t\t\tthis.stationary = true;\n\t\t\treturn;\n\t\t}\n\t\tthis.stationary = false;\n\t\tthis.gridXLength = Math.floor(gameCanvas.width / this.gridCellWidth);\n\t\tthis.gridYLength = Math.floor(gameCanvas.height / this.gridCellWidth);\n\t\tfor (let x = 0; x < this.gridXLength; x++) {\n\t\t\tthis.grid[x] = [];\n\t\t\tfor (let y = 0; y < this.gridYLength; y++) {\n\t\t\t\tthis.grid[x][y] = new Node(x, y);\n\t\t\t\tconst gridXLeft = x * this.gridCellWidth;\n\t\t\t\tconst gridXRight = gridXLeft + this.gridCellWidth;\n\t\t\t\tconst gridYTop = y * this.gridCellWidth;\n\t\t\t\tconst gridYBottom = gridYTop + this.gridCellWidth;\n\t\t\t\tthis.grid[x][y].walkable = !obstacleCanvas.obstacles.some(\n\t\t\t\t\t(obs) => gridXRight > obs.xLeft && gridXLeft < obs.xRight && gridYBottom > obs.yTop && gridYTop < obs.yBottom\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic draw(context: CanvasRenderingContext2D): void {\n\t\tcontext.lineWidth = 1;\n\t\tfor (let i = 0; i <= this.gridYLength; i++) {\n\t\t\tcontext.fillStyle = 'blue';\n\t\t\tcontext.beginPath();\n\t\t\tcontext.moveTo(0, i * this.gridCellWidth);\n\t\t\tcontext.lineTo(this.gridXLength * this.gridCellWidth, i * this.gridCellWidth);\n\t\t\tcontext.stroke();\n\t\t}\n\t\tfor (let j = 0; j <= this.gridXLength; j++) {\n\t\t\tcontext.fillStyle = 'blue';\n\t\t\tcontext.beginPath();\n\t\t\tcontext.moveTo(j * this.gridCellWidth, 0);\n\t\t\tcontext.lineTo(j * this.gridCellWidth, this.gridXLength * this.gridCellWidth);\n\t\t\tcontext.stroke();\n\t\t}\n\t\tcontext.fillStyle = this.color;\n\t\tthis.path?.forEach((value: Node, index: number, array: Node[]) => {\n\t\t\tcontext.beginPath();\n\t\t\tcontext.arc(\n\t\t\t\tvalue.x * this.gridCellWidth + this.gridCellWidth / 2,\n\t\t\t\tvalue.y * this.gridCellWidth + this.gridCellWidth / 2,\n\t\t\t\t5,\n\t\t\t\t0,\n\t\t\t\t2 * Math.PI\n\t\t\t);\n\t\t\tcontext.fill();\n\t\t});\n\t}\n\n\tpublic reset(): void {\n\t\tfor (let x = 0; x < this.gridXLength; x++) {\n\t\t\tfor (let y = 0; y < this.gridYLength; y++) {\n\t\t\t\tthis.grid[x][y].f = 0;\n\t\t\t\tthis.grid[x][y].g = 0;\n\t\t\t\tthis.grid[x][y].h = 0;\n\t\t\t\tthis.grid[x][y].parent = null;\n\t\t\t}\n\t\t}\n\t}\n\n\tgetNodeFromTank(tank: Tank): Node {\n\t\tlet xGridCoordinate: number = Math.floor((tank.xPosition + tank.size / 2) / this.gridCellWidth);\n\t\tlet yGridCoordinate: number = Math.floor((tank.yPosition + tank.size / 2) / this.gridCellWidth);\n\t\txGridCoordinate = Math.max(0, Math.min(xGridCoordinate, this.gridXLength - 1));\n\t\tyGridCoordinate = Math.max(0, Math.min(yGridCoordinate, this.gridYLength - 1));\n\t\treturn this.grid[xGridCoordinate][yGridCoordinate];\n\t}\n\n\tgetRandomNodeInRadiusOfTarget(target: Node, radius: number): Node {\n\t\tconst candidateNodes: Node[] = [];\n\t\tfor (let x = 0; x < this.gridXLength; x++) {\n\t\t\tfor (let y = 0; y < this.gridYLength; y++) {\n\t\t\t\tconst node = this.grid[x][y];\n\t\t\t\tconst distance = Math.sqrt(Math.pow(node.x - target.x, 2) + Math.pow(node.y - target.y, 2));\n\t\t\t\tif (distance <= radius + 1 && distance >= radius - 1 && node.walkable) {\n\t\t\t\t\tcandidateNodes.push(node);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tconst randomIndex = Math.floor(Math.random() * candidateNodes.length);\n\t\treturn candidateNodes[randomIndex];\n\t}\n\n\taStar(start: Node, target: Node): Node[] | null {\n\t\tconst openSet: Node[] = [start];\n\t\tconst closedSet = new Set<Node>();\n\n\t\twhile (openSet.length > 0) {\n\t\t\tlet current: Node | null = openSet.sort((a, b) => a.f - b.f)[0];\n\n\t\t\tif (current.x === target.x && current.y === target.y) {\n\t\t\t\tconst path = [];\n\t\t\t\twhile (current !== null) {\n\t\t\t\t\tpath.unshift(current);\n\t\t\t\t\tcurrent = current.parent;\n\t\t\t\t}\n\t\t\t\treturn path;\n\t\t\t}\n\n\t\t\topenSet.splice(openSet.indexOf(current), 1);\n\t\t\tclosedSet.add(current);\n\n\t\t\tconst neighbors = this.getWalkableNeighbors(current);\n\n\t\t\tfor (const neighbor of neighbors) {\n\t\t\t\tif (closedSet.has(neighbor)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst tentativeG = current.g + (neighbor.x - current.x === 0 || neighbor.y - current.y === 0 ? 1 : Math.SQRT2);\n\t\t\t\tif (!openSet.includes(neighbor)) {\n\t\t\t\t\topenSet.push(neighbor);\n\t\t\t\t} else if (tentativeG >= neighbor.g) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tneighbor.parent = current;\n\t\t\t\tneighbor.g = tentativeG;\n\t\t\t\tneighbor.h = Math.round(Math.sqrt(Math.pow(neighbor.x - target.x, 2) + Math.pow(neighbor.y - target.y, 2)));\n\t\t\t\tneighbor.f = neighbor.g + neighbor.h;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tgetWalkableNeighbors(node: Node): Node[] {\n\t\t// Get the 8 nodes surrounding the current only if its walkable\n\t\tconst neighbors: Node[] = [];\n\t\tfor (let dx = -1; dx <= 1; dx++) {\n\t\t\tfor (let dy = -1; dy <= 1; dy++) {\n\t\t\t\tif (dx === 0 && dy === 0) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tconst x = node.x + dx;\n\t\t\t\tconst y = node.y + dy;\n\t\t\t\tif (x >= 0 && y >= 0 && x < this.gridXLength && y < this.gridYLength && this.grid[x][y].walkable) {\n\t\t\t\t\tneighbors.push(this.grid[x][y]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn neighbors;\n\t}\n}\n","import { Ammunition } from '../Ammunition';\nimport { Bomb } from '../Bomb';\nimport { Node } from '../Node';\nimport { Tank } from '../tanks/Tank';\nimport { Navigator } from './Navigator';\nimport { SimplePathfinder } from './SimplePathFinder';\n\nexport class SimpleNavigator extends Navigator {\n\tpublic pathRecaculationInterval = 120;\n\tpublic aggressionFactor = 10;\n\tprivate simplePathFinder: SimplePathfinder;\n\tprivate currentNode: Node | null = null;\n\tprivate path: Node[] | null = [];\n\n\tconstructor(pathfinder: SimplePathfinder) {\n\t\tsuper();\n\t\tthis.simplePathFinder = pathfinder;\n\t}\n\n\tpublic draw(context: CanvasRenderingContext2D): void {\n\t\treturn;\n\t}\n\n\tupdatePosition(\n\t\tcurrentTank: Tank,\n\t\tplayerTank: Tank,\n\t\tenemyTanks: Tank[],\n\t\tammunition: Ammunition[],\n\t\tbombs: Bomb[]\n\t): void {\n\t\tthis.pathRecaculationInterval -= 1;\n\t\tif (this.path == null || this.path.length == 0 || this.pathRecaculationInterval == 0) {\n\t\t\tconst startNode: Node = this.simplePathFinder.getNodeFromTank(currentTank);\n\t\t\tconst targetNode: Node = this.simplePathFinder.getNodeFromTank(playerTank);\n\t\t\tconst destinationNode: Node = this.simplePathFinder.getRandomNodeInRadiusOfTarget(\n\t\t\t\ttargetNode,\n\t\t\t\tthis.aggressionFactor\n\t\t\t);\n\t\t\tthis.pathRecaculationInterval = 120;\n\t\t\tthis.path = this.simplePathFinder.findPath(startNode, destinationNode);\n\t\t} else {\n\t\t\tthis.currentNode = this.simplePathFinder.getNodeFromTank(currentTank);\n\t\t\tconst dx = this.path[0].x - this.currentNode.x;\n\t\t\tconst dy = this.path[0].y - this.currentNode.y;\n\n\t\t\tif (this.path && this.path.length > 1) {\n\t\t\t\tif (dx === 1 && dy === 0) {\n\t\t\t\t\tcurrentTank.moveEast();\n\t\t\t\t} else if (dx === -1 && dy === 0) {\n\t\t\t\t\tcurrentTank.moveWest();\n\t\t\t\t} else if (dx === 0 && dy === 1) {\n\t\t\t\t\tcurrentTank.moveSouth();\n\t\t\t\t} else if (dx === 0 && dy === -1) {\n\t\t\t\t\tcurrentTank.moveNorth();\n\t\t\t\t} else if (dx === 1 && dy === 1) {\n\t\t\t\t\tcurrentTank.moveSouthEast();\n\t\t\t\t} else if (dx === 1 && dy === -1) {\n\t\t\t\t\tcurrentTank.moveNorthEast();\n\t\t\t\t} else if (dx === -1 && dy === 1) {\n\t\t\t\t\tcurrentTank.moveSouthWest();\n\t\t\t\t} else if (dx === -1 && dy === -1) {\n\t\t\t\t\tcurrentTank.moveNorthWest();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.path[0].x == this.currentNode.x && this.path[0].y == this.currentNode.y) {\n\t\t\t\tthis.path.splice(0, 1);\n\t\t\t}\n\t\t}\n\n\t\tcurrentTank.xLeft = currentTank.xPosition;\n\t\tcurrentTank.xRight = currentTank.xPosition + currentTank.size;\n\t\tcurrentTank.yTop = currentTank.yPosition;\n\t\tcurrentTank.yBottom = currentTank.yPosition + currentTank.size;\n\t}\n}\n","import { GameCanvas } from '../GameCanvas';\nimport { Node } from '../Node';\nimport { ObstacleCanvas } from '../ObstacleCanvas';\nimport { Tank } from '../tanks/Tank';\n\nexport class SimplePathfinder {\n\tpublic grid: Node[][] = [];\n\tpublic gridCellWidth = 30;\n\tpublic gridXLength: number;\n\tpublic gridYLength: number;\n\tpublic path: Node[] = [];\n\tpublic stationary: boolean;\n\n\tconstructor(gameCanvas?: GameCanvas, obstacleCanvas?: ObstacleCanvas, stationary: boolean = true) {\n\t\tif (!gameCanvas || !obstacleCanvas || stationary) {\n\t\t\tthis.gridXLength = 0;\n\t\t\tthis.gridYLength = 0;\n\t\t\tthis.stationary = true;\n\t\t\treturn;\n\t\t}\n\t\tthis.stationary = false;\n\t\tthis.gridXLength = Math.floor(gameCanvas.width / this.gridCellWidth);\n\t\tthis.gridYLength = Math.floor(gameCanvas.height / this.gridCellWidth);\n\t\tfor (let x = 0; x < this.gridXLength; x++) {\n\t\t\tthis.grid[x] = [];\n\t\t\tfor (let y = 0; y < this.gridYLength; y++) {\n\t\t\t\tthis.grid[x][y] = new Node(x, y);\n\t\t\t\tconst gridXLeft = x * this.gridCellWidth;\n\t\t\t\tconst gridXRight = gridXLeft + this.gridCellWidth;\n\t\t\t\tconst gridYTop = y * this.gridCellWidth;\n\t\t\t\tconst gridYBottom = gridYTop + this.gridCellWidth;\n\t\t\t\tthis.grid[x][y].walkable = !obstacleCanvas.obstacles.some(\n\t\t\t\t\t(obs) => gridXRight > obs.xLeft && gridXLeft < obs.xRight && gridYBottom > obs.yTop && gridYTop < obs.yBottom\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\tmoveTowardsGoal(currentPos: Node, goalPos: Node): Node {\n\t\tif (currentPos === goalPos) {\n\t\t\treturn currentPos;\n\t\t}\n\n\t\tconst possibleMoves = [\n\t\t\tnew Node(currentPos.x + 1, currentPos.y), // Move right\n\t\t\tnew Node(currentPos.x - 1, currentPos.y), // Move left\n\t\t\tnew Node(currentPos.x, currentPos.y + 1), // Move down\n\t\t\tnew Node(currentPos.x, currentPos.y - 1), // Move up\n\t\t];\n\n\t\tlet bestMove = currentPos;\n\t\tlet minDistance = Number.MAX_SAFE_INTEGER;\n\t\tfor (const move of possibleMoves) {\n\t\t\tif (this.isWithinBounds(move) && this.isWalkable(move)) {\n\t\t\t\tconst distance = Math.abs(move.x - goalPos.x) + Math.abs(move.y - goalPos.y);\n\t\t\t\tif (distance < minDistance) {\n\t\t\t\t\tminDistance = distance;\n\t\t\t\t\tbestMove = move;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn bestMove;\n\t}\n\n\tisWithinBounds(position: Node): boolean {\n\t\treturn 0 <= position.x && position.x < this.gridXLength && 0 <= position.y && position.y < this.gridYLength;\n\t}\n\n\tisWalkable(position: Node): boolean {\n\t\treturn this.grid[position.x][position.y].walkable;\n\t}\n\n\tfindPath(start: Node, goal: Node): Node[] {\n\t\tlet currentPos = start;\n\t\tconst path: Node[] = [currentPos];\n\t\tlet count: number = 10;\n\t\twhile (count > 0) {\n\t\t\tcurrentPos = this.moveTowardsGoal(currentPos, goal);\n\t\t\tpath.push(currentPos);\n\t\t\tcount--;\n\t\t}\n\t\treturn path;\n\t}\n\n\tgetNodeFromTank(tank: Tank): Node {\n\t\tlet xGridCoordinate: number = Math.floor((tank.xPosition + tank.size / 2) / this.gridCellWidth);\n\t\tlet yGridCoordinate: number = Math.floor((tank.yPosition + tank.size / 2) / this.gridCellWidth);\n\t\txGridCoordinate = Math.max(0, Math.min(xGridCoordinate, this.gridXLength - 1));\n\t\tyGridCoordinate = Math.max(0, Math.min(yGridCoordinate, this.gridYLength - 1));\n\t\treturn this.grid[xGridCoordinate][yGridCoordinate];\n\t}\n\n\tgetRandomNodeInRadiusOfTarget(target: Node, radius: number): Node {\n\t\tconst candidateNodes: Node[] = [];\n\t\tfor (let x = 0; x < this.gridXLength; x++) {\n\t\t\tfor (let y = 0; y < this.gridYLength; y++) {\n\t\t\t\tconst node = this.grid[x][y];\n\t\t\t\tconst distance = Math.sqrt(Math.pow(node.x - target.x, 2) + Math.pow(node.y - target.y, 2));\n\t\t\t\tif (distance <= radius + 1 && distance >= radius - 1 && node.walkable) {\n\t\t\t\t\tcandidateNodes.push(node);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tconst randomIndex = Math.floor(Math.random() * candidateNodes.length);\n\t\treturn candidateNodes[randomIndex];\n\t}\n}\n","export class PastelColorPalette {\n\tpublic static readonly BABY_BLUE = '#ABDEE6';\n\tpublic static readonly LAVENDER_BLUSH = '#CBAACB';\n\tpublic static readonly PALE_YELLOW = '#FFFFB5';\n\tpublic static readonly PEACH_PUFF = '#FFCCB6';\n\tpublic static readonly BLUSH_PINK = '#F3B0C3';\n\tpublic static readonly LIGHT_AQUA = '#C6DBDA';\n\tpublic static readonly LIGHT_PINK = '#FEE1E8';\n\tpublic static readonly LIGHT_CORAL_PINK = '#FED7C3';\n\tpublic static readonly MINT_CREAM = '#F6EAC2';\n\tpublic static readonly PALE_LAVENDER = '#ECD5E3';\n\tpublic static readonly CORAL_ORANGE = '#FF968A';\n\tpublic static readonly SOFT_PEACH = '#FFAEA5';\n\tpublic static readonly LIGHT_SALMON_PINK = '#FFCFB5';\n\tpublic static readonly LIGHT_ROSE = '#FFD8BE';\n\tpublic static readonly SOFT_ORANGE = '#FFC8A2';\n\tpublic static readonly SOFT_TEAL = '#D4F0F0';\n\tpublic static readonly PALE_MINT = '#8FCACA';\n\tpublic static readonly LIGHT_SAGE = '#CCE2CB';\n\tpublic static readonly PALE_GREEN = '#B6CFB6';\n\tpublic static readonly MINT_GREEN = '#97C1A9';\n\tpublic static readonly SOFT_PEACH_PINK = '#FCB9AA';\n\tpublic static readonly PALE_PEACH = '#FFDBCC';\n\tpublic static readonly PALE_GRAY = '#ECE4E4';\n\tpublic static readonly PALE_AQUA = '#A2E1DB';\n\tpublic static readonly SOFT_CYAN = '#55CBCD';\n}\n","export class Reticule {\n\tprotected color: string;\n\tprotected dashPattern: [number, number]; // [dashLengthInPixels, spaceLengthInPixels]\n\tprotected renderReticule: boolean;\n\tprotected tankSize: number;\n\tprotected reticuleWidth = 5;\n\n\tconstructor(dashPattern: [number, number], color: string, renderReticule: boolean, tankSize: number) {\n\t\tthis.color = color;\n\t\tthis.dashPattern = dashPattern;\n\t\tthis.renderReticule = renderReticule;\n\t\tthis.tankSize = tankSize;\n\t}\n\n\tpublic draw(\n\t\tcontext: CanvasRenderingContext2D,\n\t\ttankXPos: number,\n\t\ttankYPos: number,\n\t\tmouseXPos: number,\n\t\tmouseYpos: number\n\t): void {\n\t\tif (this.renderReticule) {\n\t\t\tcontext.strokeStyle = this.color;\n\t\t\tcontext.setLineDash(this.dashPattern);\n\t\t\tcontext.beginPath();\n\t\t\tcontext.moveTo(tankXPos + this.tankSize / 2, tankYPos + this.tankSize / 2);\n\t\t\tcontext.lineTo(mouseXPos, mouseYpos);\n\t\t\tcontext.lineWidth = this.reticuleWidth;\n\t\t\tcontext.stroke();\n\t\t}\n\t}\n}\n\nexport class NoReticule extends Reticule {\n\tconstructor() {\n\t\tsuper([0, 0], 'blue', false, 0);\n\t}\n}\n\nexport class SimplePlayerReticule extends Reticule {\n\tconstructor(tankSize: number) {\n\t\tsuper([5, 5], 'blue', true, tankSize);\n\t}\n}\n\nexport class CustomColorReticule extends Reticule {\n\tconstructor(tankSize: number, color: string) {\n\t\tsuper([4, 1], color, true, tankSize);\n\t}\n}\n\nexport class AdjustingCustomColorReticule extends Reticule {\n\tprivate maxReticuleLength: number;\n\n\tconstructor(tankSize: number, color: string, maxReticuleLength: number) {\n\t\tsuper([1, 1], color, true, tankSize);\n\t\tthis.maxReticuleLength = maxReticuleLength;\n\t}\n\n\toverride draw(\n\t\tcontext: CanvasRenderingContext2D,\n\t\ttankXPosition: number,\n\t\ttankYPosition: number,\n\t\tmouseXPosition: number,\n\t\tmouseYPosition: number\n\t): void {\n\t\tconst xDist = mouseXPosition - tankXPosition;\n\t\tconst yDist = mouseYPosition - tankYPosition;\n\t\tconst distance = Math.sqrt(Math.pow(xDist, 2) + Math.pow(yDist, 2));\n\t\tconst distanceToMaxDistanceRatio = distance / this.maxReticuleLength;\n\t\tconst distanceToMaxDistanceRatioInverse = 1 - distanceToMaxDistanceRatio;\n\t\tconst dashLength = distanceToMaxDistanceRatio * 10 + 2;\n\t\tconst spaceLength = distanceToMaxDistanceRatioInverse * 10 + 5;\n\n\t\tif (this.renderReticule) {\n\t\t\tcontext.strokeStyle = this.color;\n\t\t\tcontext.setLineDash([dashLength, spaceLength]);\n\t\t\tcontext.beginPath();\n\t\t\tcontext.moveTo(tankXPosition + this.tankSize / 2, tankYPosition + this.tankSize / 2);\n\t\t\tcontext.lineTo(mouseXPosition, mouseYPosition);\n\t\t\tcontext.lineWidth = this.reticuleWidth;\n\t\t\tcontext.stroke();\n\n\t\t\tcontext.setLineDash([]);\n\t\t\tconst xLength = 8;\n\t\t\tcontext.beginPath();\n\t\t\tcontext.moveTo(mouseXPosition - xLength, mouseYPosition - xLength);\n\t\t\tcontext.lineTo(mouseXPosition + xLength, mouseYPosition + xLength);\n\t\t\tcontext.stroke();\n\n\t\t\tcontext.beginPath();\n\t\t\tcontext.moveTo(mouseXPosition - xLength, mouseYPosition + xLength);\n\t\t\tcontext.lineTo(mouseXPosition + xLength, mouseYPosition - xLength);\n\t\t\tcontext.stroke();\n\t\t}\n\t}\n}\n","import { Ammunition } from '../Ammunition';\nimport { AudioManager } from '../AudioManager';\nimport { Bomb } from '../Bomb';\nimport { Node } from '../Node';\nimport { ObstacleCanvas } from '../ObstacleCanvas';\nimport { Reticule } from '../Reticule';\nimport { Navigator } from '../navigation/Navigator';\nimport { Tank } from './Tank';\n\nexport class EnemyTank extends Tank {\n\tpublic navigator: Navigator;\n\tpublic aggressionFactor = 15; // Distance tank should maintain from its target\n\tpublic path: Node[] | null = [];\n\tpublic pathRecaculationInterval = 60;\n\tpublic drawNavigation = false;\n\n\tconstructor(\n\t\tcanvas: HTMLCanvasElement,\n\t\treticule: Reticule,\n\t\txPosition: number,\n\t\tyPosition: number,\n\t\tspeed: number,\n\t\tsize: number,\n\t\taggressionFactor: number,\n\t\tcolor: string,\n\t\tobstacleCanvas: ObstacleCanvas,\n\t\tammunition: Ammunition[],\n\t\tbombs: Bomb[],\n\t\taudioManager: AudioManager,\n\t\tnavigator: Navigator\n\t) {\n\t\tsuper(canvas, reticule, xPosition, yPosition, speed, size, color, obstacleCanvas, ammunition, bombs, audioManager);\n\t\tthis.aggressionFactor = aggressionFactor;\n\t\tthis.navigator = navigator;\n\t}\n\n\tpublic override draw(context: CanvasRenderingContext2D): void {\n\t\tif (this.drawNavigation) {\n\t\t\tthis.navigator.draw(context);\n\t\t}\n\t\tsuper.draw(context);\n\t}\n\n\tpublic override updatePosition(\n\t\tcurrentTank: Tank,\n\t\tplayerTank: Tank,\n\t\tenemyTanks: Tank[],\n\t\tammunition: Ammunition[],\n\t\tbombs: Bomb[]\n\t): void {\n\t\tthis.navigator.updatePosition(currentTank, playerTank, enemyTanks, ammunition, bombs);\n\t}\n}\n","import { PastelColorPalette } from '../../ui/PastelColorPalette';\nimport { Ammunition } from '../Ammunition';\nimport { AudioManager } from '../AudioManager';\nimport { Bomb } from '../Bomb';\nimport { ObstacleCanvas } from '../ObstacleCanvas';\nimport { NoReticule } from '../Reticule';\nimport { Navigator } from '../navigation/Navigator';\nimport { EnemyTank } from './EnemyTank';\nimport { Tank } from './Tank';\n\nexport class BomberTank extends EnemyTank {\n\tpublic minTimeBetweenShotsMS = 20000;\n\tpublic timeBetweenShotsIsElapsed = true;\n\tpublic minTimeBetweenBombPlantsMS = 1000;\n\tpublic timeBetweenPlantsIsElapsed = true;\n\n\tconstructor(\n\t\tcanvas: HTMLCanvasElement,\n\t\txPosition: number,\n\t\tyPosition: number,\n\t\tobstacleCanvas: ObstacleCanvas,\n\t\tammunition: Ammunition[],\n\t\tbombs: Bomb[],\n\t\tnavigator: Navigator,\n\t\taudioManager: AudioManager\n\t) {\n\t\tconst bomberTankSpeed = 2;\n\t\tconst bomberTankSize = 30;\n\t\tconst bomberTankAggressionFactor = 4;\n\t\tconst bomberTankColor = PastelColorPalette.PALE_YELLOW;\n\t\tsuper(\n\t\t\tcanvas,\n\t\t\tnew NoReticule(),\n\t\t\txPosition,\n\t\t\tyPosition,\n\t\t\tbomberTankSpeed,\n\t\t\tbomberTankSize,\n\t\t\tbomberTankAggressionFactor,\n\t\t\tbomberTankColor,\n\t\t\tobstacleCanvas,\n\t\t\tammunition,\n\t\t\tbombs,\n\t\t\taudioManager,\n\t\t\tnavigator\n\t\t);\n\t}\n\n\tpublic override plantBomb(playerTank: Tank): void {\n\t\tif (this.timeBetweenPlantsIsElapsed && !this.isDestroyed) {\n\t\t\tconst availableBombIndex = this.bombs.findIndex((bomb) => bomb.isDestroyed && !bomb.isExploding);\n\t\t\tif (availableBombIndex !== -1) {\n\t\t\t\tthis.bombs[availableBombIndex].xPosition = this.xPosition + this.size / 2;\n\t\t\t\tthis.bombs[availableBombIndex].yPosition = this.yPosition + this.size / 2;\n\t\t\t\tconst willHitPlayerTank: boolean = this.bombs[availableBombIndex].isPointInsideBlastRadius(\n\t\t\t\t\tplayerTank.xPosition + playerTank.tankMidpoint,\n\t\t\t\t\tplayerTank.yPosition + playerTank.tankMidpoint\n\t\t\t\t);\n\t\t\t\tif (willHitPlayerTank) {\n\t\t\t\t\tthis.bombs[availableBombIndex].isDestroyed = false;\n\t\t\t\t\tthis.bombs[availableBombIndex].setFuse();\n\t\t\t\t\tthis.timeBetweenPlantsIsElapsed = false;\n\t\t\t\t\tsetTimeout((): void => {\n\t\t\t\t\t\tthis.timeBetweenPlantsIsElapsed = true;\n\t\t\t\t\t}, this.minTimeBetweenBombPlantsMS);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn;\n\t}\n\n\tpublic override shoot(playerTank: Tank): void {\n\t\tif (this.timeBetweenShotsIsElapsed && !this.isDestroyed) {\n\t\t\tconst availableAmmunitionIndex = this.ammunition.findIndex((ammunition) => ammunition.isDestroyed);\n\t\t\tif (availableAmmunitionIndex !== -1) {\n\t\t\t\tthis.ammunition[availableAmmunitionIndex].reload(\n\t\t\t\t\tthis.gunBarrellEndX,\n\t\t\t\t\tthis.gunBarrellEndY,\n\t\t\t\t\tthis.aimAngle,\n\t\t\t\t\ttrue,\n\t\t\t\t\tthis.canvasWidth,\n\t\t\t\t\tthis.canvasHeight\n\t\t\t\t);\n\t\t\t\tconst willHitPlayerTank: boolean = this.ammunition[availableAmmunitionIndex].willHitPlayerTank(\n\t\t\t\t\tthis.obstacleCanvas,\n\t\t\t\t\tplayerTank\n\t\t\t\t);\n\t\t\t\tif (willHitPlayerTank) {\n\t\t\t\t\tthis.ammunition[availableAmmunitionIndex].isDestroyed = false;\n\t\t\t\t\tthis.timeBetweenShotsIsElapsed = false;\n\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\tthis.timeBetweenShotsIsElapsed = true;\n\t\t\t\t\t}, this.minTimeBetweenShotsMS);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn;\n\t}\n\n\tpublic override aim(mouseXPos: number, mouseYpos: number, playerTank: Tank): void {\n\t\tif (this.isDestroyed) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst dx: number = playerTank.xPosition + playerTank.size / 2 - this.xPosition - this.tankMidpoint;\n\t\tconst dy: number = playerTank.yPosition + playerTank.size / 2 - this.yPosition - this.tankMidpoint;\n\t\tlet theta = Math.atan2(dy, dx);\n\t\tif (theta < 0) {\n\t\t\ttheta += 2 * Math.PI;\n\t\t}\n\t\tthis.aimAngle = theta;\n\t}\n}\n","import { KeyStates } from '../../utils/KeyStates';\nimport { Ammunition, PlayerAmmunition } from '../Ammunition';\nimport { AudioFile, AudioManager } from '../AudioManager';\nimport { Bomb, PlayerBomb } from '../Bomb';\nimport { ObstacleCanvas } from '../ObstacleCanvas';\nimport { AdjustingCustomColorReticule, Reticule } from '../Reticule';\nimport { Tank } from './Tank';\n\nexport class PlayerTank extends Tank {\n\tpublic keyStates: KeyStates = {\n\t\tArrowUp: false,\n\t\tArrowDown: false,\n\t\tArrowLeft: false,\n\t\tArrowRight: false,\n\t\tw: false,\n\t\ta: false,\n\t\ts: false,\n\t\td: false,\n\t\tW: false,\n\t\tA: false,\n\t\tS: false,\n\t\tD: false,\n\t};\n\n\tconstructor(\n\t\tcanvas: HTMLCanvasElement,\n\t\treticule: Reticule,\n\t\txPosition: number,\n\t\tyPosition: number,\n\t\tspeed: number,\n\t\tsize: number,\n\t\tcolor: string,\n\t\tobstacleCanvas: ObstacleCanvas,\n\t\tammunition: Ammunition[],\n\t\tbombs: Bomb[],\n\t\taudioManager: AudioManager\n\t) {\n\t\tsuper(canvas, reticule, xPosition, yPosition, speed, size, color, obstacleCanvas, ammunition, bombs, audioManager);\n\n\t\tdocument.addEventListener('keydown', (event: KeyboardEvent) => {\n\t\t\tif (this.keyStates.hasOwnProperty(event.key)) {\n\t\t\t\tthis.keyStates[event.key] = true;\n\t\t\t}\n\t\t});\n\t\tdocument.addEventListener('keydown', (event: KeyboardEvent) => {\n\t\t\tif (event.code === 'Space') {\n\t\t\t\tthis.plantBomb(this);\n\t\t\t}\n\t\t});\n\t\tdocument.addEventListener('keyup', (event: KeyboardEvent) => {\n\t\t\tif (this.keyStates.hasOwnProperty(event.key)) {\n\t\t\t\tthis.keyStates[event.key] = false;\n\t\t\t}\n\t\t});\n\t\tdocument.addEventListener('mousemove', (event: MouseEvent) => {\n\t\t\tthis.aimXPos = event.clientX - this.xOffset;\n\t\t\tthis.aimYPos = event.clientY - this.yOffset;\n\t\t});\n\t\tdocument.addEventListener('click', (event: MouseEvent) => {\n\t\t\tif (canvas.contains(event.target as Node)) {\n\t\t\t\tthis.shoot(this);\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic override updatePosition(\n\t\tcurrentTank: Tank,\n\t\tplayerTank: Tank,\n\t\tenemyTanks: Tank[],\n\t\tammunition: Ammunition[],\n\t\tbombs: Bomb[]\n\t): void {\n\t\t// Move the tank\n\t\tif (this.up() && this.right()) {\n\t\t\tthis.moveNorthEast();\n\t\t} else if (this.up() && this.left()) {\n\t\t\tthis.moveNorthWest();\n\t\t} else if (this.down() && this.right()) {\n\t\t\tthis.moveSouthEast();\n\t\t} else if (this.down() && this.left()) {\n\t\t\tthis.moveSouthWest();\n\t\t} else if (this.up()) {\n\t\t\tthis.moveNorth();\n\t\t} else if (this.down()) {\n\t\t\tthis.moveSouth();\n\t\t} else if (this.left()) {\n\t\t\tthis.moveWest();\n\t\t} else if (this.right()) {\n\t\t\tthis.moveEast();\n\t\t}\n\n\t\tthis.xLeft = this.xPosition;\n\t\tthis.xRight = this.xPosition + this.size;\n\t\tthis.yTop = this.yPosition;\n\t\tthis.yBottom = this.yPosition + this.size;\n\t}\n\n\tpublic override plantBomb(playerTank: Tank): void {\n\t\tif (!this.isDestroyed) {\n\t\t\tconst availableBombIndex = this.bombs.findIndex((bomb) => bomb.isDestroyed);\n\t\t\tif (availableBombIndex !== -1) {\n\t\t\t\tthis.bombs[availableBombIndex].xPosition = this.xPosition + this.size / 2;\n\t\t\t\tthis.bombs[availableBombIndex].yPosition = this.yPosition + this.size / 2;\n\t\t\t\tthis.bombs[availableBombIndex].isDestroyed = false;\n\t\t\t\tthis.bombs[availableBombIndex].setFuse();\n\t\t\t}\n\t\t}\n\t\treturn;\n\t}\n\n\tpublic override aim(mouseXPos: number, mouseYpos: number, playerTank: Tank): void {\n\t\tif (this.isDestroyed) {\n\t\t\treturn;\n\t\t}\n\t\tconst dx: number = mouseXPos - this.xPosition - this.tankMidpoint;\n\t\tconst dy: number = mouseYpos - this.yPosition - this.tankMidpoint;\n\t\tlet theta = Math.atan2(dy, dx);\n\t\tif (theta < 0) {\n\t\t\ttheta += 2 * Math.PI;\n\t\t}\n\t\tthis.aimAngle = theta;\n\t}\n\n\tpublic override shoot(playerTank: Tank): void {\n\t\tif (!this.isDestroyed) {\n\t\t\tconst availableAmmunitionIndex = this.ammunition.findIndex((ammunition) => ammunition.isDestroyed);\n\t\t\tif (availableAmmunitionIndex !== -1) {\n\t\t\t\tthis.audioManager.play(AudioFile.TANK_FIRE);\n\t\t\t\tthis.ammunition[availableAmmunitionIndex] = new PlayerAmmunition(\n\t\t\t\t\tthis.gunBarrellEndX,\n\t\t\t\t\tthis.gunBarrellEndY,\n\t\t\t\t\tthis.aimAngle,\n\t\t\t\t\tthis.canvasWidth,\n\t\t\t\t\tthis.canvasHeight,\n\t\t\t\t\tfalse,\n\t\t\t\t\tthis.audioManager\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn;\n\t}\n\n\tpublic up(): boolean {\n\t\treturn this.keyStates.ArrowUp || this.keyStates.w || this.keyStates.W;\n\t}\n\n\tpublic down(): boolean {\n\t\treturn this.keyStates.ArrowDown || this.keyStates.s || this.keyStates.S;\n\t}\n\n\tpublic left(): boolean {\n\t\treturn this.keyStates.ArrowLeft || this.keyStates.a || this.keyStates.A;\n\t}\n\n\tpublic right(): boolean {\n\t\treturn this.keyStates.ArrowRight || this.keyStates.d || this.keyStates.D;\n\t}\n}\n\nexport class DefaultPlayerTank extends PlayerTank {\n\tconstructor(\n\t\tcanvas: HTMLCanvasElement,\n\t\txPos: number,\n\t\tyPos: number,\n\t\tobstacleCanvas: ObstacleCanvas,\n\t\taudioManager: AudioManager\n\t) {\n\t\tconst defaultPlayerTankSpeed = 2;\n\t\tconst defaultPlayerTankSize = 30;\n\t\tconst defaultPlayerTankColor = '#4f6d7a';\n\t\tconst ammunition: Ammunition[] = [\n\t\t\tnew PlayerAmmunition(0, 0, 0, 0, 0, true, audioManager),\n\t\t\tnew PlayerAmmunition(0, 0, 0, 0, 0, true, audioManager),\n\t\t\tnew PlayerAmmunition(0, 0, 0, 0, 0, true, audioManager),\n\t\t\tnew PlayerAmmunition(0, 0, 0, 0, 0, true, audioManager),\n\t\t\tnew PlayerAmmunition(0, 0, 0, 0, 0, true, audioManager),\n\t\t];\n\t\tconst bombs: Bomb[] = [new PlayerBomb(0, 0, true, audioManager), new PlayerBomb(0, 0, true, audioManager)];\n\t\tconst rect: DOMRect = canvas.getBoundingClientRect();\n\t\tconst viewportWidth: number = window.innerWidth;\n\t\tconst distanceFromLeft: number = rect.left;\n\t\tconst distanceFromRight: number = viewportWidth - rect.right;\n\t\tconst maxReticuleLength: number = canvas.width + Math.max(distanceFromLeft, distanceFromRight);\n\t\tsuper(\n\t\t\tcanvas,\n\t\t\tnew AdjustingCustomColorReticule(defaultPlayerTankSize, defaultPlayerTankColor, maxReticuleLength),\n\t\t\txPos,\n\t\t\tyPos,\n\t\t\tdefaultPlayerTankSpeed,\n\t\t\tdefaultPlayerTankSize,\n\t\t\tdefaultPlayerTankColor,\n\t\t\tobstacleCanvas,\n\t\t\tammunition,\n\t\t\tbombs,\n\t\t\taudioManager\n\t\t);\n\t}\n}\n","import { PastelColorPalette } from '../../ui/PastelColorPalette';\nimport { Ammunition } from '../Ammunition';\nimport { AudioManager } from '../AudioManager';\nimport { Bomb } from '../Bomb';\nimport { ObstacleCanvas } from '../ObstacleCanvas';\nimport { NoReticule } from '../Reticule';\nimport { Navigator } from '../navigation/Navigator';\nimport { EnemyTank } from './EnemyTank';\nimport { Tank } from './Tank';\n\nexport class SimpleMovingTank extends EnemyTank {\n\tconstructor(\n\t\tcanvas: HTMLCanvasElement,\n\t\txPosition: number,\n\t\tyPosition: number,\n\t\tobstacleCanvas: ObstacleCanvas,\n\t\tammunition: Ammunition[],\n\t\tbombs: Bomb[],\n\t\tnavigator: Navigator,\n\t\taudioManager: AudioManager\n\t) {\n\t\tconst simpleMovingTankSpeed = 1.2;\n\t\tconst simpleMovingTankSize = 30;\n\t\tconst simpleMovingTankAggressionFactor = 15;\n\t\tconst simpleMovingTankColor = PastelColorPalette.CORAL_ORANGE;\n\t\tsuper(\n\t\t\tcanvas,\n\t\t\tnew NoReticule(),\n\t\t\txPosition,\n\t\t\tyPosition,\n\t\t\tsimpleMovingTankSpeed,\n\t\t\tsimpleMovingTankSize,\n\t\t\tsimpleMovingTankAggressionFactor,\n\t\t\tsimpleMovingTankColor,\n\t\t\tobstacleCanvas,\n\t\t\tammunition,\n\t\t\tbombs,\n\t\t\taudioManager,\n\t\t\tnavigator\n\t\t);\n\t}\n\n\tpublic override shoot(playerTank: Tank): void {\n\t\tconst availableAmmunitionIndex = this.ammunition.findIndex((ammunition) => ammunition.isDestroyed);\n\t\tif (availableAmmunitionIndex !== -1) {\n\t\t\tthis.ammunition[availableAmmunitionIndex].reload(\n\t\t\t\tthis.gunBarrellEndX,\n\t\t\t\tthis.gunBarrellEndY,\n\t\t\t\tthis.aimAngle,\n\t\t\t\ttrue,\n\t\t\t\tthis.canvasWidth,\n\t\t\t\tthis.canvasHeight\n\t\t\t);\n\t\t\tconst willHitPlayerTank: boolean = this.ammunition[availableAmmunitionIndex].willHitPlayerTank(\n\t\t\t\tthis.obstacleCanvas,\n\t\t\t\tplayerTank\n\t\t\t);\n\t\t\tif (willHitPlayerTank) {\n\t\t\t\tthis.ammunition[availableAmmunitionIndex].isDestroyed = false;\n\t\t\t}\n\t\t}\n\t\treturn;\n\t}\n\n\tpublic override aim(mouseXPos: number, mouseYpos: number, playerTank: Tank): void {\n\t\tif (this.isDestroyed) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst dx: number = playerTank.xPosition + playerTank.size / 2 - this.xPosition - this.tankMidpoint;\n\t\tconst dy: number = playerTank.yPosition + playerTank.size / 2 - this.yPosition - this.tankMidpoint;\n\t\tlet theta = Math.atan2(dy, dx);\n\t\tif (theta < 0) {\n\t\t\ttheta += 2 * Math.PI;\n\t\t}\n\t\tthis.aimAngle = theta;\n\t}\n}\n","import { Ammunition } from '../Ammunition';\nimport { Bomb } from '../Bomb';\nimport { Tank } from '../tanks/Tank';\nimport { Navigator } from './Navigator';\n\nexport class StationaryNavigator extends Navigator {\n\tpublic aggressionFactor: number = 0;\n\n\tpublic draw(context: CanvasRenderingContext2D): void {\n\t\treturn;\n\t}\n\n\tupdatePosition(\n\t\tcurrentTank: Tank,\n\t\tplayerTank: Tank,\n\t\tenemyTanks: Tank[],\n\t\tammunition: Ammunition[],\n\t\tbombs: Bomb[]\n\t): void {\n\t\treturn;\n\t}\n}\n","import { PastelColorPalette } from '../../ui/PastelColorPalette';\nimport { Ammunition } from '../Ammunition';\nimport { AudioManager } from '../AudioManager';\nimport { Bomb } from '../Bomb';\nimport { ObstacleCanvas } from '../ObstacleCanvas';\nimport { NoReticule } from '../Reticule';\nimport { Navigator } from '../navigation/Navigator';\nimport { StationaryNavigator } from '../navigation/StationaryNavigator';\nimport { EnemyTank } from './EnemyTank';\nimport { Tank } from './Tank';\n\nexport class StationaryRandomAimTank extends EnemyTank {\n\tpublic aimAngleChangeAmount = 0;\n\n\tconstructor(\n\t\tcanvas: HTMLCanvasElement,\n\t\txPosition: number,\n\t\tyPosition: number,\n\t\tobstacleCanvas: ObstacleCanvas,\n\t\tammunition: Ammunition[],\n\t\taudioManager: AudioManager\n\t) {\n\t\tconst stationaryRandomAimTankSpeed = 0;\n\t\tconst stationaryRandomAimTankSize = 30;\n\t\tconst stationaryRandomAimTankAggressionFactor = 0;\n\t\tconst fastTankColor = PastelColorPalette.BABY_BLUE;\n\t\tconst bombs: Bomb[] = [];\n\t\tconst navigator: Navigator = new StationaryNavigator();\n\t\tsuper(\n\t\t\tcanvas,\n\t\t\tnew NoReticule(),\n\t\t\txPosition,\n\t\t\tyPosition,\n\t\t\tstationaryRandomAimTankSpeed,\n\t\t\tstationaryRandomAimTankSize,\n\t\t\tstationaryRandomAimTankAggressionFactor,\n\t\t\tfastTankColor,\n\t\t\tobstacleCanvas,\n\t\t\tammunition,\n\t\t\tbombs,\n\t\t\taudioManager,\n\t\t\tnavigator\n\t\t);\n\t}\n\n\tprivate getAngleChangeAmount(): number {\n\t\tconst max = 360;\n\t\tconst min = -360;\n\t\tconst randomAmount: number = Math.floor(Math.random() * (max - min + 1)) + min;\n\t\treturn randomAmount;\n\t}\n\n\tpublic override updatePosition(playerTank: Tank): void {\n\t\treturn;\n\t}\n\n\tpublic override shoot(playerTank: Tank): void {\n\t\tconst availableAmmunitionIndex = this.ammunition.findIndex((ammunition) => ammunition.isDestroyed);\n\t\tif (availableAmmunitionIndex !== -1) {\n\t\t\tthis.ammunition[availableAmmunitionIndex].reload(\n\t\t\t\tthis.gunBarrellEndX,\n\t\t\t\tthis.gunBarrellEndY,\n\t\t\t\tthis.aimAngle,\n\t\t\t\ttrue,\n\t\t\t\tthis.canvasWidth,\n\t\t\t\tthis.canvasHeight\n\t\t\t);\n\t\t\tconst willHitPlayerTank: boolean = this.ammunition[availableAmmunitionIndex].willHitPlayerTank(\n\t\t\t\tthis.obstacleCanvas,\n\t\t\t\tplayerTank\n\t\t\t);\n\t\t\tif (willHitPlayerTank) {\n\t\t\t\tthis.ammunition[availableAmmunitionIndex].isDestroyed = false;\n\t\t\t}\n\t\t}\n\t\treturn;\n\t}\n\n\tpublic override aim(mouseXPos: number, mouseYpos: number, playerTank: Tank): void {\n\t\tif (this.isDestroyed) {\n\t\t\treturn;\n\t\t}\n\t\tif (this.aimAngleChangeAmount > 0) {\n\t\t\tthis.aimAngle += 0.01;\n\t\t\tthis.aimAngleChangeAmount -= 1;\n\t\t} else if (this.aimAngleChangeAmount < 0) {\n\t\t\tthis.aimAngle -= 0.01;\n\t\t\tthis.aimAngleChangeAmount += 1;\n\t\t} else {\n\t\t\tthis.aimAngleChangeAmount = this.getAngleChangeAmount();\n\t\t}\n\t}\n}\n","import { PastelColorPalette } from '../../ui/PastelColorPalette';\nimport { Ammunition, BasicAIAmmunition } from '../Ammunition';\nimport { AudioManager } from '../AudioManager';\nimport { Bomb } from '../Bomb';\nimport { ObstacleCanvas } from '../ObstacleCanvas';\nimport { NoReticule } from '../Reticule';\nimport { Navigator } from '../navigation/Navigator';\nimport { StationaryNavigator } from '../navigation/StationaryNavigator';\nimport { EnemyTank } from './EnemyTank';\nimport { Tank } from './Tank';\n\nexport class StationaryTank extends EnemyTank {\n\tminTimeBetweenShotsMS = 5000;\n\ttimeBetweenShotsIsElapsed = false;\n\n\tconstructor(\n\t\tcanvas: HTMLCanvasElement,\n\t\txPosition: number,\n\t\tyPosition: number,\n\t\tobstacleCanvas: ObstacleCanvas,\n\t\taudioManager: AudioManager\n\t) {\n\t\tconst stationaryTankSpeed = 0;\n\t\tconst stationaryTankSize = 30;\n\t\tconst stationaryTankAggressionFactor = 0;\n\t\tconst stationaryTankColor = PastelColorPalette.PALE_GRAY;\n\t\tconst ammunition: Ammunition[] = [new BasicAIAmmunition(0, 0, 0, 0, 0, true, audioManager)];\n\t\tconst bombs: Bomb[] = [];\n\t\tconst navigator: Navigator = new StationaryNavigator();\n\t\tsuper(\n\t\t\tcanvas,\n\t\t\tnew NoReticule(),\n\t\t\txPosition,\n\t\t\tyPosition,\n\t\t\tstationaryTankSpeed,\n\t\t\tstationaryTankSize,\n\t\t\tstationaryTankAggressionFactor,\n\t\t\tstationaryTankColor,\n\t\t\tobstacleCanvas,\n\t\t\tammunition,\n\t\t\tbombs,\n\t\t\taudioManager,\n\t\t\tnavigator\n\t\t);\n\t\tsetTimeout(() => {\n\t\t\tthis.timeBetweenShotsIsElapsed = true;\n\t\t}, 1000);\n\t}\n\n\tpublic override updatePosition(playerTank: Tank): void {\n\t\treturn;\n\t}\n\n\tpublic override shoot(playerTank: Tank): void {\n\t\tif (!this.timeBetweenShotsIsElapsed || this.isDestroyed) {\n\t\t\treturn;\n\t\t}\n\t\tconst availableAmmunitionIndex = this.ammunition.findIndex((ammunition) => ammunition.isDestroyed);\n\t\tif (availableAmmunitionIndex !== -1) {\n\t\t\tthis.ammunition[availableAmmunitionIndex].reload(\n\t\t\t\tthis.gunBarrellEndX,\n\t\t\t\tthis.gunBarrellEndY,\n\t\t\t\tthis.aimAngle,\n\t\t\t\ttrue,\n\t\t\t\tthis.canvasWidth,\n\t\t\t\tthis.canvasHeight\n\t\t\t);\n\t\t\tconst willHitPlayerTank: boolean = this.ammunition[availableAmmunitionIndex].willHitPlayerTank(\n\t\t\t\tthis.obstacleCanvas,\n\t\t\t\tplayerTank\n\t\t\t);\n\t\t\tif (willHitPlayerTank) {\n\t\t\t\tthis.ammunition[availableAmmunitionIndex].isDestroyed = false;\n\t\t\t\tthis.timeBetweenShotsIsElapsed = false;\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tthis.timeBetweenShotsIsElapsed = true;\n\t\t\t\t}, this.minTimeBetweenShotsMS);\n\t\t\t}\n\t\t}\n\t\treturn;\n\t}\n\n\tpublic override aim(mouseXPos: number, mouseYpos: number, playerTank: Tank): void {\n\t\tif (this.isDestroyed) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst dx: number = playerTank.xPosition + playerTank.size / 2 - this.xPosition - this.tankMidpoint;\n\t\tconst dy: number = playerTank.yPosition + playerTank.size / 2 - this.yPosition - this.tankMidpoint;\n\t\tlet theta = Math.atan2(dy, dx);\n\t\tif (theta < 0) {\n\t\t\ttheta += 2 * Math.PI;\n\t\t}\n\t\tthis.aimAngle = theta;\n\t}\n}\n","import { PastelColorPalette } from '../../ui/PastelColorPalette';\nimport { Ammunition } from '../Ammunition';\nimport { AudioManager } from '../AudioManager';\nimport { Bomb } from '../Bomb';\nimport { Navigator } from '../navigation/Navigator';\nimport { ObstacleCanvas } from '../ObstacleCanvas';\nimport { NoReticule } from '../Reticule';\nimport { EnemyTank } from './EnemyTank';\nimport { Tank } from './Tank';\n\nexport class SuperBomberMovingTank extends EnemyTank {\n\tpublic minTimeBetweenShotsMS = 1000;\n\tpublic timeBetweenShotsIsElapsed = false;\n\tpublic minTimeBetweenBombPlantsMS = 1000;\n\tpublic timeBetweenPlantsIsElapsed = true;\n\n\tconstructor(\n\t\tcanvas: HTMLCanvasElement,\n\t\txPosition: number,\n\t\tyPosition: number,\n\t\tobstacleCanvas: ObstacleCanvas,\n\t\tammunition: Ammunition[],\n\t\tbombs: Bomb[],\n\t\tnavigator: Navigator,\n\t\taudioManager: AudioManager\n\t) {\n\t\tconst superBomberMovingTankSpeed = 2.2;\n\t\tconst superBomberMovingTankSize = 30;\n\t\tconst superBomberMovingTankAggressionFactor = 5;\n\t\tconst superBomberMovingTankColor = PastelColorPalette.BLUSH_PINK;\n\t\tsuper(\n\t\t\tcanvas,\n\t\t\tnew NoReticule(),\n\t\t\txPosition,\n\t\t\tyPosition,\n\t\t\tsuperBomberMovingTankSpeed,\n\t\t\tsuperBomberMovingTankSize,\n\t\t\tsuperBomberMovingTankAggressionFactor,\n\t\t\tsuperBomberMovingTankColor,\n\t\t\tobstacleCanvas,\n\t\t\tammunition,\n\t\t\tbombs,\n\t\t\taudioManager,\n\t\t\tnavigator\n\t\t);\n\t\tsetTimeout(() => {\n\t\t\tthis.timeBetweenShotsIsElapsed = true;\n\t\t}, 1000);\n\t}\n\n\tpublic override plantBomb(playerTank: Tank): void {\n\t\tif (this.timeBetweenPlantsIsElapsed && !this.isDestroyed) {\n\t\t\tconst availableBombIndex = this.bombs.findIndex((bomb) => bomb.isDestroyed);\n\t\t\tif (availableBombIndex !== -1) {\n\t\t\t\tthis.bombs[availableBombIndex].xPosition = this.xPosition + this.size / 2;\n\t\t\t\tthis.bombs[availableBombIndex].yPosition = this.yPosition + this.size / 2;\n\t\t\t\tconst willHitPlayerTank: boolean = this.bombs[availableBombIndex].isPointInsideBlastRadius(\n\t\t\t\t\tplayerTank.xPosition + playerTank.tankMidpoint,\n\t\t\t\t\tplayerTank.yPosition + playerTank.tankMidpoint\n\t\t\t\t);\n\t\t\t\tif (willHitPlayerTank) {\n\t\t\t\t\tthis.bombs[availableBombIndex].isDestroyed = false;\n\t\t\t\t\tthis.bombs[availableBombIndex].setFuse();\n\t\t\t\t\tthis.timeBetweenPlantsIsElapsed = false;\n\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\tthis.timeBetweenPlantsIsElapsed = true;\n\t\t\t\t\t}, this.minTimeBetweenBombPlantsMS);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn;\n\t}\n\n\tpublic override shoot(playerTank: Tank): void {\n\t\tif (this.timeBetweenShotsIsElapsed && !this.isDestroyed) {\n\t\t\tconst availableAmmunitionIndex = this.ammunition.findIndex((ammunition) => ammunition.isDestroyed);\n\t\t\tif (availableAmmunitionIndex !== -1) {\n\t\t\t\tthis.ammunition[availableAmmunitionIndex].reload(\n\t\t\t\t\tthis.gunBarrellEndX,\n\t\t\t\t\tthis.gunBarrellEndY,\n\t\t\t\t\tthis.aimAngle,\n\t\t\t\t\ttrue,\n\t\t\t\t\tthis.canvasWidth,\n\t\t\t\t\tthis.canvasHeight\n\t\t\t\t);\n\t\t\t\tconst willHitPlayerTank: boolean = this.ammunition[availableAmmunitionIndex].willHitPlayerTank(\n\t\t\t\t\tthis.obstacleCanvas,\n\t\t\t\t\tplayerTank\n\t\t\t\t);\n\t\t\t\tif (willHitPlayerTank) {\n\t\t\t\t\tthis.ammunition[availableAmmunitionIndex].isDestroyed = false;\n\t\t\t\t\tthis.timeBetweenShotsIsElapsed = false;\n\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\tthis.timeBetweenShotsIsElapsed = true;\n\t\t\t\t\t}, this.minTimeBetweenShotsMS);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn;\n\t}\n\n\tpublic override aim(mouseXPos: number, mouseYpos: number, playerTank: Tank): void {\n\t\tif (this.isDestroyed) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst dx: number = playerTank.xPosition + playerTank.size / 2 - this.xPosition - this.tankMidpoint;\n\t\tconst dy: number = playerTank.yPosition + playerTank.size / 2 - this.yPosition - this.tankMidpoint;\n\t\tlet theta = Math.atan2(dy, dx);\n\t\tif (theta < 0) {\n\t\t\ttheta += 2 * Math.PI;\n\t\t}\n\t\tthis.aimAngle = theta;\n\t}\n}\n","import { Ammunition, BasicAIAmmunition, SuperAIAmmunition } from './Ammunition';\nimport { AudioManager } from './AudioManager';\nimport { BasicBomb, Bomb, LoveBomb } from './Bomb';\nimport { GameCanvas } from './GameCanvas';\nimport { Obstacle } from './Obstacle';\nimport { ObstacleCanvas } from './ObstacleCanvas';\nimport { AStarNavigator } from './navigation/AStarNavigator';\nimport { NavigationGrid } from './navigation/NavigationGrid';\nimport { Navigator } from './navigation/Navigator';\nimport { SimpleNavigator } from './navigation/SimpleNavigator';\nimport { SimplePathfinder } from './navigation/SimplePathFinder';\nimport { BomberTank } from './tanks/BomberTank';\nimport { DefaultPlayerTank } from './tanks/PlayerTank';\nimport { SimpleMovingTank } from './tanks/SimpleMovingTank';\nimport { StationaryRandomAimTank } from './tanks/StationaryRandomAimTank';\nimport { StationaryTank } from './tanks/StationaryTank';\nimport { SuperBomberMovingTank } from './tanks/SuperBomberMovingTank';\n\nexport class Level {\n\tpublic gameCanvas: GameCanvas;\n\tpublic obstacleCanvas: ObstacleCanvas;\n\tpublic canvasWidth = 1000;\n\tpublic canvasHeight = 500;\n\tpublic audioManager: AudioManager;\n\n\tconstructor(obstacleCanvas: ObstacleCanvas, audioManager: AudioManager) {\n\t\tthis.obstacleCanvas = obstacleCanvas;\n\t\tthis.gameCanvas = new GameCanvas('#game-canvas', this.canvasWidth, this.canvasHeight, obstacleCanvas);\n\t\tthis.audioManager = audioManager;\n\t}\n\n\tpublic stop() {\n\t\tthis.gameCanvas.stop();\n\t}\n\n\tpublic start() {\n\t\tthis.gameCanvas.start();\n\t}\n}\n\nexport class Level1 extends Level {\n\tconstructor(audioManager: AudioManager) {\n\t\tconst obs: Obstacle = new Obstacle(300, 200, 40, 100);\n\t\tconst obstacleCanvas = new ObstacleCanvas('#obstacle-canvas', 1000, 500, [obs]);\n\t\tsuper(obstacleCanvas, audioManager);\n\t\tconst stationaryTank = new StationaryTank(\n\t\t\tthis.gameCanvas.gameRenderer.canvas,\n\t\t\t900,\n\t\t\t240,\n\t\t\tobstacleCanvas,\n\t\t\taudioManager\n\t\t);\n\t\tthis.gameCanvas.addEnemyTank(stationaryTank);\n\n\t\tconst playerTank = new DefaultPlayerTank(\n\t\t\tthis.gameCanvas.gameRenderer.canvas,\n\t\t\t100,\n\t\t\t250,\n\t\t\tobstacleCanvas,\n\t\t\taudioManager\n\t\t);\n\t\tthis.gameCanvas.addPlayerTank(playerTank);\n\t}\n}\n\nexport class Level2 extends Level {\n\tconstructor(audioManager: AudioManager) {\n\t\tconst obs: Obstacle = new Obstacle(300, 200, 40, 100);\n\t\tconst obstacleCanvas = new ObstacleCanvas('#obstacle-canvas', 1000, 500, [obs]);\n\t\tsuper(obstacleCanvas, audioManager);\n\n\t\tconst stationaryTank1 = new StationaryTank(\n\t\t\tthis.gameCanvas.gameRenderer.canvas,\n\t\t\t800,\n\t\t\t100,\n\t\t\tobstacleCanvas,\n\t\t\taudioManager\n\t\t);\n\t\tconst stationaryTank2 = new StationaryTank(\n\t\t\tthis.gameCanvas.gameRenderer.canvas,\n\t\t\t900,\n\t\t\t240,\n\t\t\tobstacleCanvas,\n\t\t\taudioManager\n\t\t);\n\t\tconst stationaryTank3 = new StationaryTank(\n\t\t\tthis.gameCanvas.gameRenderer.canvas,\n\t\t\t800,\n\t\t\t400,\n\t\t\tobstacleCanvas,\n\t\t\taudioManager\n\t\t);\n\t\tthis.gameCanvas.addEnemyTank(stationaryTank1);\n\t\tthis.gameCanvas.addEnemyTank(stationaryTank2);\n\t\tthis.gameCanvas.addEnemyTank(stationaryTank3);\n\n\t\tconst playerTank = new DefaultPlayerTank(\n\t\t\tthis.gameCanvas.gameRenderer.canvas,\n\t\t\t100,\n\t\t\t250,\n\t\t\tobstacleCanvas,\n\t\t\taudioManager\n\t\t);\n\t\tthis.gameCanvas.addPlayerTank(playerTank);\n\t}\n}\n\nexport class Level3 extends Level {\n\tconstructor(audioManager: AudioManager) {\n\t\tconst obs: Obstacle = new Obstacle(700, 150, 30, 250);\n\t\tconst obstacleCanvas = new ObstacleCanvas('#obstacle-canvas', 1000, 500, [obs]);\n\t\tsuper(obstacleCanvas, audioManager);\n\t\tconst superAmmo: Ammunition[] = [new SuperAIAmmunition(0, 0, 0, 0, 0, true, audioManager)];\n\t\tconst aiTank = new StationaryRandomAimTank(\n\t\t\tthis.gameCanvas.gameRenderer.canvas,\n\t\t\t900,\n\t\t\t250,\n\t\t\tobstacleCanvas,\n\t\t\tsuperAmmo,\n\t\t\taudioManager\n\t\t);\n\t\tthis.gameCanvas.addEnemyTank(aiTank);\n\n\t\tconst playerTank = new DefaultPlayerTank(\n\t\t\tthis.gameCanvas.gameRenderer.canvas,\n\t\t\t200,\n\t\t\t250,\n\t\t\tobstacleCanvas,\n\t\t\taudioManager\n\t\t);\n\t\tthis.gameCanvas.addPlayerTank(playerTank);\n\t}\n}\n\nexport class Level4 extends Level {\n\tconstructor(audioManager: AudioManager) {\n\t\tconst obs: Obstacle = new Obstacle(300, 130, 500, 35);\n\t\tconst obs2: Obstacle = new Obstacle(200, 330, 500, 35);\n\t\tconst obstacleCanvas = new ObstacleCanvas('#obstacle-canvas', 1000, 500, [obs, obs2]);\n\t\tsuper(obstacleCanvas, audioManager);\n\t\tconst basicAmmo: Ammunition[] = [new BasicAIAmmunition(0, 0, 0, 0, 0, true, audioManager)];\n\t\tconst basicBomb: Bomb[] = [];\n\t\tconst simplePathFinder: SimplePathfinder = new SimplePathfinder(this.gameCanvas, this.obstacleCanvas, false);\n\t\tconst navigator: Navigator = new SimpleNavigator(simplePathFinder);\n\t\tconst aiTank = new SimpleMovingTank(\n\t\t\tthis.gameCanvas.gameRenderer.canvas,\n\t\t\t900,\n\t\t\t50,\n\t\t\tobstacleCanvas,\n\t\t\tbasicAmmo,\n\t\t\tbasicBomb,\n\t\t\tnavigator,\n\t\t\taudioManager\n\t\t);\n\t\tthis.gameCanvas.addEnemyTank(aiTank);\n\n\t\tconst playerTank = new DefaultPlayerTank(\n\t\t\tthis.gameCanvas.gameRenderer.canvas,\n\t\t\t50,\n\t\t\t450,\n\t\t\tobstacleCanvas,\n\t\t\taudioManager\n\t\t);\n\t\tthis.gameCanvas.addPlayerTank(playerTank);\n\t}\n}\n\nexport class Level5 extends Level {\n\tconstructor(audioManager: AudioManager) {\n\t\tconst obs: Obstacle = new Obstacle(100, 100, 200, 100);\n\t\tconst obs2: Obstacle = new Obstacle(700, 100, 30, 100);\n\t\tconst obs3: Obstacle = new Obstacle(700, 350, 30, 100);\n\t\tconst obstacleCanvas = new ObstacleCanvas('#obstacle-canvas', 1000, 500, [obs, obs2, obs3]);\n\t\tsuper(obstacleCanvas, audioManager);\n\t\tconst basicAmmo: Ammunition[] = [new BasicAIAmmunition(0, 0, 0, 0, 0, true, audioManager)];\n\t\tconst superAmmo: Ammunition[] = [new SuperAIAmmunition(0, 0, 0, 0, 0, true, audioManager)];\n\t\tconst basicBomb: Bomb[] = [];\n\t\tconst navigationGrid: NavigationGrid = new NavigationGrid(this.gameCanvas, this.obstacleCanvas, false);\n\t\tconst navigator: Navigator = new AStarNavigator(navigationGrid);\n\t\tconst aiTank3 = new SimpleMovingTank(\n\t\t\tthis.gameCanvas.gameRenderer.canvas,\n\t\t\t800,\n\t\t\t300,\n\t\t\tobstacleCanvas,\n\t\t\tbasicAmmo,\n\t\t\tbasicBomb,\n\t\t\tnavigator,\n\t\t\taudioManager\n\t\t);\n\t\tconst aiTank = new StationaryRandomAimTank(\n\t\t\tthis.gameCanvas.gameRenderer.canvas,\n\t\t\t800,\n\t\t\t100,\n\t\t\tobstacleCanvas,\n\t\t\tsuperAmmo,\n\t\t\taudioManager\n\t\t);\n\t\tconst aiTank2 = new StationaryTank(this.gameCanvas.gameRenderer.canvas, 800, 200, obstacleCanvas, audioManager);\n\t\tthis.gameCanvas.addEnemyTank(aiTank3);\n\t\tthis.gameCanvas.addEnemyTank(aiTank);\n\t\tthis.gameCanvas.addEnemyTank(aiTank2);\n\n\t\tconst playerTank = new DefaultPlayerTank(\n\t\t\tthis.gameCanvas.gameRenderer.canvas,\n\t\t\t200,\n\t\t\t250,\n\t\t\tobstacleCanvas,\n\t\t\taudioManager\n\t\t);\n\t\tthis.gameCanvas.addPlayerTank(playerTank);\n\t}\n}\n\nexport class Level6 extends Level {\n\tconstructor(audioManager: AudioManager) {\n\t\tconst obs: Obstacle = new Obstacle(100, 100, 200, 100);\n\t\tconst obs2: Obstacle = new Obstacle(700, 100, 30, 300);\n\t\tconst obstacleCanvas = new ObstacleCanvas('#obstacle-canvas', 1000, 500, [obs, obs2]);\n\t\tsuper(obstacleCanvas, audioManager);\n\n\t\tconst basicBombs: Bomb[] = [\n\t\t\tnew BasicBomb(0, 0, true, audioManager),\n\t\t\tnew BasicBomb(0, 0, true, audioManager),\n\t\t\tnew BasicBomb(0, 0, true, audioManager),\n\t\t];\n\t\tconst basicBombs2: Bomb[] = [\n\t\t\tnew BasicBomb(0, 0, true, audioManager),\n\t\t\tnew BasicBomb(0, 0, true, audioManager),\n\t\t\tnew BasicBomb(0, 0, true, audioManager),\n\t\t];\n\t\tconst basicBombs3: Bomb[] = [\n\t\t\tnew BasicBomb(0, 0, true, audioManager),\n\t\t\tnew BasicBomb(0, 0, true, audioManager),\n\t\t\tnew BasicBomb(0, 0, true, audioManager),\n\t\t];\n\n\t\tconst navigationGrid: NavigationGrid = new NavigationGrid(this.gameCanvas, this.obstacleCanvas, false);\n\t\tconst navigationGrid2: NavigationGrid = new NavigationGrid(this.gameCanvas, this.obstacleCanvas, false);\n\t\tconst navigationGrid3: NavigationGrid = new NavigationGrid(this.gameCanvas, this.obstacleCanvas, false);\n\t\tconst navigator1: Navigator = new AStarNavigator(navigationGrid);\n\t\tconst navigator2: Navigator = new AStarNavigator(navigationGrid2);\n\t\tconst navigator3: Navigator = new AStarNavigator(navigationGrid3);\n\t\tconst aiTank = new BomberTank(\n\t\t\tthis.gameCanvas.gameRenderer.canvas,\n\t\t\t800,\n\t\t\t100,\n\t\t\tobstacleCanvas,\n\t\t\t[new BasicAIAmmunition(0, 0, 0, 0, 0, true, audioManager)],\n\t\t\tbasicBombs,\n\t\t\tnavigator1,\n\t\t\taudioManager\n\t\t);\n\t\tconst aiTank2 = new BomberTank(\n\t\t\tthis.gameCanvas.gameRenderer.canvas,\n\t\t\t800,\n\t\t\t200,\n\t\t\tobstacleCanvas,\n\t\t\t[new BasicAIAmmunition(0, 0, 0, 0, 0, true, audioManager)],\n\t\t\tbasicBombs2,\n\t\t\tnavigator2,\n\t\t\taudioManager\n\t\t);\n\t\tconst aiTank3 = new BomberTank(\n\t\t\tthis.gameCanvas.gameRenderer.canvas,\n\t\t\t800,\n\t\t\t300,\n\t\t\tobstacleCanvas,\n\t\t\t[new BasicAIAmmunition(0, 0, 0, 0, 0, true, audioManager)],\n\t\t\tbasicBombs3,\n\t\t\tnavigator3,\n\t\t\taudioManager\n\t\t);\n\n\t\tthis.gameCanvas.addEnemyTank(aiTank);\n\t\tthis.gameCanvas.addEnemyTank(aiTank2);\n\t\tthis.gameCanvas.addEnemyTank(aiTank3);\n\n\t\tconst playerTank = new DefaultPlayerTank(\n\t\t\tthis.gameCanvas.gameRenderer.canvas,\n\t\t\t200,\n\t\t\t250,\n\t\t\tobstacleCanvas,\n\t\t\taudioManager\n\t\t);\n\t\tthis.gameCanvas.addPlayerTank(playerTank);\n\t}\n}\n\nexport class Level7 extends Level {\n\tconstructor(audioManager: AudioManager) {\n\t\tconst obs1: Obstacle = new Obstacle(0, 120, 400, 50);\n\t\tconst obs2: Obstacle = new Obstacle(600, 120, 400, 50);\n\n\t\tconst obs3: Obstacle = new Obstacle(0, 330, 400, 50);\n\t\tconst obs4: Obstacle = new Obstacle(600, 330, 400, 50);\n\t\tconst obstacleCanvas = new ObstacleCanvas('#obstacle-canvas', 1000, 500, [obs1, obs2, obs3, obs4]);\n\t\tsuper(obstacleCanvas, audioManager);\n\n\t\tconst superAmmo1: Ammunition[] = [new SuperAIAmmunition(0, 0, 0, 0, 0, true, audioManager)];\n\t\tconst aiTank1 = new StationaryRandomAimTank(\n\t\t\tthis.gameCanvas.gameRenderer.canvas,\n\t\t\t900,\n\t\t\t50,\n\t\t\tobstacleCanvas,\n\t\t\tsuperAmmo1,\n\t\t\taudioManager\n\t\t);\n\n\t\tconst superAmmo2: Ammunition[] = [new SuperAIAmmunition(0, 0, 0, 0, 0, true, audioManager)];\n\t\tconst aiTank2 = new StationaryRandomAimTank(\n\t\t\tthis.gameCanvas.gameRenderer.canvas,\n\t\t\t900,\n\t\t\t250,\n\t\t\tobstacleCanvas,\n\t\t\tsuperAmmo2,\n\t\t\taudioManager\n\t\t);\n\n\t\tconst superAmmo3: Ammunition[] = [new SuperAIAmmunition(0, 0, 0, 0, 0, true, audioManager)];\n\t\tconst aiTank3 = new StationaryRandomAimTank(\n\t\t\tthis.gameCanvas.gameRenderer.canvas,\n\t\t\t900,\n\t\t\t430,\n\t\t\tobstacleCanvas,\n\t\t\tsuperAmmo3,\n\t\t\taudioManager\n\t\t);\n\n\t\tconst superAmmo4: Ammunition[] = [new SuperAIAmmunition(0, 0, 0, 0, 0, true, audioManager)];\n\t\tconst aiTank4 = new StationaryRandomAimTank(\n\t\t\tthis.gameCanvas.gameRenderer.canvas,\n\t\t\t100,\n\t\t\t50,\n\t\t\tobstacleCanvas,\n\t\t\tsuperAmmo4,\n\t\t\taudioManager\n\t\t);\n\n\t\tconst superAmmo5: Ammunition[] = [new SuperAIAmmunition(0, 0, 0, 0, 0, true, audioManager)];\n\t\tconst aiTank5 = new StationaryRandomAimTank(\n\t\t\tthis.gameCanvas.gameRenderer.canvas,\n\t\t\t100,\n\t\t\t250,\n\t\t\tobstacleCanvas,\n\t\t\tsuperAmmo5,\n\t\t\taudioManager\n\t\t);\n\n\t\tthis.gameCanvas.addEnemyTank(aiTank1);\n\t\tthis.gameCanvas.addEnemyTank(aiTank2);\n\t\tthis.gameCanvas.addEnemyTank(aiTank3);\n\t\tthis.gameCanvas.addEnemyTank(aiTank4);\n\t\tthis.gameCanvas.addEnemyTank(aiTank5);\n\n\t\tconst playerTank = new DefaultPlayerTank(\n\t\t\tthis.gameCanvas.gameRenderer.canvas,\n\t\t\t100,\n\t\t\t430,\n\t\t\tobstacleCanvas,\n\t\t\taudioManager\n\t\t);\n\t\tthis.gameCanvas.addPlayerTank(playerTank);\n\t}\n}\n\nexport class Level8 extends Level {\n\tconstructor(audioManager: AudioManager) {\n\t\tconst obs: Obstacle = new Obstacle(700, 100, 30, 300);\n\t\tconst obstacleCanvas = new ObstacleCanvas('#obstacle-canvas', 1000, 500, [obs]);\n\t\tsuper(obstacleCanvas, audioManager);\n\t\tconst basicAmmo: Ammunition[] = [\n\t\t\tnew SuperAIAmmunition(0, 0, 0, 0, 0, true, audioManager),\n\t\t\tnew SuperAIAmmunition(0, 0, 0, 0, 0, true, audioManager),\n\t\t\tnew SuperAIAmmunition(0, 0, 0, 0, 0, true, audioManager),\n\t\t];\n\t\tconst basicAmmo2: Ammunition[] = [\n\t\t\tnew SuperAIAmmunition(0, 0, 0, 0, 0, true, audioManager),\n\t\t\tnew SuperAIAmmunition(0, 0, 0, 0, 0, true, audioManager),\n\t\t\tnew SuperAIAmmunition(0, 0, 0, 0, 0, true, audioManager),\n\t\t];\n\t\tconst basicAmmo3: Ammunition[] = [\n\t\t\tnew SuperAIAmmunition(0, 0, 0, 0, 0, true, audioManager),\n\t\t\tnew SuperAIAmmunition(0, 0, 0, 0, 0, true, audioManager),\n\t\t\tnew SuperAIAmmunition(0, 0, 0, 0, 0, true, audioManager),\n\t\t];\n\n\t\tconst basicBombs: Bomb[] = [new LoveBomb(0, 0, true, audioManager), new LoveBomb(0, 0, true, audioManager)];\n\t\tconst basicBombs2: Bomb[] = [new LoveBomb(0, 0, true, audioManager), new LoveBomb(0, 0, true, audioManager)];\n\t\tconst basicBombs3: Bomb[] = [new LoveBomb(0, 0, true, audioManager), new LoveBomb(0, 0, true, audioManager)];\n\n\t\tconst navigationGrid: NavigationGrid = new NavigationGrid(this.gameCanvas, this.obstacleCanvas, false);\n\t\tconst navigationGrid2: NavigationGrid = new NavigationGrid(this.gameCanvas, this.obstacleCanvas, false);\n\t\tconst navigationGrid3: NavigationGrid = new NavigationGrid(this.gameCanvas, this.obstacleCanvas, false);\n\t\tconst navigator1: Navigator = new AStarNavigator(navigationGrid);\n\t\tnavigator1.aggressionFactor = 5;\n\t\tconst navigator2: Navigator = new AStarNavigator(navigationGrid2);\n\t\tnavigator2.aggressionFactor = 10;\n\t\tconst navigator3: Navigator = new AStarNavigator(navigationGrid3);\n\t\tnavigator3.aggressionFactor = 15;\n\t\tconst aiTank = new SuperBomberMovingTank(\n\t\t\tthis.gameCanvas.gameRenderer.canvas,\n\t\t\t800,\n\t\t\t100,\n\t\t\tobstacleCanvas,\n\t\t\tbasicAmmo,\n\t\t\tbasicBombs,\n\t\t\tnavigator1,\n\t\t\taudioManager\n\t\t);\n\t\tconst aiTank2 = new SuperBomberMovingTank(\n\t\t\tthis.gameCanvas.gameRenderer.canvas,\n\t\t\t800,\n\t\t\t200,\n\t\t\tobstacleCanvas,\n\t\t\tbasicAmmo2,\n\t\t\tbasicBombs2,\n\t\t\tnavigator2,\n\t\t\taudioManager\n\t\t);\n\t\tconst aiTank3 = new SuperBomberMovingTank(\n\t\t\tthis.gameCanvas.gameRenderer.canvas,\n\t\t\t800,\n\t\t\t300,\n\t\t\tobstacleCanvas,\n\t\t\tbasicAmmo3,\n\t\t\tbasicBombs3,\n\t\t\tnavigator3,\n\t\t\taudioManager\n\t\t);\n\n\t\tthis.gameCanvas.addEnemyTank(aiTank);\n\t\tthis.gameCanvas.addEnemyTank(aiTank2);\n\t\tthis.gameCanvas.addEnemyTank(aiTank3);\n\n\t\tconst playerTank = new DefaultPlayerTank(\n\t\t\tthis.gameCanvas.gameRenderer.canvas,\n\t\t\t200,\n\t\t\t250,\n\t\t\tobstacleCanvas,\n\t\t\taudioManager\n\t\t);\n\t\tthis.gameCanvas.addPlayerTank(playerTank);\n\t}\n}\n","import '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport '../node_modules/bootstrap/dist/js/bootstrap.min.js';\nimport './css/style.css';\n\nimport { LevelSelector } from './ui/LevelSelector';\n\nconst levelSelector: LevelSelector = new LevelSelector(8);\n","import * as d3 from 'd3';\nimport packageJson from '../../package.json';\nimport { AudioManager } from '../game/AudioManager';\nimport { Level, Level1, Level2, Level3, Level4, Level5, Level6, Level7, Level8 } from '../game/Level';\n\nexport class LevelSelector {\n\tprivate numLevels: number;\n\tprivate activeLevelNumber: number;\n\tprivate activeLevel: Level;\n\tprivate sliderWidth: number = Math.min(window.innerWidth * 0.8, 600); // Responsive width\n\tprivate audioManager: AudioManager;\n\n\tconstructor(levels: number) {\n\t\tthis.numLevels = levels;\n\t\tthis.audioManager = new AudioManager();\n\t\tconst audioPromise: Promise<void[]> = this.audioManager.loadAllAudio();\n\t\taudioPromise.then((): void => {\n\t\t\tthis.audioManager.playBackgroundMusic();\n\t\t});\n\t\tthis.activeLevelNumber = 1;\n\t\tthis.activeLevel = new Level1(this.audioManager);\n\t\tthis.setHeader();\n\t\tthis.createSlider();\n\t\tthis.createJumbotron();\n\t}\n\n\tpublic setHeader() {\n\t\tconst header: HTMLElement | null = document.getElementById('main-header');\n\t\tif (header) {\n\t\t\theader.textContent = `Treads V${packageJson.version}`;\n\t\t}\n\t}\n\n\tpublic startActiveLevel() {\n\t\tthis.activeLevel.stop();\n\t\tswitch (this.activeLevelNumber) {\n\t\t\tcase 1:\n\t\t\t\tthis.activeLevel = new Level1(this.audioManager);\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tthis.activeLevel = new Level2(this.audioManager);\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\tthis.activeLevel = new Level3(this.audioManager);\n\t\t\t\tbreak;\n\t\t\tcase 4:\n\t\t\t\tthis.activeLevel = new Level4(this.audioManager);\n\t\t\t\tbreak;\n\t\t\tcase 5:\n\t\t\t\tthis.activeLevel = new Level5(this.audioManager);\n\t\t\t\tbreak;\n\t\t\tcase 6:\n\t\t\t\tthis.activeLevel = new Level6(this.audioManager);\n\t\t\t\tbreak;\n\t\t\tcase 7:\n\t\t\t\tthis.activeLevel = new Level7(this.audioManager);\n\t\t\t\tbreak;\n\t\t\tcase 8:\n\t\t\t\tthis.activeLevel = new Level8(this.audioManager);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthis.activeLevel = new Level1(this.audioManager);\n\t\t\t\tbreak;\n\t\t}\n\t\tthis.activeLevel.start();\n\t}\n\n\tprivate createSlider(): void {\n\t\tconst margin: { top: number; right: number; bottom: number; left: number } = {\n\t\t\ttop: 10,\n\t\t\tright: 10,\n\t\t\tbottom: 20,\n\t\t\tleft: 10,\n\t\t};\n\t\tconst effectiveWidth: number = this.sliderWidth - margin.left - margin.right;\n\n\t\tconst scale: d3.ScaleLinear<number, number, never> = d3\n\t\t\t.scaleLinear()\n\t\t\t.domain([1, this.numLevels])\n\t\t\t.range([0, effectiveWidth])\n\t\t\t.clamp(true);\n\n\t\tconst svg: d3.Selection<SVGSVGElement, unknown, HTMLElement, any> = d3\n\t\t\t.select('#slider')\n\t\t\t.append('svg')\n\t\t\t.attr('width', this.sliderWidth)\n\t\t\t.attr('height', 50);\n\n\t\tconst sliderGroup: d3.Selection<SVGGElement, unknown, HTMLElement, any> = svg\n\t\t\t.append('g')\n\t\t\t.attr('transform', `translate(${margin.left}, 30)`);\n\n\t\tsliderGroup.append('g').call(d3.axisBottom(scale).ticks(this.numLevels).tickFormat(d3.format('1')));\n\n\t\tconst handle: d3.Selection<SVGCircleElement, unknown, HTMLElement, any> = sliderGroup\n\t\t\t.append('circle')\n\t\t\t.attr('cx', scale(this.activeLevelNumber))\n\t\t\t.attr('cy', -10)\n\t\t\t.attr('r', 10)\n\t\t\t.style('fill', 'red')\n\t\t\t.style('cursor', 'ew-resize');\n\t\tconst dragHandler: d3.DragBehavior<SVGCircleElement, unknown, unknown> = d3\n\t\t\t.drag<SVGCircleElement, unknown>()\n\t\t\t.on('drag', (event) => {\n\t\t\t\tconst x = event.x - margin.left; // Adjusting for the left margin\n\t\t\t\tconst level = Math.round(scale.invert(x));\n\t\t\t\thandle.attr('cx', scale(level));\n\t\t\t\tthis.updateActiveLevel(level);\n\t\t\t});\n\n\t\thandle.call(dragHandler);\n\t}\n\n\tprivate createJumbotron(): void {\n\t\tconst jumbotron: d3.Selection<d3.BaseType, unknown, HTMLElement, any> = d3.select('#jumbotron');\n\t\tconst colorScale = d3.scaleLinear<string>().domain([1, this.numLevels]).range(['lightblue', 'lightcoral']);\n\t\tfor (let i = 1; i <= this.numLevels; i++) {\n\t\t\tconst box: d3.Selection<HTMLDivElement, unknown, HTMLElement, any> = jumbotron\n\t\t\t\t.append('div')\n\t\t\t\t.attr('class', 'jumbotron-box inactive')\n\t\t\t\t.on('click', () => this.updateActiveLevel(i));\n\n\t\t\t// Example of how you can append an SVG to a jumbotron box.\n\t\t\tconst svg: d3.Selection<SVGSVGElement, unknown, HTMLElement, any> = box\n\t\t\t\t.append('svg')\n\t\t\t\t.attr('width', '100%')\n\t\t\t\t.attr('height', '100%');\n\n\t\t\tsvg\n\t\t\t\t.append('rect') // Placeholder for actual SVG content.\n\t\t\t\t.attr('width', '100%')\n\t\t\t\t.attr('height', '100%')\n\t\t\t\t.attr('fill', colorScale(i));\n\t\t\tsvg\n\t\t\t\t.append('text')\n\t\t\t\t.attr('x', '50%')\n\t\t\t\t.attr('y', '50%')\n\t\t\t\t.attr('dominant-baseline', 'middle')\n\t\t\t\t.attr('text-anchor', 'middle')\n\t\t\t\t.text(`Level ${i}`);\n\t\t}\n\t\tthis.updateActiveLevel(this.activeLevelNumber);\n\t}\n\n\tprivate updateActiveLevel(level: number): void {\n\t\tthis.activeLevelNumber = level;\n\t\td3.selectAll('.jumbotron-box')\n\t\t\t.classed('active', (_, i) => i + 1 === level)\n\t\t\t.classed('inactive', (_, i) => i + 1 !== level);\n\t\td3.select('circle').attr(\n\t\t\t'cx',\n\t\t\td3\n\t\t\t\t.scaleLinear()\n\t\t\t\t.domain([1, this.numLevels])\n\t\t\t\t.range([0, this.sliderWidth - 20])(level)\n\t\t);\n\t\tthis.startActiveLevel();\n\t}\n}\n"],"names":["AudioFile","Direction","AudioManager","constructor","this","audioContext","window","AudioContext","webkitAudioContext","audioBuffers","Map","backgroundMusicSource","loadAllAudio","promises","loadAudio","TANK_FIRE","TANK_DESTROY","BOMB_EXPLODE","BACKGROUND_MUSIC","Promise","all","audioFile","url","fetch","then","response","arrayBuffer","decodeAudioData","audioBuffer","set","catch","error","console","play","buffer","get","source","createBufferSource","connect","destination","start","warn","getAudioContext","playBackgroundMusic","stopBackgroundMusic","loop","stop","disconnect","Ammunition","startX","startY","theta","speed","maxBounces","canvasWidth","canvasHeight","isDestroyed","audioManager","radius","xPosition","yPosition","xVelocity","Math","cos","yVelocity","sin","bounces","updatePosition","obstacleCanvas","obstacles","forEach","obstacle","xLeft","xRight","yTop","yBottom","fromLeft","abs","fromRight","fromTop","fromBottom","minDistance","min","checkEnemyHit","enemyTanks","enemyTank","destroy","log","checkPlayerHit","playerTank","checkAmmunitionCollision","ammunitions","ammunition","dx","dy","sqrt","checkBombCollision","bombs","bomb","reload","draw","context","beginPath","arc","PI","fillStyle","fill","lineWidth","strokeStyle","stroke","closePath","willHitPlayerTank","predictedXPosition","predictedYPosition","predictedXVelocity","predictedYVelocity","predictedBounces","PlayerAmmunition","super","BasicAIAmmunition","SuperAIAmmunition","BombFragment","x","y","color","velocityX","velocityY","life","fragmentRadius","fragmentColor","blastRadius","update","Bomb","fragmentColorScale","domain","range","blastDelayMS","fuseStartTime","shouldFlashRed","isExploding","fragments","createFragments","setTimeout","isPointInsideBlastRadius","tankMidpoint","setFuse","performance","now","animateFuse","updateExplosion","particle","filter","fractionElapsed","some","threshold","requestAnimationFrame","i","angle","random","fragment","push","PlayerBomb","BasicBomb","LoveBomb","save","translate","scale","moveTo","bezierCurveTo","restore","GameRenderer","canvas","playerWin","enemyWin","getContext","Error","initializeCanvas","width","height","renderLevelOverScreen","message","font","textWidth","measureText","fontSize","clearRect","strokeText","fillText","render","progress","every","tank","allAmmunition","flatMap","allBombs","aim","aimXPos","aimYPos","shoot","plantBomb","reticule","GameCanvas","canvasSelector","animationFrameID","gameRenderer","document","querySelector","lastRenderTime","addEventListener","resizeCanvas","bind","gameLoop","cancelAnimationFrame","timeStamp","addEnemyTank","addPlayerTank","Obstacle","rect","ObstacleCanvas","obstacleCanvasSelector","clearObstacles","Navigator","AStarNavigator","navigationGrid","aggressionFactor","pathRecaculationInterval","currentNode","path","currentTank","length","reset","startNode","getNodeFromTank","targetNode","destinationNode","getRandomNodeInRadiusOfTarget","aStar","wasLastMoveBlocked","consecutiveDirectionMoves","randomDirection","getRandomDirection","moveInCardinalDirection","randomNumber","moveSouthEast","moveNorthEast","moveNorthWest","moveSouthWest","moveSouth","moveEast","moveNorth","moveWest","splice","size","Node","g","h","f","walkable","parent","NavigationGrid","gameCanvas","stationary","grid","gridCellWidth","gridXLength","gridYLength","floor","gridXLeft","gridXRight","gridYTop","gridYBottom","obs","lineTo","j","value","index","array","xGridCoordinate","yGridCoordinate","max","target","candidateNodes","node","distance","pow","openSet","closedSet","Set","current","sort","a","b","unshift","indexOf","add","neighbors","getWalkableNeighbors","neighbor","has","tentativeG","SQRT2","includes","round","SimpleNavigator","pathfinder","simplePathFinder","findPath","SimplePathfinder","moveTowardsGoal","currentPos","goalPos","possibleMoves","bestMove","Number","MAX_SAFE_INTEGER","move","isWithinBounds","isWalkable","position","goal","count","PastelColorPalette","BABY_BLUE","LAVENDER_BLUSH","PALE_YELLOW","PEACH_PUFF","BLUSH_PINK","LIGHT_AQUA","LIGHT_PINK","LIGHT_CORAL_PINK","MINT_CREAM","PALE_LAVENDER","CORAL_ORANGE","SOFT_PEACH","LIGHT_SALMON_PINK","LIGHT_ROSE","SOFT_ORANGE","SOFT_TEAL","PALE_MINT","LIGHT_SAGE","PALE_GREEN","MINT_GREEN","SOFT_PEACH_PINK","PALE_PEACH","PALE_GRAY","PALE_AQUA","SOFT_CYAN","Reticule","dashPattern","renderReticule","tankSize","reticuleWidth","tankXPos","tankYPos","mouseXPos","mouseYpos","setLineDash","NoReticule","AdjustingCustomColorReticule","maxReticuleLength","tankXPosition","tankYPosition","mouseXPosition","mouseYPosition","xDist","yDist","distanceToMaxDistanceRatio","dashLength","spaceLength","xLength","Tank","gunBarrellWidth","twoPi","lastDirectionMoved","UNKNOWN","maxAmmunition","maxBombs","canvasRect","getBoundingClientRect","xOffset","left","yOffset","top","atan2","aimAngle","gunBarrellEndX","gunBarrellEndY","fillRect","lineJoin","strokeRect","grayValue","moveInLastDirectionMoved","enumValues","Object","keys","map","n","parseInt","isNaN","direction","NORTH","SOUTH","EAST","WEST","NORTHEAST","NORTHWEST","SOUTHEAST","SOUTHWEST","values","randomIndex","blocked","blockedNorth","blockedEast","blockedWest","blockedSouth","EnemyTank","navigator","drawNavigation","BomberTank","bomberTankColor","minTimeBetweenShotsMS","timeBetweenShotsIsElapsed","minTimeBetweenBombPlantsMS","timeBetweenPlantsIsElapsed","availableBombIndex","findIndex","availableAmmunitionIndex","PlayerTank","keyStates","ArrowUp","ArrowDown","ArrowLeft","ArrowRight","w","s","d","W","A","S","D","event","hasOwnProperty","key","code","clientX","clientY","contains","up","right","down","DefaultPlayerTank","xPos","yPos","defaultPlayerTankColor","viewportWidth","innerWidth","distanceFromLeft","distanceFromRight","SimpleMovingTank","simpleMovingTankColor","StationaryNavigator","StationaryRandomAimTank","fastTankColor","aimAngleChangeAmount","getAngleChangeAmount","StationaryTank","stationaryTankColor","SuperBomberMovingTank","superBomberMovingTankColor","Level","Level1","stationaryTank","Level2","stationaryTank1","stationaryTank2","stationaryTank3","Level3","superAmmo","aiTank","Level4","obs2","basicAmmo","Level5","obs3","aiTank3","aiTank2","Level6","basicBombs","basicBombs2","basicBombs3","navigationGrid2","navigationGrid3","navigator1","navigator2","navigator3","Level7","obs1","obs4","superAmmo1","aiTank1","superAmmo2","superAmmo3","superAmmo4","aiTank4","superAmmo5","aiTank5","Level8","basicAmmo2","basicAmmo3","levels","sliderWidth","numLevels","activeLevelNumber","activeLevel","setHeader","createSlider","createJumbotron","header","getElementById","textContent","startActiveLevel","margin","effectiveWidth","clamp","sliderGroup","append","attr","call","ticks","tickFormat","handle","style","dragHandler","on","level","invert","updateActiveLevel","jumbotron","colorScale","svg","text","classed","_"],"sourceRoot":""}