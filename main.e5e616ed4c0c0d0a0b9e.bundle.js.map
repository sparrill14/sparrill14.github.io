{"version":3,"file":"main.e5e616ed4c0c0d0a0b9e.bundle.js","mappings":"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","sources":["webpack://treads/./src/assets/computer.ico","webpack://treads/./src/game/Obstacle.ts","webpack://treads/./src/game/Ammunition.ts","webpack://treads/./src/game/Reticule.ts","webpack://treads/./src/game/Tank.ts","webpack://treads/./src/game/ObstacleCanvas.ts","webpack://treads/./src/game/GameRenderer.ts","webpack://treads/./src/game/GameCanvas.ts","webpack://treads/./src/game/NavigationGrid.ts","webpack://treads/./src/game/Level.ts","webpack://treads/./src/index.ts","webpack://treads/./src/ui/LevelSelector.ts"],"sourcesContent":["export default __webpack_public_path__ + \"assets/computer.ico\";","export class Obstacle {\r\n    public xLeft: number;\r\n    public xRight: number;\r\n    public yTop: number;\r\n    public yBottom: number;\r\n    public width: number;\r\n    public height: number;\r\n\r\n    constructor (startX: number, startY: number, width: number, height: number) {\r\n        this.xLeft = startX;\r\n        this.yTop = startY;\r\n        this.width = width;\r\n        this.height = height;\r\n        this.yBottom = this.yTop + this.height;\r\n        this.xRight = this.xLeft + this.width;\r\n    }\r\n\r\n    draw (context: CanvasRenderingContext2D): void {\r\n        context.beginPath();\r\n        context.rect(this.xLeft, this.yTop, this.width, this.height);\r\n        context.fillStyle = 'black';\r\n        context.fill();\r\n    }\r\n}\r\n","import { ObstacleCanvas } from \"./ObstacleCanvas\";\r\nimport { Tank } from \"./Tank\";\r\nimport tankDestroy from \"../assets/audio/tankDestroy.mp3\"\r\n\r\nexport class Ammunition {\r\n    public xPos: number;\r\n    public yPos: number;\r\n    public xVelocity: number;\r\n    public yVelocity: number;\r\n    public theta: number;\r\n    public bounces: number;\r\n    public maxBounces: number;\r\n    public speed: number;\r\n    public canvasWidth: number;\r\n    public canvasHeight: number;\r\n    public isDestroyed: boolean;\r\n\r\n    public tankDestroyAudio: HTMLAudioElement;\r\n\r\n    constructor (startX: number, startY: number, theta: number, speed: number, maxBounces: number, canvasWidth: number, canvasHeight: number, isDestroyed: boolean) {\r\n        this.xPos = startX;\r\n        this.yPos = startY;\r\n        this.theta = theta;\r\n        this.speed = speed;\r\n        this.xVelocity = Math.cos(this.theta) * this.speed;\r\n        this.yVelocity = Math.sin(this.theta) * this.speed;\r\n        this.bounces = 0;\r\n        this.maxBounces = maxBounces;\r\n        this.canvasWidth = canvasWidth;\r\n        this.canvasHeight = canvasHeight;\r\n        this.isDestroyed = isDestroyed;\r\n        this.tankDestroyAudio = new Audio(tankDestroy)\r\n    }\r\n\r\n    updatePosition (obstacleCanvas: ObstacleCanvas): void {\r\n        this.xPos += this.xVelocity;\r\n        this.yPos += this.yVelocity;\r\n\r\n        if (this.xPos <= 0 || this.xPos > this.canvasWidth) {\r\n            this.xVelocity = -this.xVelocity;\r\n            this.bounces++;\r\n        }\r\n\r\n        if (this.yPos <= 0 || this.yPos > this.canvasHeight) {\r\n            this.yVelocity = -this.yVelocity;\r\n            this.bounces++;\r\n        }\r\n\r\n        obstacleCanvas.obstacles.forEach(obstacle => {\r\n            if (this.xPos > obstacle.xLeft && this.xPos < obstacle.xRight && this.yPos > obstacle.yTop && this.yPos < obstacle.yBottom) {\r\n              this.bounces++;\r\n              const fromLeft = Math.abs(this.xPos - obstacle.xLeft);\r\n              const fromRight = Math.abs(this.xPos - obstacle.xRight);\r\n              const fromTop = Math.abs(this.yPos - obstacle.yTop);\r\n              const fromBottom = Math.abs(this.yPos - obstacle.yBottom);\r\n          \r\n              const minDistance = Math.min(fromLeft, fromRight, fromTop, fromBottom);\r\n          \r\n              if (minDistance === fromTop) {\r\n                this.yPos = obstacle.yTop - 1;\r\n                this.yVelocity = -this.yVelocity;\r\n              } else if (minDistance === fromBottom) {\r\n                this.yPos = obstacle.yBottom + 1;\r\n                this.yVelocity = -this.yVelocity;\r\n              } else if (minDistance === fromLeft) {\r\n                this.xPos = obstacle.xLeft - 1;\r\n                this.xVelocity = -this.xVelocity;\r\n              } else if (minDistance === fromRight) {\r\n                this.xPos = obstacle.xRight + 1;\r\n                this.xVelocity = -this.xVelocity;\r\n              }\r\n            }\r\n        });\r\n\r\n        if (this.bounces > this.maxBounces) {\r\n            this.isDestroyed = true;\r\n        }\r\n    }\r\n\r\n    checkEnemyHit (enemyTanks: Tank[]): void {\r\n        enemyTanks.forEach(enemyTank => {\r\n            if (enemyTank.isDestroyed) {\r\n                return;\r\n            }\r\n            if (this.xPos > enemyTank.xLeft && this.xPos < enemyTank.xRight && this.yPos > enemyTank.yTop && this.yPos < enemyTank.yBottom) {\r\n                this.isDestroyed = true;\r\n                enemyTank.isDestroyed = true;\r\n                this.tankDestroyAudio.play();\r\n                console.log(\"Enemy hit!!!\");\r\n            }\r\n        })\r\n    }\r\n\r\n    checkPlayerHit (playerTank: Tank): void {\r\n        if (playerTank.isDestroyed) {\r\n            return;\r\n        }\r\n        if (this.xPos > playerTank.xLeft && this.xPos < playerTank.xRight && this.yPos > playerTank.yTop && this.yPos < playerTank.yBottom) {\r\n            playerTank.isDestroyed = true;\r\n            this.isDestroyed = true;\r\n            console.log(\"Player Hit!!!\");\r\n        }\r\n    }\r\n\r\n    draw (context: CanvasRenderingContext2D): void {\r\n        context.beginPath();\r\n        context.arc(this.xPos, this.yPos, 3, 0, 2 * Math.PI);\r\n        context.fillStyle = 'white';\r\n        context.fill();\r\n        context.lineWidth = 2;\r\n        context.strokeStyle = 'black';\r\n        context.stroke();\r\n        context.closePath();\r\n    }\r\n\r\n    reload (startX: number, startY: number, theta: number, isDestroyed: boolean, canvasWidth: number, canvasHeight: number, ) {\r\n        this.xPos = startX;\r\n        this.yPos = startY;\r\n        this.theta = theta;\r\n        this.isDestroyed = isDestroyed;\r\n        this.xVelocity = Math.cos(this.theta) * this.speed;\r\n        this.yVelocity = Math.sin(this.theta) * this.speed;\r\n        this.canvasWidth = canvasWidth;\r\n        this.canvasHeight = canvasHeight;\r\n        this.bounces = 0;\r\n    }\r\n\r\n    willHitPlayerTank(obstacleCanvas: ObstacleCanvas, playerTank: Tank): boolean {\r\n        let predictedXPosition: number = this.xPos;\r\n        let predictedYPosition: number = this.yPos;\r\n        let predictedXVelocity: number = this.xVelocity;\r\n        let predictedYVelocity: number = this.yVelocity;\r\n        let predictedBounces: number = 0;\r\n        while (predictedBounces <= this.maxBounces) {\r\n            predictedXPosition += predictedXVelocity;\r\n            predictedYPosition += predictedYVelocity;\r\n            if (predictedXPosition <= 0 || predictedXPosition > this.canvasWidth) {\r\n                predictedXVelocity = -predictedXVelocity;\r\n                predictedBounces++;\r\n            }\r\n            if (predictedYPosition <= 0 || predictedYPosition > this.canvasHeight) {\r\n                predictedYVelocity = -predictedYVelocity;\r\n                predictedBounces++;\r\n            }\r\n            obstacleCanvas.obstacles.forEach(obstacle => {\r\n                if (predictedXPosition > obstacle.xLeft && predictedXPosition < obstacle.xRight && predictedYPosition > obstacle.yTop && predictedYPosition < obstacle.yBottom) {\r\n                    predictedBounces++;\r\n                    predictedXVelocity = -predictedXVelocity;\r\n                    predictedYVelocity = -predictedYVelocity;\r\n                }\r\n            });\r\n            if (predictedXPosition > playerTank.xLeft && predictedXPosition < playerTank.xRight && predictedYPosition > playerTank.yTop && predictedYPosition < playerTank.yBottom) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n}\r\n\r\nexport class PlayerAmmunition extends Ammunition {\r\n    constructor (startX: number, startY: number, theta: number, canvasWidth: number, canvasHeight: number, isDestroyed: boolean) {\r\n        let playerAmmunitionMaxBounces: number = 1;\r\n        let playerAmmunitionSpeed: number = 4;\r\n        super(startX, startY, theta, playerAmmunitionSpeed, playerAmmunitionMaxBounces, canvasWidth, canvasHeight, isDestroyed);\r\n    }\r\n}\r\n\r\nexport class BasicAIAmmunition extends Ammunition {\r\n    constructor (startX: number, startY: number, theta: number, canvasWidth: number, canvasHeight: number, isDestroyed: boolean) {\r\n        let BasicAIAmmunitionMaxBounces: number = 0;\r\n        let BasicAIAmmunitionSpeed: number = 5;\r\n        super(startX, startY, theta, BasicAIAmmunitionSpeed, BasicAIAmmunitionMaxBounces, canvasWidth, canvasHeight, isDestroyed);\r\n    }\r\n}\r\n\r\nexport class SuperAIAmmunition extends Ammunition {\r\n    constructor (startX: number, startY: number, theta: number, canvasWidth: number, canvasHeight: number, isDestroyed: boolean) {\r\n        let superAIAmmunitionMaxBounces: number = 2;\r\n        let superAIAmmunitionSpeed: number = 7;\r\n        super(startX, startY, theta, superAIAmmunitionSpeed, superAIAmmunitionMaxBounces, canvasWidth, canvasHeight, isDestroyed);\r\n    }\r\n}\r\n","export class Reticule {\r\n    protected color: string;\r\n    protected dashPattern: [number, number]; // [dashLengthInPixels, spaceLengthInPixels]\r\n    protected renderReticule: boolean;\r\n    protected tankSize: number;\r\n    protected reticuleWidth: number = 5;\r\n\r\n    constructor (dashPattern: [number, number], color: string, renderReticule: boolean, tankSize: number) {\r\n        this.color = color;\r\n        this.dashPattern = dashPattern;\r\n        this.renderReticule = renderReticule;\r\n        this.tankSize = tankSize;\r\n    }\r\n\r\n    public draw(context: CanvasRenderingContext2D, tankXPos: number, tankYPos: number, mouseXPos: number, mouseYpos: number): void {\r\n        if (this.renderReticule) {\r\n            context.strokeStyle = this.color;\r\n            context.setLineDash(this.dashPattern);\r\n            context.beginPath();\r\n            context.moveTo(tankXPos + (this.tankSize / 2), tankYPos + (this.tankSize / 2));\r\n            context.lineTo(mouseXPos, mouseYpos);\r\n            context.lineWidth = this.reticuleWidth\r\n            context.stroke();\r\n        }\r\n    }\r\n}\r\n\r\nexport class NoReticule extends Reticule {\r\n    constructor() {\r\n        super([0, 0], 'blue', false, 0);\r\n    }\r\n}\r\n\r\nexport class SimplePlayerReticule extends Reticule {\r\n    constructor(tankSize: number) {\r\n        super([5, 5], 'blue', true, tankSize);\r\n    }\r\n}\r\n\r\nexport class CustomColorReticule extends Reticule {\r\n    constructor(tankSize: number, color: string) {\r\n        super([4, 1], color, true, tankSize);\r\n    }\r\n}\r\n\r\nexport class AdjustingCustomColorReticule extends Reticule {\r\n    private maxReticuleLength: number;\r\n\r\n    constructor (tankSize: number, color: string, maxReticuleLength: number) {\r\n        super([1, 1], color, true, tankSize);\r\n        this.maxReticuleLength = maxReticuleLength;\r\n    }\r\n\r\n    override draw(context: CanvasRenderingContext2D, tankXPosition: number, tankYPosition: number, mouseXPosition: number, mouseYPosition: number): void {\r\n        const xDist = mouseXPosition - tankXPosition;\r\n        const yDist = mouseYPosition - tankYPosition;\r\n        const distance = Math.sqrt(Math.pow(xDist, 2) + Math.pow(yDist, 2));\r\n        const distanceToMaxDistanceRatio = distance / this.maxReticuleLength;\r\n        const distanceToMaxDistanceRatioInverse = 1 - distanceToMaxDistanceRatio;\r\n        let dashLength = distanceToMaxDistanceRatio * 10 + 2;\r\n        let spaceLength = distanceToMaxDistanceRatioInverse * 10 + 5;\r\n\r\n        if (this.renderReticule) {\r\n            context.strokeStyle = this.color;\r\n            context.setLineDash([dashLength, spaceLength]);\r\n            context.beginPath();\r\n            context.moveTo(tankXPosition + (this.tankSize / 2), tankYPosition + (this.tankSize / 2),);\r\n            context.lineTo(mouseXPosition, mouseYPosition);\r\n            context.lineWidth = this.reticuleWidth\r\n            context.stroke();\r\n\r\n            context.setLineDash([]);\r\n            let xLength = 10;\r\n            context.beginPath();\r\n            context.moveTo(mouseXPosition - xLength, mouseYPosition - xLength);\r\n            context.lineTo(mouseXPosition + xLength, mouseYPosition + xLength);\r\n            context.stroke();\r\n\r\n            context.beginPath();\r\n            context.moveTo(mouseXPosition - xLength, mouseYPosition + xLength);\r\n            context.lineTo(mouseXPosition + xLength, mouseYPosition - xLength);\r\n            context.stroke();\r\n        }\r\n    }\r\n}\r\n","import { KeyStates } from \"../utils/KeyStates\";\r\nimport { Ammunition, BasicAIAmmunition, PlayerAmmunition } from \"./Ammunition\";\r\nimport { ObstacleCanvas } from \"./ObstacleCanvas\";\r\nimport { Reticule, AdjustingCustomColorReticule, NoReticule } from \"./Reticule\";\r\nimport tankFire from \"../assets/audio/tankFire.mp3\"\r\nimport { NavigationGrid, Node } from \"./NavigationGrid\";\r\n\r\nexport enum Direction {\r\n    NORTH = 1,\r\n    SOUTH = 2,\r\n    EAST = 3,\r\n    WEST = 4,\r\n    NORTHEAST = 5,\r\n    NORTHWEST = 6,\r\n    SOUTHEAST = 7,\r\n    SOUTHWEST = 8,\r\n    UNKNOWN = 9\r\n}\r\n\r\nexport class Tank {\r\n    public xPos: number;\r\n    public yPos: number;\r\n    public xLeft: number;\r\n    public xRight: number;\r\n    public yTop: number;\r\n    public yBottom: number;\r\n    public speed: number;\r\n    public size: number;\r\n    public tankMidpoint: number;\r\n    public color: string;\r\n    public reticule: Reticule;\r\n    public gunBarrellWidth: number = 7;\r\n    public isDestroyed: boolean = false;\r\n    public obstacleCanvas: ObstacleCanvas;\r\n    public twoPi: number = 2 * Math.PI;\r\n    public lastDirectionMoved: Direction = Direction.UNKNOWN;\r\n    public wasLastMoveBlocked: boolean = false;\r\n    public consecutiveDirectionMoves: number = 0;\r\n\r\n    public keyStates: KeyStates = {\r\n        ArrowUp: false,\r\n        ArrowDown: false,\r\n        ArrowLeft: false,\r\n        ArrowRight: false,\r\n        w: false,\r\n        a: false,\r\n        s: false,\r\n        d: false,\r\n        W: false,\r\n        A: false,\r\n        S: false,\r\n        D: false\r\n    }\r\n\r\n    public aimAngle: number;\r\n    public aimXPos: number;\r\n    public aimYPos: number;\r\n    public xOffset: number;\r\n    public yOffset: number;\r\n    public ammunition: Ammunition[] = [];\r\n    public maxAmmunition: number;\r\n\r\n    protected canvasWidth: number;\r\n    protected canvasHeight: number;\r\n\r\n    constructor(canvas: HTMLCanvasElement, reticule: Reticule, xPos: number, yPos: number, speed: number, size: number, color: string, obstacleCanvas: ObstacleCanvas, ammunition: Ammunition[]) {\r\n        this.reticule = reticule;\r\n        this.xPos = xPos;\r\n        this.yPos = yPos;\r\n        this.xLeft = xPos;\r\n        this.xRight = xPos + size;\r\n        this.yTop = yPos;\r\n        this.yBottom = yPos + size;\r\n        this.speed = speed;\r\n        this.size = size;\r\n        this.color = color;\r\n        this.canvasWidth = canvas.width;\r\n        this.canvasHeight = canvas.height;\r\n        this.obstacleCanvas = obstacleCanvas;\r\n        this.tankMidpoint = this.size / 2;\r\n        this.ammunition = ammunition;\r\n        this.maxAmmunition = ammunition.length\r\n\r\n        this.aimAngle = 90;\r\n        const canvasRect: DOMRect = canvas.getBoundingClientRect();\r\n        this.xOffset = canvasRect.left;\r\n        this.yOffset = canvasRect.top;\r\n        // Set the initital awX and Y aim position to the center of the canvas\r\n        this.aimXPos = canvas.width / 2;\r\n        this.aimYPos = canvas.height / 2;\r\n    }\r\n\r\n    public draw(context: CanvasRenderingContext2D): void {\r\n        if (this.isDestroyed) {\r\n            return;\r\n        }\r\n\r\n        context.fillStyle = this.color;\r\n        context.fillRect(this.xPos, this.yPos, this.size, this.size);\r\n\r\n        context.setLineDash([]);\r\n        context.lineJoin = 'bevel'\r\n        context.strokeStyle = 'black';\r\n        context.lineWidth = 2;\r\n        context.strokeRect(this.xPos, this.yPos, this.size, this.size);\r\n\r\n        context.beginPath();\r\n        context.arc(this.xPos + this.tankMidpoint, this.yPos + this.tankMidpoint, this.size / 3, 0, this.twoPi);\r\n        context.stroke();\r\n\r\n        const endX = this.xPos + this.tankMidpoint + (Math.cos(this.aimAngle) * this.size);\r\n        const endY = this.yPos + this.tankMidpoint + (Math.sin(this.aimAngle) * this.size);\r\n        context.beginPath();\r\n        context.moveTo(this.xPos + this.tankMidpoint, this.yPos + this.tankMidpoint);\r\n        context.lineTo(endX, endY);\r\n        context.lineWidth = this.gunBarrellWidth;\r\n        context.stroke();\r\n    }\r\n\r\n    public updatePosition(playerTank: Tank): void {\r\n        if(this.up() && this.right()) {\r\n            this.moveNorthEast();\r\n        }\r\n\r\n        else if(this.up() && this.left()) {\r\n            this.moveNorthWest();\r\n        }\r\n\r\n        else if(this.down() && this.right()) {\r\n            this.moveSouthEast();\r\n        }\r\n\r\n        else if(this.down() && this.left()) {\r\n            this.moveSouthWest();\r\n        }\r\n\r\n        else if(this.up()) {\r\n            this.moveNorth();\r\n        }\r\n\r\n        else if(this.down()) {\r\n            this.moveSouth();\r\n        }\r\n\r\n        else if(this.left()) {\r\n            this.moveWest();\r\n        }\r\n\r\n        else if(this.right()) {\r\n            this.moveEast();\r\n        }\r\n\r\n        this.xLeft = this.xPos;\r\n        this.xRight = this.xPos + this.size;\r\n        this.yTop = this.yPos;\r\n        this.yBottom = this.yPos + this.size;\r\n    }\r\n\r\n    public aim(mouseXPos: number, mouseYpos: number, playerTank: Tank): void {\r\n        if (this.isDestroyed) {\r\n            return;\r\n        }\r\n\r\n        let dy: number;\r\n        let dx: number;\r\n        dx = mouseXPos - this.xPos - this.tankMidpoint;\r\n        dy = mouseYpos - this.yPos - this.tankMidpoint;\r\n        let theta = Math.atan2(dy, dx);\r\n        if (theta < 0) {\r\n            theta += 2 * Math.PI;\r\n        }\r\n        this.aimAngle = theta;\r\n    }\r\n\r\n    public shoot(playerTank: Tank): void {\r\n        return;\r\n    }\r\n\r\n    public moveInLastDirectionMoved(): void {\r\n        this.moveInCardinalDirection(this.lastDirectionMoved);\r\n    }\r\n\r\n    public getRandomDirection<Direction>(): Direction[keyof Direction] {\r\n        const enumValues = Object.keys(Direction)\r\n          .map(n => Number.parseInt(n))\r\n          .filter(n => !Number.isNaN(n)) as unknown as Direction[keyof Direction][]\r\n        const randomIndex = Math.floor(Math.random() * enumValues.length)\r\n        const randomEnumValue = enumValues[randomIndex]\r\n        return randomEnumValue;\r\n    }\r\n\r\n    public moveInCardinalDirection(direction: Direction): void {\r\n        switch(direction) {\r\n            case Direction.NORTH: {\r\n                this.moveNorth();\r\n                break;\r\n            }\r\n            case Direction.SOUTH: {\r\n                this.moveSouth();\r\n                break;\r\n            }\r\n            case Direction.EAST: {\r\n                this.moveEast();\r\n                break;\r\n            }\r\n            case Direction.WEST: {\r\n                this.moveWest();\r\n                break;\r\n            }\r\n            case Direction.NORTHEAST: {\r\n                this.moveNorthEast();\r\n                break;\r\n            }\r\n            case Direction.NORTHWEST: {\r\n                this.moveNorthWest();\r\n                break;\r\n            }\r\n            case Direction.SOUTHEAST: {\r\n                this.moveSouthEast();\r\n                break;\r\n            }\r\n            case Direction.SOUTHWEST: {\r\n                this.moveSouthWest();\r\n                break;\r\n            }\r\n            default: {\r\n                const enumValues = Object.values(Direction).filter(value => typeof value === \"number\") as Direction[];\r\n                const randomIndex = Math.floor(Math.random() * enumValues.length);\r\n                this.moveInCardinalDirection(enumValues[randomIndex]);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    public moveNorth(): void {\r\n        if (this.lastDirectionMoved == Direction.NORTH) {\r\n            this.consecutiveDirectionMoves += 1;\r\n        }\r\n        else {\r\n            this.consecutiveDirectionMoves = 0;\r\n        }\r\n        this.lastDirectionMoved = Direction.NORTH\r\n        let blocked: boolean = false;\r\n        for (let i = 0; i < this.obstacleCanvas.obstacles.length; i++) {\r\n            const obstacle = this.obstacleCanvas.obstacles[i];\r\n            if (this.yPos - this.speed < obstacle.yTop + obstacle.height && this.yPos > obstacle.yTop &&\r\n                obstacle.xLeft < this.xPos + this.size && this.xPos < obstacle.xRight) {\r\n                this.yPos = obstacle.yBottom;\r\n                blocked = true;\r\n                break;\r\n            }\r\n        }\r\n        if (!blocked) {\r\n            this.yPos = Math.max(this.yPos - this.speed, 0);\r\n        }\r\n        else {\r\n            this.wasLastMoveBlocked = true;\r\n        }\r\n    }\r\n\r\n    public moveSouth(): void {\r\n        if (this.lastDirectionMoved == Direction.SOUTH) {\r\n            this.consecutiveDirectionMoves += 1;\r\n        }\r\n        else {\r\n            this.consecutiveDirectionMoves = 0;\r\n        }\r\n        this.lastDirectionMoved = Direction.SOUTH\r\n        let blocked: boolean = false;\r\n        for (let i = 0; i < this.obstacleCanvas.obstacles.length; i++) {\r\n            const obstacle = this.obstacleCanvas.obstacles[i];\r\n            if (this.yPos + this.speed + this.size > obstacle.yTop && this.yPos < obstacle.yTop + obstacle.height &&\r\n                obstacle.xLeft < this.xPos + this.size && this.xPos < obstacle.xRight) {\r\n                this.yPos = obstacle.yTop - this.size;\r\n                blocked = true;\r\n                break;\r\n            }\r\n        }\r\n        if (!blocked) {\r\n            this.yPos = Math.min(this.yPos + this.speed, this.canvasHeight - this.size);\r\n        }\r\n        else {\r\n            this.wasLastMoveBlocked = true;\r\n        }\r\n    }\r\n\r\n    public moveWest(): void {\r\n        if (this.lastDirectionMoved == Direction.WEST) {\r\n            this.consecutiveDirectionMoves += 1;\r\n        }\r\n        else {\r\n            this.consecutiveDirectionMoves = 0;\r\n        }\r\n        this.lastDirectionMoved = Direction.WEST\r\n        let blocked: boolean = false;\r\n        for (let i = 0; i < this.obstacleCanvas.obstacles.length; i++) {\r\n            const obstacle = this.obstacleCanvas.obstacles[i];\r\n            if (this.xPos - this.speed < obstacle.xRight && this.xPos > obstacle.xLeft &&\r\n                obstacle.yTop < this.yPos + this.size && this.yPos < obstacle.yBottom) {\r\n                this.xPos = obstacle.xRight;\r\n                blocked = true;\r\n                break;\r\n            }\r\n        }\r\n        if (!blocked) {\r\n            this.xPos = Math.max(this.xPos - this.speed, 0);\r\n        }\r\n        else {\r\n            this.wasLastMoveBlocked = true;\r\n        }\r\n    }\r\n\r\n    public moveEast(): void {\r\n        if (this.lastDirectionMoved == Direction.EAST) {\r\n            this.consecutiveDirectionMoves += 1;\r\n        }\r\n        else {\r\n            this.consecutiveDirectionMoves = 0;\r\n        }\r\n        this.lastDirectionMoved = Direction.EAST\r\n        let blocked: boolean = false;\r\n        for (let i = 0; i < this.obstacleCanvas.obstacles.length; i++) {\r\n            const obstacle = this.obstacleCanvas.obstacles[i];\r\n            if (this.xPos + this.speed + this.size > obstacle.xLeft && this.xPos < obstacle.xLeft + obstacle.width &&\r\n                obstacle.yTop < this.yPos + this.size && this.yPos < obstacle.yBottom) {\r\n                this.xPos = obstacle.xLeft - this.size;\r\n                blocked = true;\r\n                break;\r\n            }\r\n        }\r\n        if (!blocked) {\r\n            this.xPos = Math.min(this.xPos + this.speed, this.canvasWidth - this.size);\r\n        }\r\n        else {\r\n            this.wasLastMoveBlocked = true;\r\n        }\r\n    }\r\n\r\n    public moveNorthEast(): void {\r\n        if (this.lastDirectionMoved == Direction.NORTHEAST) {\r\n            this.consecutiveDirectionMoves += 1;\r\n        }\r\n        else {\r\n            this.consecutiveDirectionMoves = 0;\r\n        }\r\n        this.lastDirectionMoved = Direction.NORTHEAST\r\n        let blockedNorth: boolean = false;\r\n        let blockedEast: boolean = false;\r\n        for (let i = 0; i < this.obstacleCanvas.obstacles.length; i++) {\r\n            const obstacle = this.obstacleCanvas.obstacles[i];\r\n            if (!blockedNorth && this.yPos - this.speed < obstacle.yTop + obstacle.height && this.yPos > obstacle.yTop &&\r\n                obstacle.xLeft < this.xPos + this.size && this.xPos < obstacle.xRight) {\r\n                this.yPos = obstacle.yBottom;\r\n                blockedNorth = true;\r\n            }\r\n            if (!blockedEast && this.xPos + this.speed + this.size > obstacle.xLeft && this.xPos < obstacle.xLeft + obstacle.width &&\r\n                obstacle.yTop < this.yPos + this.size && this.yPos < obstacle.yBottom) {\r\n                this.xPos = obstacle.xLeft - this.size;\r\n                blockedEast = true;\r\n            }\r\n        }\r\n        if (blockedNorth && blockedEast) {\r\n            this.wasLastMoveBlocked = true;\r\n        }\r\n        if (!blockedNorth) {\r\n            this.yPos = Math.max(this.yPos - this.speed, 0);\r\n        }\r\n        if (!blockedEast) {\r\n            this.xPos = Math.min(this.xPos + this.speed, this.canvasWidth - this.size);\r\n        }\r\n    }\r\n\r\n    public moveNorthWest(): void {\r\n        if (this.lastDirectionMoved == Direction.NORTHWEST) {\r\n            this.consecutiveDirectionMoves += 1;\r\n        }\r\n        else {\r\n            this.consecutiveDirectionMoves = 0;\r\n        }\r\n        this.lastDirectionMoved = Direction.NORTHWEST\r\n        let blockedNorth: boolean = false;\r\n        let blockedWest: boolean = false;\r\n\r\n        for (let i = 0; i < this.obstacleCanvas.obstacles.length; i++) {\r\n            const obstacle = this.obstacleCanvas.obstacles[i];\r\n            if (!blockedNorth && this.yPos - this.speed < obstacle.yTop + obstacle.height && this.yPos > obstacle.yTop &&\r\n                obstacle.xLeft < this.xPos + this.size && this.xPos < obstacle.xRight) {\r\n                this.yPos = obstacle.yBottom;\r\n                blockedNorth = true;\r\n            }\r\n            if (!blockedWest && this.xPos - this.speed < obstacle.xRight && this.xPos > obstacle.xLeft &&\r\n                obstacle.yTop < this.yPos + this.size && this.yPos < obstacle.yBottom) {\r\n                this.xPos = obstacle.xRight;\r\n                blockedWest = true;\r\n            }\r\n        }\r\n        if (blockedNorth && blockedWest) {\r\n            this.wasLastMoveBlocked = true;\r\n        }\r\n        if (!blockedNorth) {\r\n            this.yPos = Math.max(this.yPos - this.speed, 0);\r\n        }\r\n        if (!blockedWest) {\r\n            this.xPos = Math.max(this.xPos - this.speed, 0);\r\n        }\r\n    }\r\n\r\n    public moveSouthEast(): void {\r\n        if (this.lastDirectionMoved == Direction.SOUTHEAST) {\r\n            this.consecutiveDirectionMoves += 1;\r\n        }\r\n        else {\r\n            this.consecutiveDirectionMoves = 0;\r\n        }\r\n        this.lastDirectionMoved = Direction.SOUTHEAST\r\n        let blockedSouth: boolean = false;\r\n        let blockedEast: boolean = false;\r\n        for (let i = 0; i < this.obstacleCanvas.obstacles.length; i++) {\r\n            const obstacle = this.obstacleCanvas.obstacles[i];\r\n            if (!blockedSouth && this.yPos + this.speed + this.size > obstacle.yTop && this.yPos < obstacle.yTop + obstacle.height &&\r\n                obstacle.xLeft < this.xPos + this.size && this.xPos < obstacle.xRight) {\r\n                this.yPos = obstacle.yTop - this.size;\r\n                blockedSouth = true;\r\n            }\r\n            if (!blockedEast && this.xPos + this.speed + this.size > obstacle.xLeft && this.xPos < obstacle.xLeft + obstacle.width &&\r\n                obstacle.yTop < this.yPos + this.size && this.yPos < obstacle.yBottom) {\r\n                this.xPos = obstacle.xLeft - this.size;\r\n                blockedEast = true;\r\n            }\r\n        }\r\n        if (blockedSouth && blockedEast) {\r\n            this.wasLastMoveBlocked = true;\r\n        }\r\n        if (!blockedSouth) {\r\n            this.yPos = Math.min(this.yPos + this.speed, this.canvasHeight - this.size);\r\n        }\r\n        if (!blockedEast) {\r\n            this.xPos = Math.min(this.xPos + this.speed, this.canvasWidth - this.size);\r\n        }\r\n    }\r\n\r\n    public moveSouthWest(): void {\r\n        if (this.lastDirectionMoved == Direction.SOUTHWEST) {\r\n            this.consecutiveDirectionMoves += 1;\r\n        }\r\n        else {\r\n            this.consecutiveDirectionMoves = 0;\r\n        }\r\n        this.lastDirectionMoved = Direction.SOUTHWEST\r\n        let blockedSouth: boolean = false;\r\n        let blockedWest: boolean = false;\r\n        for (let i = 0; i < this.obstacleCanvas.obstacles.length; i++) {\r\n            const obstacle = this.obstacleCanvas.obstacles[i];\r\n            if (!blockedSouth && this.yPos + this.speed + this.size > obstacle.yTop && this.yPos < obstacle.yTop + obstacle.height &&\r\n                obstacle.xLeft < this.xPos + this.size && this.xPos < obstacle.xRight) {\r\n                this.yPos = obstacle.yTop - this.size;\r\n                blockedSouth = true;\r\n            }\r\n            if (!blockedWest && this.xPos - this.speed < obstacle.xRight && this.xPos > obstacle.xLeft &&\r\n                obstacle.yTop < this.yPos + this.size && this.yPos < obstacle.yBottom) {\r\n                this.xPos = obstacle.xRight;\r\n                blockedWest = true;\r\n            }\r\n        }\r\n        if (blockedSouth && blockedWest) {\r\n            this.wasLastMoveBlocked = true;\r\n        }\r\n        if (!blockedSouth) {\r\n            this.yPos = Math.min(this.yPos + this.speed, this.canvasHeight - this.size);\r\n        }\r\n        if (!blockedWest) {\r\n            this.xPos = Math.max(this.xPos - this.speed, 0);\r\n        }\r\n    }\r\n\r\n    public up(): boolean {\r\n        return this.keyStates.ArrowUp || this.keyStates.w || this.keyStates.W;\r\n    }\r\n\r\n    public down(): boolean {\r\n        return this.keyStates.ArrowDown || this.keyStates.s || this.keyStates.S;\r\n    }\r\n\r\n    public left(): boolean {\r\n        return this.keyStates.ArrowLeft || this.keyStates.a || this.keyStates.A;\r\n    }\r\n\r\n    public right(): boolean {\r\n        return this.keyStates.ArrowRight || this.keyStates.d || this.keyStates.D;\r\n    }\r\n}\r\n\r\nexport class PlayerTank extends Tank {\r\n    public tankFireAudio: HTMLAudioElement;\r\n\r\n    constructor(canvas: HTMLCanvasElement, reticule: Reticule, xPos: number, yPos: number, speed: number, size: number, color: string, obstacleCanvas: ObstacleCanvas, ammunition: Ammunition[]) {\r\n        super(canvas, reticule, xPos, yPos, speed, size, color, obstacleCanvas, ammunition)\r\n        this.tankFireAudio = new Audio(tankFire)\r\n\r\n        document.addEventListener('keydown', (event: KeyboardEvent) => {\r\n            if (this.keyStates.hasOwnProperty(event.key)) {\r\n                this.keyStates[event.key] = true;\r\n            }\r\n        });\r\n\r\n        document.addEventListener('keyup', (event: KeyboardEvent) => {\r\n            if (this.keyStates.hasOwnProperty(event.key)) {\r\n                this.keyStates[event.key] = false;\r\n            }\r\n        });\r\n\r\n        canvas.addEventListener('mousemove', (event: MouseEvent) => {\r\n            this.aimXPos = event.clientX - this.xOffset;\r\n            this.aimYPos = event.clientY - this.yOffset;\r\n        });\r\n\r\n        canvas.addEventListener('click', (event: MouseEvent) => {\r\n            if (!this.isDestroyed) {\r\n                const availableAmmunitionIndex = this.ammunition.findIndex(ammunition => ammunition.isDestroyed)\r\n                if (availableAmmunitionIndex !== -1) {\r\n                    this.tankFireAudio.play()\r\n                    this.ammunition[availableAmmunitionIndex] = new PlayerAmmunition(this.xPos + (this.size / 2), this.yPos + (this.size / 2), this.aimAngle, canvas.width, canvas.height, false);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    public override aim(mouseXPos: number, mouseYpos: number, playerTank: Tank): void {\r\n        if (this.isDestroyed) {\r\n            return;\r\n        }\r\n        let dy: number;\r\n        let dx: number;\r\n        dx = mouseXPos - this.xPos - this.tankMidpoint;\r\n        dy = mouseYpos - this.yPos - this.tankMidpoint;\r\n        let theta = Math.atan2(dy, dx);\r\n        if (theta < 0) {\r\n            theta += 2 * Math.PI;\r\n        }\r\n        this.aimAngle = theta;\r\n    }\r\n\r\n    public override shoot(playerTank: Tank): void {\r\n        // Shoot logic is in the constructor\r\n        return;\r\n    }\r\n}\r\n\r\nexport class EnemyTank extends Tank {\r\n    constructor(canvas: HTMLCanvasElement, reticule: Reticule, xPos: number, yPos: number, speed: number, size: number, color: string, obstacleCanvas: ObstacleCanvas, ammunition: Ammunition[]) {\r\n        super(canvas, reticule, xPos, yPos, speed, size, color, obstacleCanvas, ammunition)\r\n    }\r\n}\r\n\r\nexport class StationaryTank extends EnemyTank {\r\n    constructor(canvas: HTMLCanvasElement, xPos: number, yPos: number, obstacleCanvas: ObstacleCanvas) {\r\n        let fastTankSpeed: number = 0;\r\n        let fastTankSize: number = 30;\r\n        let fastTankColor: string = '#5784ba';\r\n        let ammunition: Ammunition[] = [\r\n            new BasicAIAmmunition(0, 0, 0, 0, 0, true),\r\n        ]\r\n        super(canvas, new NoReticule(), xPos, yPos, fastTankSpeed, fastTankSize, fastTankColor, obstacleCanvas, ammunition);\r\n        setInterval(() => {\r\n            if (this.isDestroyed) {\r\n                return;\r\n            }\r\n            const availableAmmunitionIndex = this.ammunition.findIndex(ammunition => ammunition.isDestroyed)\r\n            if (availableAmmunitionIndex !== -1) {\r\n                this.ammunition[availableAmmunitionIndex] = new BasicAIAmmunition(this.xPos + (this.size / 2), this.yPos + (this.size / 2), this.aimAngle, this.canvasWidth, this.canvasHeight, false);\r\n            }\r\n        }, 5000);\r\n    }\r\n\r\n    public override updatePosition(playerTank: Tank): void {\r\n        return; \r\n    }\r\n\r\n    public override shoot(playerTank: Tank): void {\r\n        return;\r\n    }\r\n\r\n    public override aim(mouseXPos: number, mouseYpos: number, playerTank: Tank): void {\r\n        if (this.isDestroyed) {\r\n            return;\r\n        }\r\n\r\n        let dy: number;\r\n        let dx: number;\r\n        dx = playerTank.xPos + (playerTank.size / 2) - this.xPos - this.tankMidpoint;\r\n        dy = playerTank.yPos + (playerTank.size / 2) - this.yPos - this.tankMidpoint;\r\n        let theta = Math.atan2(dy, dx);\r\n        if (theta < 0) {\r\n            theta += 2 * Math.PI;\r\n        }\r\n        this.aimAngle = theta;\r\n    }\r\n}\r\n\r\nexport class StationaryRandomAimTank extends EnemyTank {\r\n    public aimAngleChangeAmount: number = 0\r\n\r\n    constructor(canvas: HTMLCanvasElement, xPos: number, yPos: number, obstacleCanvas: ObstacleCanvas, ammunition: Ammunition[]) {\r\n        let fastTankSpeed: number = 0;\r\n        let fastTankSize: number = 30;\r\n        let fastTankColor: string = '#ebe1b9';\r\n        super(canvas, new NoReticule(), xPos, yPos, fastTankSpeed, fastTankSize, fastTankColor, obstacleCanvas, ammunition);\r\n    }\r\n\r\n    private getAngleChangeAmount(): number {\r\n        let max: number = 360;\r\n        let min: number = -360;\r\n        let randomAmount: number = Math.floor(Math.random() * (max - min + 1)) + min; \r\n        return randomAmount;\r\n    }\r\n\r\n    public override updatePosition(playerTank: Tank): void {\r\n        return;\r\n    }\r\n\r\n    public override shoot(playerTank: Tank): void {\r\n        const availableAmmunitionIndex = this.ammunition.findIndex(ammunition => ammunition.isDestroyed)\r\n        if (availableAmmunitionIndex !== -1) {\r\n            this.ammunition[availableAmmunitionIndex].reload(this.xPos + (this.size / 2), this.yPos + (this.size / 2), this.aimAngle, true, this.canvasWidth, this.canvasHeight);\r\n            let willHitPlayerTank: boolean = this.ammunition[availableAmmunitionIndex].willHitPlayerTank(this.obstacleCanvas, playerTank);\r\n            if (willHitPlayerTank) {\r\n                this.ammunition[availableAmmunitionIndex].isDestroyed = false;\r\n            }\r\n        }\r\n        return;\r\n    }\r\n\r\n    public override aim(mouseXPos: number, mouseYpos: number, playerTank: Tank): void {\r\n        if (this.isDestroyed) {\r\n            return;\r\n        }\r\n        if (this.aimAngleChangeAmount > 0) {\r\n            this.aimAngle += 0.01\r\n            this.aimAngleChangeAmount -= 1\r\n        }\r\n        else if (this.aimAngleChangeAmount < 0) {\r\n            this.aimAngle -= 0.01\r\n            this.aimAngleChangeAmount += 1\r\n        }\r\n        else {\r\n            this.aimAngleChangeAmount = this.getAngleChangeAmount()\r\n        }\r\n    }\r\n} \r\n\r\nexport class SimpleMovingTank extends EnemyTank {\r\n    public aimAngleChangeAmount: number = 0\r\n    public navigationGrid: NavigationGrid;\r\n    public aggressionFactor: number = 15; // Distance tank should maintain from its target\r\n    public currentNode: Node;\r\n    public path: Node[] | null = []\r\n    public pathRecaculationInterval: number = 60;\r\n    public drawNavigationGrid: boolean = false;\r\n\r\n    constructor(canvas: HTMLCanvasElement, xPos: number, yPos: number, obstacleCanvas: ObstacleCanvas, ammunition: Ammunition[], navigationGrid: NavigationGrid) {\r\n        let simpleMovingTankSpeed: number = 1.2;\r\n        let simpleMovingTankSize: number = 30;\r\n        let simpleMovingTankColor: string = '#fd8a8a';\r\n        super(canvas, new NoReticule(), xPos, yPos, simpleMovingTankSpeed, simpleMovingTankSize, simpleMovingTankColor, obstacleCanvas, ammunition);\r\n        this.navigationGrid = navigationGrid\r\n        this.currentNode = this.navigationGrid.getNodeFromTank(this)\r\n    }\r\n\r\n    public override draw(context: CanvasRenderingContext2D): void {\r\n        if (this.drawNavigationGrid) {\r\n            context.lineWidth = 1;\r\n            for (let i = 0; i <= this.navigationGrid.gridYLength; i++) {\r\n                context.fillStyle = \"blue\"\r\n                context.beginPath();\r\n                context.moveTo(0, i * this.navigationGrid.gridCellWidth);\r\n                context.lineTo(this.navigationGrid.gridXLength * this.navigationGrid.gridCellWidth, i * this.navigationGrid.gridCellWidth);\r\n                context.stroke();\r\n            }\r\n            for (let j = 0; j <= this.navigationGrid.gridXLength; j++) {\r\n                context.fillStyle = \"blue\"\r\n                context.beginPath();\r\n                context.moveTo(j * this.navigationGrid.gridCellWidth, 0);\r\n                context.lineTo(j * this.navigationGrid.gridCellWidth, this.navigationGrid.gridXLength * this.navigationGrid.gridCellWidth);\r\n                context.stroke();\r\n            }\r\n            context.fillStyle = this.color;\r\n            this.path?.forEach((value: Node, index:  number, array: Node[])=> {\r\n                context.beginPath();\r\n                context.arc(value.x * this.navigationGrid.gridCellWidth + this.navigationGrid.gridCellWidth / 2, value.y * this.navigationGrid.gridCellWidth + this.navigationGrid.gridCellWidth / 2, 5, 0, 2 * Math.PI);\r\n                context.fill();\r\n            })\r\n        }\r\n        super.draw(context);\r\n    }\r\n\r\n    public override updatePosition(playerTank: Tank): void {\r\n        this.pathRecaculationInterval -= 1;\r\n        if (this.path == null || this.path.length == 0 || this.pathRecaculationInterval == 0) {\r\n            this.navigationGrid.reset();\r\n            let startNode: Node = this.navigationGrid.getNodeFromTank(this);\r\n            let targetNode: Node = this.navigationGrid.getNodeFromTank(playerTank);\r\n            let destinationNode: Node = this.navigationGrid.getNodeInRadiusOfTarget(targetNode, this.aggressionFactor);\r\n            this.path = this.navigationGrid.aStar(startNode, destinationNode);\r\n            this.pathRecaculationInterval = 60;\r\n            if (this.path == null) {\r\n                console.log(`Path is null`)\r\n            }\r\n        } else {\r\n            this.currentNode = this.navigationGrid.getNodeFromTank(this);\r\n            let dx = this.path[0].x - this.currentNode.x;\r\n            let dy = this.path[0].y - this.currentNode.y;\r\n\r\n            if (this.wasLastMoveBlocked && this.consecutiveDirectionMoves > 2) {\r\n                let randomDirection: Direction = this.getRandomDirection();\r\n                this.moveInCardinalDirection(randomDirection);\r\n                this.consecutiveDirectionMoves = 0;\r\n                let randomNumber: number = Math.random()\r\n                if (dx === 1 && dy === 0) {\r\n                    if (randomNumber < 0.5) {\r\n                        this.moveSouthEast();\r\n                    }\r\n                    else {\r\n                        this.moveNorthEast();\r\n                    }\r\n                } else if (dx === -1 && dy === 0) {\r\n                    if (randomNumber < 0.5) {\r\n                        this.moveNorthWest();\r\n                    }\r\n                    else {\r\n                        this.moveSouthWest();\r\n                    }\r\n                } else if (dx === 0 && dy === 1) {\r\n                    if (randomNumber < 0.5) {\r\n                        this.moveSouthEast();\r\n                    }\r\n                    else {\r\n                        this.moveSouthWest();\r\n                    }\r\n                } else if (dx === 0 && dy === -1) {\r\n                    if (randomNumber < 0.5) {\r\n                        this.moveNorthWest();\r\n                    }\r\n                    else {\r\n                        this.moveNorthEast();\r\n                    }\r\n                } else if (dx === 1 && dy === 1) {\r\n                    if (randomNumber < 0.5) {\r\n                        this.moveSouth();\r\n                    }\r\n                    else {\r\n                        this.moveEast();\r\n                    }\r\n                } else if (dx === 1 && dy === -1) {\r\n                    if (randomNumber < 0.5) {\r\n                        this.moveNorth();\r\n                    }\r\n                    else {\r\n                        this.moveEast();\r\n                    }\r\n                } else if (dx === -1 && dy === 1) {\r\n                    if (randomNumber < 0.5) {\r\n                        this.moveSouth();\r\n                    }\r\n                    else {\r\n                        this.moveWest();\r\n                    }\r\n                } else if (dx === -1 && dy === -1) {\r\n                    if (randomNumber < 0.5) {\r\n                        this.moveNorth();\r\n                    }\r\n                    else {\r\n                        this.moveWest();\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                if (dx === 1 && dy === 0) {\r\n                    this.moveEast();\r\n                } else if (dx === -1 && dy === 0) {\r\n                    this.moveWest();\r\n                } else if (dx === 0 && dy === 1) {\r\n                    this.moveSouth();\r\n                } else if (dx === 0 && dy === -1) {\r\n                    this.moveNorth();\r\n                } else if (dx === 1 && dy === 1) {\r\n                    this.moveSouthEast();\r\n                } else if (dx === 1 && dy === -1) {\r\n                    this.moveNorthEast();\r\n                } else if (dx === -1 && dy === 1) {\r\n                    this.moveSouthWest();\r\n                } else if (dx === -1 && dy === -1) {\r\n                    this.moveNorthWest();\r\n                }\r\n            }\r\n\r\n            if(this.path[0].x == this.currentNode.x && this.path[0].y == this.currentNode.y) {\r\n                this.path.splice(0, 1)\r\n            }\r\n        }\r\n\r\n        this.xLeft = this.xPos;\r\n        this.xRight = this.xPos + this.size;\r\n        this.yTop = this.yPos;\r\n        this.yBottom = this.yPos + this.size;\r\n    }\r\n\r\n    public override shoot(playerTank: Tank): void {\r\n        const availableAmmunitionIndex = this.ammunition.findIndex(ammunition => ammunition.isDestroyed)\r\n        if (availableAmmunitionIndex !== -1) {\r\n            this.ammunition[availableAmmunitionIndex].reload(this.xPos + (this.size / 2), this.yPos + (this.size / 2), this.aimAngle, true, this.canvasWidth, this.canvasHeight);\r\n            let willHitPlayerTank: boolean = this.ammunition[availableAmmunitionIndex].willHitPlayerTank(this.obstacleCanvas, playerTank);\r\n            if (willHitPlayerTank) {\r\n                this.ammunition[availableAmmunitionIndex].isDestroyed = false;\r\n            }\r\n        }\r\n        return;\r\n    }\r\n\r\n    public override aim(mouseXPos: number, mouseYpos: number, playerTank: Tank): void {\r\n        if (this.isDestroyed) {\r\n            return;\r\n        }\r\n\r\n        let dy: number;\r\n        let dx: number;\r\n        dx = playerTank.xPos + (playerTank.size / 2) - this.xPos - this.tankMidpoint;\r\n        dy = playerTank.yPos + (playerTank.size / 2) - this.yPos - this.tankMidpoint;\r\n        let theta = Math.atan2(dy, dx);\r\n        if (theta < 0) {\r\n            theta += 2 * Math.PI;\r\n        }\r\n        this.aimAngle = theta;\r\n    }\r\n}\r\n\r\nexport class DefaultPlayerTank extends PlayerTank {\r\n    constructor(canvas: HTMLCanvasElement, xPos: number, yPos: number, obstacleCanvas: ObstacleCanvas) {\r\n        let defaultPlayerTankSpeed: number = 2;\r\n        let defaultPlayerTankSize: number = 30;\r\n        let defaultPlayerTankColor: string = '#6384a1';\r\n        let ammunition: Ammunition[] = [\r\n            new PlayerAmmunition(0, 0, 0, 0, 0, true),\r\n            new PlayerAmmunition(0, 0, 0, 0, 0, true),\r\n            new PlayerAmmunition(0, 0, 0, 0, 0, true),\r\n            new PlayerAmmunition(0, 0, 0, 0, 0, true),\r\n            new PlayerAmmunition(0, 0, 0, 0, 0, true),\r\n        ]\r\n        super(canvas, new AdjustingCustomColorReticule(defaultPlayerTankSize, defaultPlayerTankColor, canvas.width), xPos, yPos, defaultPlayerTankSpeed, defaultPlayerTankSize, defaultPlayerTankColor, obstacleCanvas, ammunition);\r\n    }\r\n}\r\n","import { Obstacle } from './Obstacle';\r\n\r\nexport class ObstacleCanvas {\r\n    private obstacleCanvas: HTMLCanvasElement;\r\n    public obstacles: Obstacle[] = [];\r\n    public width: number;\r\n    public height: number;\r\n\r\n    constructor(obstacleCanvasSelector: string, width: number, height: number, obstacles: Obstacle[]) {\r\n        this.width = width;\r\n        this.height = height;\r\n        this.obstacles = obstacles;\r\n        window.addEventListener('resize', this.resizeCanvas.bind(this));\r\n        this.obstacleCanvas = document.querySelector(obstacleCanvasSelector) as HTMLCanvasElement\r\n        this.obstacleCanvas.width = width;\r\n        this.obstacleCanvas.height = height;\r\n        obstacles.forEach(obstacle => {\r\n            obstacle.draw(this.obstacleCanvas.getContext('2d') as CanvasRenderingContext2D);\r\n        });\r\n    }\r\n\r\n    public clearObstacles(): void {\r\n        const context = this.obstacleCanvas.getContext('2d');\r\n        if (context) {\r\n            context.clearRect(0, 0, this.obstacleCanvas.width, this.obstacleCanvas.height);\r\n        }\r\n        this.obstacles = [];\r\n    }\r\n\r\n    public resizeCanvas(): void {\r\n\r\n    }\r\n}\r\n","import { Tank } from \"./Tank\";\r\n\r\nexport class GameRenderer {\r\n    public playerWin: boolean = false;\r\n    public enemyWin: boolean = false;\r\n\r\n    private context: CanvasRenderingContext2D | null;\r\n\r\n    constructor(public canvas: HTMLCanvasElement) {\r\n        const context = this.canvas.getContext('2d');\r\n        if (!context) {\r\n            throw new Error('2d context not supported or canvas element not found.');\r\n        }\r\n        this.context = context;\r\n    }\r\n\r\n    public initializeCanvas(width: number, height: number): void {\r\n        this.canvas.width = width;\r\n        this.canvas.height = height;\r\n    }\r\n\r\n    renderLevelOverScreen() {\r\n        if (!this.context) {\r\n            throw new Error('2d context not supported or canvas element not found.');\r\n        }\r\n\r\n        const message = this.playerWin ? \"Win\" : this.enemyWin ? \"Lose\" : \"\";\r\n        if (message === \"\") {\r\n            return;\r\n        }\r\n\r\n        const fontSize = 100;\r\n        this.context.font = `${fontSize}px Arial`;\r\n        this.context.lineWidth = 5;\r\n        this.context.strokeStyle = this.playerWin ? 'green' : 'red';\r\n        this.context.fillStyle = this.playerWin ? 'green' : 'red';\r\n\r\n        const textWidth = this.context.measureText(message).width;\r\n        const x = (this.canvas.width - textWidth) / 2;\r\n        const y = this.canvas.height / 2 + fontSize / 2;\r\n\r\n        this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n        this.context.strokeText(message, x, y);\r\n        this.context.fillText(message, x, y);\r\n    }\r\n\r\n    render(progress: number, playerTank: Tank, enemyTanks: Tank[]): void {\r\n        if (!this.context) {\r\n            throw new Error('2d context not supported or canvas element not found.');\r\n        }\r\n        this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n\r\n        if (playerTank.isDestroyed) {\r\n            this.enemyWin = true;\r\n        }\r\n        else if (enemyTanks.every(tank => tank.isDestroyed)) {\r\n            this.playerWin = true;\r\n        }\r\n        else {\r\n            playerTank.updatePosition(playerTank)\r\n            playerTank.aim(playerTank.aimXPos, playerTank.aimYPos, playerTank)\r\n            \r\n            enemyTanks.forEach(tank => {\r\n                tank.updatePosition(playerTank)\r\n                tank.aim(tank.aimXPos, tank.aimYPos, playerTank)\r\n                tank.shoot(playerTank)\r\n            });\r\n    \r\n            enemyTanks.forEach(tank => {\r\n                tank.draw(this.context as CanvasRenderingContext2D)\r\n                tank.reticule.draw(this.context as CanvasRenderingContext2D, tank.xPos, tank.yPos, tank.aimXPos, tank.aimYPos);\r\n                tank.ammunition.forEach(ammunition => {\r\n                    if(ammunition.isDestroyed) {\r\n                        return;\r\n                    }\r\n                    ammunition.updatePosition(tank.obstacleCanvas);\r\n                    ammunition.checkPlayerHit(playerTank);\r\n                    ammunition.draw(this.context as CanvasRenderingContext2D);\r\n                });\r\n            });\r\n    \r\n            playerTank.draw(this.context as CanvasRenderingContext2D)\r\n            playerTank.reticule.draw(this.context as CanvasRenderingContext2D, playerTank.xPos, playerTank.yPos, playerTank.aimXPos, playerTank.aimYPos);\r\n            playerTank.ammunition.forEach(ammunition => {\r\n                if(ammunition.isDestroyed) {\r\n                    return;\r\n                }\r\n                ammunition.updatePosition(playerTank.obstacleCanvas);\r\n                ammunition.checkEnemyHit(enemyTanks);\r\n                ammunition.draw(this.context as CanvasRenderingContext2D);\r\n            });\r\n        }\r\n    }\r\n}\r\n","import { Tank, DefaultPlayerTank } from './Tank';\r\nimport { GameRenderer } from './GameRenderer';\r\nimport { ObstacleCanvas } from './ObstacleCanvas';\r\n\r\nexport class GameCanvas {\r\n    public gameRenderer: GameRenderer;\r\n    private playerTank: Tank;\r\n    private enemyTanks: Tank[] = [];\r\n    private lastRenderTime: number;\r\n    public obstacleCanvas: ObstacleCanvas;\r\n    public width: number;\r\n    public height: number;\r\n    public animationFrameID: number | null;\r\n\r\n    constructor(canvasSelector: string, width: number, height: number, obstacleCanvas: ObstacleCanvas) {\r\n        this.width = width;\r\n        this.height = height;\r\n        this.obstacleCanvas = obstacleCanvas;\r\n        this.animationFrameID = null;\r\n        this.gameRenderer = new GameRenderer(document.querySelector(canvasSelector) as HTMLCanvasElement);\r\n        this.gameRenderer.initializeCanvas(this.width, this.height);\r\n        this.lastRenderTime = 0;\r\n        window.addEventListener('resize', this.resizeCanvas.bind(this));\r\n        this.playerTank = new DefaultPlayerTank(this.gameRenderer.canvas, 200, 250, obstacleCanvas);\r\n    }\r\n\r\n    public start() {\r\n        if (!this.animationFrameID) {\r\n            this.animationFrameID = requestAnimationFrame(this.gameLoop.bind(this));\r\n        }\r\n    }\r\n\r\n    public stop() {\r\n        if (this.animationFrameID) {\r\n            cancelAnimationFrame(this.animationFrameID)\r\n            this.animationFrameID = null;\r\n        }\r\n    }\r\n\r\n    private resizeCanvas(): void {\r\n\r\n    }\r\n\r\n    private gameLoop(timeStamp: number): void {\r\n        const progress = timeStamp - this.lastRenderTime;\r\n        this.gameRenderer.render(progress, this.playerTank, this.enemyTanks);\r\n        if (this.gameRenderer.enemyWin || this.gameRenderer.playerWin) {\r\n            this.stop();\r\n            this.obstacleCanvas.clearObstacles();\r\n            this.gameRenderer.renderLevelOverScreen();\r\n        }\r\n        this.lastRenderTime = timeStamp;\r\n        this.animationFrameID = requestAnimationFrame(this.gameLoop.bind(this));\r\n    }\r\n\r\n    public addEnemyTank(tank: Tank): void {\r\n        this.enemyTanks.push(tank);\r\n    }\r\n\r\n    public addPlayerTank(tank: Tank): void {\r\n        this.playerTank = tank;\r\n    }\r\n}\r\n","import { GameCanvas } from \"./GameCanvas\";\r\nimport { ObstacleCanvas } from \"./ObstacleCanvas\";\r\nimport { Tank } from \"./Tank\";\r\n\r\nexport class Node {\r\n    public x: number\r\n    public y: number\r\n    public g: number = 0\r\n    public h: number = 0\r\n    public f: number = 0\r\n    public walkable: boolean = true\r\n    public parent: Node | null = null\r\n\r\n    constructor(x: number, y: number) {\r\n        this.x = x\r\n        this.y = y\r\n    }\r\n}\r\n\r\nexport class NavigationGrid {\r\n    public grid: Node[][] = []\r\n    public gridCellWidth: number = 30\r\n    public gridXLength: number\r\n    public gridYLength: number\r\n    public path: Node[] = [];\r\n    \r\n    constructor(gameCanvas: GameCanvas, obstacleCanvas: ObstacleCanvas) {\r\n        this.gridXLength = Math.floor(gameCanvas.width / this.gridCellWidth);\r\n        this.gridYLength = Math.floor(gameCanvas.height / this.gridCellWidth);\r\n        for (let x = 0; x < this.gridXLength; x++) {\r\n            this.grid[x] = []\r\n            for (let y = 0; y < this.gridYLength; y++) {\r\n                this.grid[x][y] = new Node(x, y);\r\n                let gridXLeft = x * this.gridCellWidth;\r\n                let gridXRight = gridXLeft + this.gridCellWidth;\r\n                let gridYTop = y * this.gridCellWidth;\r\n                let gridYBottom = gridYTop + this.gridCellWidth;\r\n                this.grid[x][y].walkable = !obstacleCanvas.obstacles.some(obs => \r\n                    gridXRight > obs.xLeft &&\r\n                    gridXLeft < obs.xRight &&\r\n                    gridYBottom > obs.yTop &&\r\n                    gridYTop < obs.yBottom\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    reset(): void {\r\n        for (let x = 0; x < this.gridXLength; x++) {\r\n            for (let y = 0; y < this.gridYLength; y++) {\r\n                this.grid[x][y].f = 0;\r\n                this.grid[x][y].g = 0;\r\n                this.grid[x][y].h = 0;\r\n                this.grid[x][y].parent = null;\r\n            }\r\n        }\r\n    }\r\n\r\n    getNodeFromTank(tank: Tank): Node {\r\n        let xGridCoordinate: number = Math.floor((tank.xPos + (tank.size / 2)) / this.gridCellWidth);\r\n        let yGridCoordinate: number = Math.floor((tank.yPos + (tank.size / 2)) / this.gridCellWidth);\r\n\r\n        // Ensure the coordinates are within the grid bounds\r\n        xGridCoordinate = Math.max(0, Math.min(xGridCoordinate, this.gridXLength - 1));\r\n        yGridCoordinate = Math.max(0, Math.min(yGridCoordinate, this.gridYLength - 1));\r\n        return this.grid[xGridCoordinate][yGridCoordinate]\r\n    }\r\n\r\n    getNodeInRadiusOfTarget(target: Node, aggressionFactor: number): Node {\r\n        // Iterate through the grid to find nodes within the specified radius from the target\r\n        const radius = aggressionFactor; // Radius of the circle based on aggression factor\r\n        const candidateNodes: Node[] = [];\r\n        for (let x = 0; x < this.gridXLength; x++) {\r\n            for (let y = 0; y < this.gridYLength; y++) {\r\n                const node = this.grid[x][y];\r\n                const distance = Math.sqrt(Math.pow(node.x - target.x, 2) + Math.pow(node.y - target.y, 2));\r\n                \r\n                // If the node is within the radius and walkable, it's a candidate\r\n                if (distance <= radius + 1 && distance >= radius - 1 && node.walkable) {\r\n                    candidateNodes.push(node);\r\n                }\r\n            }\r\n        }\r\n        const randomIndex = Math.floor(Math.random() * candidateNodes.length);\r\n        return candidateNodes[randomIndex];\r\n    }\r\n\r\n    aStar(start: Node, target: Node): Node[] | null {\r\n        const openSet: Node[] = [start];\r\n        const closedSet: Set<Node> = new Set();\r\n    \r\n        while (openSet.length > 0) {\r\n            let current: Node | null = openSet.sort((a, b) => a.f - b.f)[0];\r\n\r\n            if (current.x === target.x && current.y === target.y) {\r\n                let path = [];\r\n                while (current !== null) {\r\n                    path.unshift(current);\r\n                    current = current.parent;\r\n                }\r\n                return path;\r\n            }\r\n\r\n            openSet.splice(openSet.indexOf(current), 1);\r\n            closedSet.add(current)\r\n    \r\n            let neighbors = this.getWalkableNeighbors(current);\r\n    \r\n            for (let neighbor of neighbors) {\r\n                if (closedSet.has(neighbor)) {\r\n                    continue;\r\n                }\r\n\r\n                let tentativeG = current.g + ((neighbor.x - current.x === 0 || neighbor.y - current.y === 0) ? 1 : Math.SQRT2);\r\n                if (!openSet.includes(neighbor)) {\r\n                    openSet.push(neighbor);\r\n                } else if (tentativeG >= neighbor.g) {\r\n                    continue;\r\n                }\r\n                neighbor.parent = current;\r\n                neighbor.g = tentativeG;\r\n                neighbor.h = Math.round(Math.sqrt(Math.pow((neighbor.x - target.x), 2) + Math.pow((neighbor.y - target.y), 2)))\r\n                neighbor.f = neighbor.g + neighbor.h\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    \r\n    getWalkableNeighbors(node: Node): Node[] {\r\n        // Get the 8 nodes surrounding the current only if its walkable\r\n        let neighbors: Node[] = [];\r\n        for (let dx = -1; dx <= 1; dx++) {\r\n            for (let dy = -1; dy <= 1; dy++) {\r\n                if (dx === 0 && dy === 0) {\r\n                    continue;\r\n                }\r\n    \r\n                let x = node.x + dx;\r\n                let y = node.y + dy;\r\n    \r\n                if (x >= 0 && y >= 0 && x < this.gridXLength && y < this.gridYLength && this.grid[x][y].walkable) {\r\n                    neighbors.push(this.grid[x][y]);\r\n                }\r\n            }\r\n        }\r\n        return neighbors;\r\n    }\r\n}","import { Obstacle } from \"./Obstacle\";\r\nimport { StationaryTank, StationaryRandomAimTank, SimpleMovingTank, DefaultPlayerTank } from \"./Tank\";\r\nimport { Ammunition, BasicAIAmmunition, SuperAIAmmunition } from \"./Ammunition\";\r\nimport { ObstacleCanvas } from \"./ObstacleCanvas\";\r\nimport { GameCanvas } from \"./GameCanvas\";\r\nimport { NavigationGrid } from \"./NavigationGrid\";\r\n\r\nexport class Level {\r\n    public gameCanvas: GameCanvas\r\n    public obstacleCanvas: ObstacleCanvas\r\n    public canvasWidth: number = 1000;\r\n    public canvasHeight: number = 500;\r\n\r\n    constructor(obstacleCanvas: ObstacleCanvas) {\r\n        this.obstacleCanvas = obstacleCanvas;\r\n        this.gameCanvas = new GameCanvas('#game-canvas', this.canvasWidth, this.canvasHeight, obstacleCanvas)\r\n    }\r\n\r\n    public stop() {\r\n        this.gameCanvas.stop();\r\n    }\r\n\r\n    public start() {\r\n        this.gameCanvas.start();\r\n    }\r\n}\r\n\r\nexport class Level1 extends Level {\r\n    constructor() {\r\n        let obs: Obstacle = new Obstacle(600, 100, 40, 300);\r\n        const obstacleCanvas = new ObstacleCanvas('#obstacle-canvas', 1000, 500, [obs]);\r\n        super(obstacleCanvas)\r\n        const stationaryTank = new StationaryTank(this.gameCanvas.gameRenderer.canvas, 900, 240, obstacleCanvas);\r\n        this.gameCanvas.addEnemyTank(stationaryTank);\r\n\r\n        const playerTank = new DefaultPlayerTank(this.gameCanvas.gameRenderer.canvas, 200, 250, obstacleCanvas);\r\n        this.gameCanvas.addPlayerTank(playerTank);\r\n    }\r\n}\r\n\r\nexport class Level2 extends Level {\r\n    constructor() {\r\n        let obs: Obstacle = new Obstacle(600, 150, 40, 250);\r\n        const obstacleCanvas = new ObstacleCanvas('#obstacle-canvas', 1000, 500, [obs]);\r\n        super(obstacleCanvas)\r\n\r\n        const stationaryTank1 = new StationaryTank(this.gameCanvas.gameRenderer.canvas, 800, 100, obstacleCanvas);\r\n        const stationaryTank2 = new StationaryTank(this.gameCanvas.gameRenderer.canvas, 900, 240, obstacleCanvas);\r\n        const stationaryTank3 = new StationaryTank(this.gameCanvas.gameRenderer.canvas, 800, 400, obstacleCanvas);\r\n        this.gameCanvas.addEnemyTank(stationaryTank1);\r\n        this.gameCanvas.addEnemyTank(stationaryTank2);\r\n        this.gameCanvas.addEnemyTank(stationaryTank3);\r\n\r\n        const playerTank = new DefaultPlayerTank(this.gameCanvas.gameRenderer.canvas, 200, 250, obstacleCanvas);\r\n        this.gameCanvas.addPlayerTank(playerTank);\r\n    }\r\n}\r\n\r\nexport class Level3 extends Level {\r\n    constructor() {\r\n        let obs: Obstacle = new Obstacle(100, 100, 200, 100);\r\n        let obs2: Obstacle = new Obstacle(700, 100, 30, 100);\r\n        let obs3: Obstacle = new Obstacle(700, 350, 30, 100);\r\n        const obstacleCanvas = new ObstacleCanvas('#obstacle-canvas', 1000, 500, [obs, obs2, obs3]);\r\n        super(obstacleCanvas)\r\n        let superAmmo: Ammunition[] = [\r\n            new SuperAIAmmunition(0, 0, 0, 0, 0, true)\r\n        ]\r\n        const aiTank = new StationaryRandomAimTank(this.gameCanvas.gameRenderer.canvas, 800, 300, obstacleCanvas, superAmmo);\r\n        this.gameCanvas.addEnemyTank(aiTank);\r\n\r\n        const playerTank = new DefaultPlayerTank(this.gameCanvas.gameRenderer.canvas, 200, 250, obstacleCanvas);\r\n        this.gameCanvas.addPlayerTank(playerTank);\r\n    }\r\n}\r\n\r\nexport class Level4 extends Level {\r\n    constructor() {\r\n        let obs: Obstacle = new Obstacle(250, 100, 600, 40);\r\n        let obs2: Obstacle = new Obstacle(100, 350, 600, 40);\r\n        const obstacleCanvas = new ObstacleCanvas('#obstacle-canvas', 1000, 500, [obs, obs2]);\r\n        super(obstacleCanvas)\r\n        let basicAmmo: Ammunition[] = [\r\n            new BasicAIAmmunition(0, 0, 0, 0, 0, true)\r\n        ]\r\n        let navigationGrid: NavigationGrid = new NavigationGrid(this.gameCanvas, this.obstacleCanvas)\r\n        const aiTank3 = new SimpleMovingTank(this.gameCanvas.gameRenderer.canvas, 900, 50, obstacleCanvas, basicAmmo, navigationGrid);\r\n        this.gameCanvas.addEnemyTank(aiTank3);\r\n\r\n        const playerTank = new DefaultPlayerTank(this.gameCanvas.gameRenderer.canvas, 50, 450, obstacleCanvas);\r\n        this.gameCanvas.addPlayerTank(playerTank);\r\n    }\r\n}\r\n\r\nexport class Level5 extends Level {\r\n    constructor() {\r\n        let obs: Obstacle = new Obstacle(100, 100, 200, 100);\r\n        let obs2: Obstacle = new Obstacle(700, 100, 30, 100);\r\n        let obs3: Obstacle = new Obstacle(700, 350, 30, 100);\r\n        const obstacleCanvas = new ObstacleCanvas('#obstacle-canvas', 1000, 500, [obs, obs2, obs3]);\r\n        super(obstacleCanvas)\r\n        let basicAmmo: Ammunition[] = [\r\n            new BasicAIAmmunition(0, 0, 0, 0, 0, true)\r\n        ]\r\n        let superAmmo: Ammunition[] = [\r\n            new SuperAIAmmunition(0, 0, 0, 0, 0, true)\r\n        ]\r\n        let navigationGrid: NavigationGrid = new NavigationGrid(this.gameCanvas, this.obstacleCanvas)\r\n        const aiTank3 = new SimpleMovingTank(this.gameCanvas.gameRenderer.canvas, 800, 300, obstacleCanvas, basicAmmo, navigationGrid);\r\n        const aiTank = new StationaryRandomAimTank(this.gameCanvas.gameRenderer.canvas, 800, 100, obstacleCanvas, superAmmo);\r\n        const aiTank2 = new StationaryTank(this.gameCanvas.gameRenderer.canvas, 800, 200, obstacleCanvas);\r\n        this.gameCanvas.addEnemyTank(aiTank3);\r\n        this.gameCanvas.addEnemyTank(aiTank);\r\n        this.gameCanvas.addEnemyTank(aiTank2);\r\n\r\n        const playerTank = new DefaultPlayerTank(this.gameCanvas.gameRenderer.canvas, 200, 250, obstacleCanvas);\r\n        this.gameCanvas.addPlayerTank(playerTank);\r\n    }\r\n}\r\n\r\n","import './css/style.css';\r\nimport './assets/computer.ico';\r\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\r\nimport '../node_modules/bootstrap/dist/js/bootstrap.min.js';\r\n\r\nimport { Level1 } from './game/Level';\r\nimport { LevelSelector } from './ui/LevelSelector';\r\n\r\nconst levelSelector = new LevelSelector(5);\r\n\r\nlevelSelector.startActiveLevel();","import * as d3 from 'd3';\r\nimport { Level, Level1, Level2, Level3, Level4, Level5 } from '../game/Level';\r\n\r\nexport class LevelSelector {\r\n    private levels: number;\r\n    private activeLevelNumber: number;\r\n    private activeLevel: Level\r\n    private sliderWidth: number = Math.min(window.innerWidth * 0.8, 600); // Responsive width\r\n\r\n    constructor(levels: number) {\r\n        this.levels = levels;\r\n        this.activeLevelNumber = 1;\r\n        this.activeLevel = new Level1()\r\n        this.createSlider();\r\n        this.createJumbotron();\r\n    }\r\n\r\n    public startActiveLevel() {\r\n        this.activeLevel.stop()\r\n        switch (this.activeLevelNumber) {\r\n            case 1:\r\n                this.activeLevel = new Level1()\r\n                break;\r\n            case 2:\r\n                this.activeLevel = new Level2()\r\n                break;\r\n            case 3:\r\n                this.activeLevel = new Level3()\r\n                break;\r\n            case 4:\r\n                this.activeLevel = new Level4()\r\n                break;\r\n            case 5:\r\n                this.activeLevel = new Level5()\r\n                break;\r\n            default:\r\n                this.activeLevel = new Level1()\r\n                break;\r\n        }\r\n        this.activeLevel.start();\r\n    }\r\n\r\n    private createSlider(): void {\r\n        const margin: { top: number; right: number; bottom: number; left: number; } = { top: 10, right: 10, bottom: 20, left: 10 };\r\n        const effectiveWidth: number = this.sliderWidth - margin.left - margin.right;\r\n    \r\n        const scale: d3.ScaleLinear<number, number, never> = d3.scaleLinear()\r\n            .domain([1, this.levels])\r\n            .range([0, effectiveWidth])\r\n            .clamp(true);\r\n    \r\n        const svg: d3.Selection<SVGSVGElement, unknown, HTMLElement, any> = d3.select('#slider').append('svg')\r\n            .attr('width', this.sliderWidth)\r\n            .attr('height', 50);\r\n    \r\n        const sliderGroup: d3.Selection<SVGGElement, unknown, HTMLElement, any> = svg.append('g')\r\n            .attr('transform', `translate(${margin.left}, 30)`);\r\n    \r\n        sliderGroup.append('g')\r\n            .call(d3.axisBottom(scale).ticks(this.levels).tickFormat(d3.format('1')));\r\n    \r\n        const handle: d3.Selection<SVGCircleElement, unknown, HTMLElement, any> = sliderGroup.append('circle')\r\n            .attr('cx', scale(this.activeLevelNumber))\r\n            .attr('cy', -10)\r\n            .attr('r', 10)\r\n            .style('fill', 'red')\r\n            .style('cursor', 'ew-resize');\r\n        const dragHandler: d3.DragBehavior<SVGCircleElement, unknown, unknown> = d3.drag<SVGCircleElement, unknown>()\r\n            .on('drag', (event) => {\r\n                const x = event.x - margin.left;  // Adjusting for the left margin\r\n                const level = Math.round(scale.invert(x));\r\n                handle.attr('cx', scale(level));\r\n                this.updateActiveLevel(level);\r\n            });\r\n    \r\n        handle.call(dragHandler);\r\n    }\r\n\r\n    private createJumbotron(): void {\r\n        const jumbotron: d3.Selection<d3.BaseType, unknown, HTMLElement, any> = d3.select('#jumbotron');\r\n        for (let i = 1; i <= this.levels; i++) {\r\n            const box: d3.Selection<HTMLDivElement, unknown, HTMLElement, any> = jumbotron.append('div')\r\n                .attr('class', 'jumbotron-box inactive')\r\n                .on('click', () => this.updateActiveLevel(i));\r\n\r\n            // Example of how you can append an SVG to a jumbotron box.\r\n            const svg: d3.Selection<SVGSVGElement, unknown, HTMLElement, any> = box.append('svg')\r\n                .attr('width', '100%')\r\n                .attr('height', '100%');\r\n\r\n            svg.append('rect') // Placeholder for actual SVG content.\r\n                .attr('width', '100%')\r\n                .attr('height', '100%')\r\n                .attr('fill', 'transparent');\r\n            svg.append('text')\r\n                .attr('x', '50%')\r\n                .attr('y', '50%')\r\n                .attr('dominant-baseline', 'middle')\r\n                .attr('text-anchor', 'middle')\r\n                .text(`Level ${i}`);\r\n        }\r\n\r\n        this.updateActiveLevel(this.activeLevelNumber);\r\n    }\r\n\r\n    private updateActiveLevel(level: number): void {\r\n        this.activeLevelNumber = level;\r\n        d3.selectAll('.jumbotron-box')\r\n            .classed('active', (_, i) => i + 1 === level)\r\n            .classed('inactive', (_, i) => i + 1 !== level);\r\n        d3.select('circle').attr('cx', d3.scaleLinear()\r\n            .domain([1, this.levels])\r\n            .range([0, this.sliderWidth - 20])(level));\r\n        this.startActiveLevel();\r\n    }\r\n}\r\n"],"names":["startX","startY","width","height","this","xLeft","yTop","yBottom","xRight","draw","context","beginPath","rect","fillStyle","fill","theta","speed","maxBounces","canvasWidth","canvasHeight","isDestroyed","xPos","yPos","xVelocity","Math","cos","yVelocity","sin","bounces","tankDestroyAudio","Audio","updatePosition","obstacleCanvas","obstacles","forEach","obstacle","fromLeft","abs","fromRight","fromTop","fromBottom","minDistance","min","checkEnemyHit","enemyTanks","enemyTank","play","console","log","checkPlayerHit","playerTank","arc","PI","lineWidth","strokeStyle","stroke","closePath","reload","willHitPlayerTank","predictedXPosition","predictedYPosition","predictedXVelocity","predictedYVelocity","predictedBounces","Ammunition","dashPattern","color","renderReticule","tankSize","reticuleWidth","tankXPos","tankYPos","mouseXPos","mouseYpos","setLineDash","moveTo","lineTo","Reticule","maxReticuleLength","tankXPosition","tankYPosition","mouseXPosition","mouseYPosition","xDist","yDist","distanceToMaxDistanceRatio","sqrt","pow","dashLength","spaceLength","xLength","Direction","canvas","reticule","size","ammunition","gunBarrellWidth","twoPi","lastDirectionMoved","UNKNOWN","wasLastMoveBlocked","consecutiveDirectionMoves","keyStates","ArrowUp","ArrowDown","ArrowLeft","ArrowRight","w","a","s","d","W","A","S","D","tankMidpoint","maxAmmunition","length","aimAngle","canvasRect","getBoundingClientRect","xOffset","left","yOffset","top","aimXPos","aimYPos","fillRect","lineJoin","strokeRect","endX","endY","up","right","moveNorthEast","moveNorthWest","down","moveSouthEast","moveSouthWest","moveNorth","moveSouth","moveWest","moveEast","aim","dy","dx","atan2","shoot","moveInLastDirectionMoved","moveInCardinalDirection","getRandomDirection","enumValues","Object","keys","map","n","Number","parseInt","filter","isNaN","floor","random","direction","NORTH","SOUTH","EAST","WEST","NORTHEAST","NORTHWEST","SOUTHEAST","SOUTHWEST","values","value","randomIndex","blocked","i","max","blockedNorth","blockedEast","blockedWest","blockedSouth","tankFireAudio","document","addEventListener","event","hasOwnProperty","key","clientX","clientY","availableAmmunitionIndex","findIndex","PlayerAmmunition","Tank","BasicAIAmmunition","NoReticule","setInterval","EnemyTank","aimAngleChangeAmount","getAngleChangeAmount","navigationGrid","aggressionFactor","path","pathRecaculationInterval","drawNavigationGrid","currentNode","getNodeFromTank","gridYLength","gridCellWidth","gridXLength","j","index","array","x","y","reset","startNode","targetNode","destinationNode","getNodeInRadiusOfTarget","aStar","randomDirection","randomNumber","splice","defaultPlayerTankColor","AdjustingCustomColorReticule","PlayerTank","obstacleCanvasSelector","window","resizeCanvas","bind","querySelector","getContext","clearObstacles","clearRect","playerWin","enemyWin","Error","initializeCanvas","renderLevelOverScreen","message","font","textWidth","measureText","fontSize","strokeText","fillText","render","progress","every","tank","canvasSelector","animationFrameID","gameRenderer","GameRenderer","lastRenderTime","DefaultPlayerTank","start","requestAnimationFrame","gameLoop","stop","cancelAnimationFrame","timeStamp","addEnemyTank","push","addPlayerTank","g","h","f","walkable","parent","gameCanvas","grid","Node","gridXLeft","gridXRight","gridYTop","gridYBottom","some","obs","xGridCoordinate","yGridCoordinate","target","radius","candidateNodes","node","distance","openSet","closedSet","Set","current","sort","b","unshift","indexOf","add","getWalkableNeighbors","neighbor","has","tentativeG","SQRT2","includes","round","neighbors","GameCanvas","Obstacle","ObstacleCanvas","stationaryTank","StationaryTank","Level","stationaryTank1","stationaryTank2","stationaryTank3","obs2","obs3","superAmmo","SuperAIAmmunition","aiTank","StationaryRandomAimTank","basicAmmo","NavigationGrid","aiTank3","SimpleMovingTank","aiTank2","levels","sliderWidth","innerWidth","activeLevelNumber","activeLevel","Level1","createSlider","createJumbotron","startActiveLevel","Level2","Level3","Level4","Level5","margin","effectiveWidth","scale","domain","range","clamp","sliderGroup","append","attr","call","ticks","tickFormat","handle","style","dragHandler","on","level","invert","updateActiveLevel","jumbotron","svg","text","classed","_"],"sourceRoot":""}