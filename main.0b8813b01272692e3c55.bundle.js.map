{"version":3,"file":"main.0b8813b01272692e3c55.bundle.js","mappings":"8FAAe,I,ufCIf,aAeI,WAAaA,EAAgBC,EAAgBC,EAAeC,EAAeC,EAAoBC,EAAqBC,EAAsBC,GACtIC,KAAKC,KAAOT,EACZQ,KAAKE,KAAOT,EACZO,KAAKN,MAAQA,EACbM,KAAKL,MAAQA,EACbK,KAAKG,UAAYC,KAAKC,IAAIL,KAAKN,OAASM,KAAKL,MAC7CK,KAAKM,UAAYF,KAAKG,IAAIP,KAAKN,OAASM,KAAKL,MAC7CK,KAAKQ,QAAU,EACfR,KAAKJ,WAAaA,EAClBI,KAAKH,YAAcA,EACnBG,KAAKF,aAAeA,EACpBE,KAAKD,YAAcA,EACnBC,KAAKS,iBAAmB,IAAIC,MAAM,EACtC,CAgIJ,OA9HI,YAAAC,eAAA,SAAgBC,GAAhB,WACIZ,KAAKC,MAAQD,KAAKG,UAClBH,KAAKE,MAAQF,KAAKM,WAEdN,KAAKC,MAAQ,GAAKD,KAAKC,KAAOD,KAAKH,eACnCG,KAAKG,WAAaH,KAAKG,UACvBH,KAAKQ,YAGLR,KAAKE,MAAQ,GAAKF,KAAKE,KAAOF,KAAKF,gBACnCE,KAAKM,WAAaN,KAAKM,UACvBN,KAAKQ,WAGTI,EAAeC,UAAUC,SAAQ,SAAAC,GAC7B,GAAI,EAAKd,KAAOc,EAASC,OAAS,EAAKf,KAAOc,EAASE,QAAU,EAAKf,KAAOa,EAASG,MAAQ,EAAKhB,KAAOa,EAASI,QAAS,CAC1H,EAAKX,UACL,IAAMY,EAAWhB,KAAKiB,IAAI,EAAKpB,KAAOc,EAASC,OACzCM,EAAYlB,KAAKiB,IAAI,EAAKpB,KAAOc,EAASE,QAC1CM,EAAUnB,KAAKiB,IAAI,EAAKnB,KAAOa,EAASG,MACxCM,EAAapB,KAAKiB,IAAI,EAAKnB,KAAOa,EAASI,SAE3CM,EAAcrB,KAAKsB,IAAIN,EAAUE,EAAWC,EAASC,GAEvDC,IAAgBF,GAClB,EAAKrB,KAAOa,EAASG,KAAO,EAC5B,EAAKZ,WAAa,EAAKA,WACdmB,IAAgBD,GACzB,EAAKtB,KAAOa,EAASI,QAAU,EAC/B,EAAKb,WAAa,EAAKA,WACdmB,IAAgBL,GACzB,EAAKnB,KAAOc,EAASC,MAAQ,EAC7B,EAAKb,WAAa,EAAKA,WACdsB,IAAgBH,IACzB,EAAKrB,KAAOc,EAASE,OAAS,EAC9B,EAAKd,WAAa,EAAKA,UAE3B,CACJ,IAEIH,KAAKQ,QAAUR,KAAKJ,aACpBI,KAAKD,aAAc,EAE3B,EAEA,YAAA4B,cAAA,SAAeC,GAAf,WACIA,EAAWd,SAAQ,SAAAe,GACXA,EAAU9B,aAGV,EAAKE,KAAO4B,EAAUb,OAAS,EAAKf,KAAO4B,EAAUZ,QAAU,EAAKf,KAAO2B,EAAUX,MAAQ,EAAKhB,KAAO2B,EAAUV,UACnH,EAAKpB,aAAc,EACnB8B,EAAU9B,aAAc,EACxB,EAAKU,iBAAiBqB,OACtBC,QAAQC,IAAI,gBAEpB,GACJ,EAEA,YAAAC,eAAA,SAAgBC,GACRA,EAAWnC,aAGXC,KAAKC,KAAOiC,EAAWlB,OAAShB,KAAKC,KAAOiC,EAAWjB,QAAUjB,KAAKE,KAAOgC,EAAWhB,MAAQlB,KAAKE,KAAOgC,EAAWf,UAEvHnB,KAAKD,aAAc,EACnBgC,QAAQC,IAAI,iBAEpB,EAEA,YAAAG,KAAA,SAAMC,GACFA,EAAQC,YACRD,EAAQE,IAAItC,KAAKC,KAAMD,KAAKE,KAAM,EAAG,EAAG,EAAIE,KAAKmC,IACjDH,EAAQI,UAAY,QACpBJ,EAAQK,OACRL,EAAQM,UAAY,EACpBN,EAAQO,YAAc,QACtBP,EAAQQ,SACRR,EAAQS,WACZ,EAEA,YAAAC,OAAA,SAAQtD,EAAgBC,EAAgBC,EAAeK,EAAsBF,EAAqBC,GAC9FE,KAAKC,KAAOT,EACZQ,KAAKE,KAAOT,EACZO,KAAKN,MAAQA,EACbM,KAAKD,YAAcA,EACnBC,KAAKG,UAAYC,KAAKC,IAAIL,KAAKN,OAASM,KAAKL,MAC7CK,KAAKM,UAAYF,KAAKG,IAAIP,KAAKN,OAASM,KAAKL,MAC7CK,KAAKH,YAAcA,EACnBG,KAAKF,aAAeA,EACpBE,KAAKQ,QAAU,CACnB,EAEA,YAAAuC,kBAAA,SAAkBnC,EAAgCsB,GAM9C,IALA,IAAIc,EAA6BhD,KAAKC,KAClCgD,EAA6BjD,KAAKE,KAClCgD,EAA6BlD,KAAKG,UAClCgD,EAA6BnD,KAAKM,UAClC8C,EAA2B,EACxBA,GAAoBpD,KAAKJ,YAqB5B,GApBwB,GAApBwD,GACArB,QAAQC,IAAI,GAGhBiB,GAAsBE,IADtBH,GAAsBE,IAEI,GAAKF,EAAqBhD,KAAKH,eACrDqD,GAAsBA,EACtBE,MAEAH,GAAsB,GAAKA,EAAqBjD,KAAKF,gBACrDqD,GAAsBA,EACtBC,KAEJxC,EAAeC,UAAUC,SAAQ,SAAAC,GACzBiC,EAAqBjC,EAASC,OAASgC,EAAqBjC,EAASE,QAAUgC,EAAqBlC,EAASG,MAAQ+B,EAAqBlC,EAASI,UACnJiC,IACAF,GAAsBA,EACtBC,GAAsBA,EAE9B,IACIH,EAAqBd,EAAWlB,OAASgC,EAAqBd,EAAWjB,QAAUgC,EAAqBf,EAAWhB,MAAQ+B,EAAqBf,EAAWf,QAC3J,OAAO,EAGf,OAAO,CACX,EACJ,EA5JA,GA8JA,cACI,WAAa3B,EAAgBC,EAAgBC,EAAeG,EAAqBC,EAAsBC,GAGnG,SAAK,UAACP,EAAQC,EAAQC,EADc,EADK,EAEuCG,EAAaC,EAAcC,IAAY,IAC3H,CACJ,OANsC,OAMtC,EANA,CAAsCsD,GAQtC,cACI,WAAa7D,EAAgBC,EAAgBC,EAAeG,EAAqBC,EAAsBC,GAGnG,SAAK,UAACP,EAAQC,EAAQC,EADe,GADK,EAEwCG,EAAaC,EAAcC,IAAY,IAC7H,CACJ,OANuC,OAMvC,EANA,CAAuCsD,GAQvC,cACI,WAAa7D,EAAgBC,EAAgBC,EAAeG,EAAqBC,EAAsBC,GAGnG,SAAK,UAACP,EAAQC,EAAQC,EADe,GADK,EAEwCG,EAAaC,EAAcC,IAAY,IAC7H,CACJ,OANuC,OAMvC,EANA,CAAuCsD,G,0dClLvC,aAOI,WAAaC,EAA+BC,EAAeC,EAAyBC,GAF1E,KAAAC,cAAwB,EAG9B1D,KAAKuD,MAAQA,EACbvD,KAAKsD,YAAcA,EACnBtD,KAAKwD,eAAiBA,EACtBxD,KAAKyD,SAAWA,CACpB,CAaJ,OAXW,YAAAtB,KAAP,SAAYC,EAAmCuB,EAAkBC,EAAkBC,EAAmBC,GAC9F9D,KAAKwD,iBACLpB,EAAQO,YAAc3C,KAAKuD,MAC3BnB,EAAQ2B,YAAY/D,KAAKsD,aACzBlB,EAAQC,YACRD,EAAQ4B,OAAOL,EAAY3D,KAAKyD,SAAW,EAAIG,EAAY5D,KAAKyD,SAAW,GAC3ErB,EAAQ6B,OAAOJ,EAAWC,GAC1B1B,EAAQM,UAAY1C,KAAK0D,cACzBtB,EAAQQ,SAEhB,EACJ,EAzBA,GA2BA,cACI,aACI,SAAK,UAAC,CAAC,EAAG,GAAI,QAAQ,EAAO,IAAE,IACnC,CACJ,OAJgC,OAIhC,EAJA,CAAgCsB,GAkBhC,GAZA,YACI,WAAYT,GACR,SAAK,UAAC,CAAC,EAAG,GAAI,QAAQ,EAAMA,IAAS,IACzC,CAHsC,MAI1C,CAJA,CAA0CS,GAM1C,YACI,WAAYT,EAAkBF,GAC1B,SAAK,UAAC,CAAC,EAAG,GAAIA,GAAO,EAAME,IAAS,IACxC,CAHqC,MAIzC,CAJA,CAAyCS,GAMzC,YAGI,WAAaT,EAAkBF,EAAeY,GAC1C,QAAK,UAAC,CAAC,EAAG,GAAIZ,GAAO,EAAME,IAAS,K,OACpC,EAAKU,kBAAoBA,E,CAC7B,CAiCJ,OAvCkD,OAQrC,YAAAhC,KAAT,SAAcC,EAAmCgC,EAAuBC,EAAuBC,EAAwBC,GACnH,IAAMC,EAAQF,EAAiBF,EACzBK,EAAQF,EAAiBF,EAEzBK,EADWtE,KAAKuE,KAAKvE,KAAKwE,IAAIJ,EAAO,GAAKpE,KAAKwE,IAAIH,EAAO,IAClBzE,KAAKmE,kBAE/CU,EAA0C,GAA7BH,EAAkC,EAC/CI,EAAkD,IAFZ,EAAIJ,GAEa,EAE3D,GAAI1E,KAAKwD,eAAgB,CACrBpB,EAAQO,YAAc3C,KAAKuD,MAC3BnB,EAAQ2B,YAAY,CAACc,EAAYC,IACjC1C,EAAQC,YACRD,EAAQ4B,OAAOI,EAAiBpE,KAAKyD,SAAW,EAAIY,EAAiBrE,KAAKyD,SAAW,GACrFrB,EAAQ6B,OAAOK,EAAgBC,GAC/BnC,EAAQM,UAAY1C,KAAK0D,cACzBtB,EAAQQ,SAERR,EAAQ2B,YAAY,IACpB,IAAIgB,EAAU,GACd3C,EAAQC,YACRD,EAAQ4B,OAAOM,EAAiBS,EAASR,EAAiBQ,GAC1D3C,EAAQ6B,OAAOK,EAAiBS,EAASR,EAAiBQ,GAC1D3C,EAAQQ,SAERR,EAAQC,YACRD,EAAQ4B,OAAOM,EAAiBS,EAASR,EAAiBQ,GAC1D3C,EAAQ6B,OAAOK,EAAiBS,EAASR,EAAiBQ,GAC1D3C,EAAQQ,QACZ,CACJ,EACJ,EAvCA,CAAkDsB,I,qgBCvClD,aA2CI,WAAYc,EAA2BC,EAAoBhF,EAAcC,EAAcP,EAAeuF,EAAc3B,EAAe3C,EAAgCuE,GA/B5J,KAAAC,gBAA0B,EAC1B,KAAArF,aAAuB,EAEvB,KAAAsF,MAAgB,EAAIjF,KAAKmC,GAEzB,KAAA+C,UAAuB,CAC1BC,SAAS,EACTC,WAAW,EACXC,WAAW,EACXC,YAAY,EACZC,GAAG,EACHC,GAAG,EACHC,GAAG,EACHC,GAAG,EACHC,GAAG,EACHC,GAAG,EACHC,GAAG,EACHC,GAAG,GAQA,KAAAf,WAA2B,GAO9BnF,KAAKiF,SAAWA,EAChBjF,KAAKC,KAAOA,EACZD,KAAKE,KAAOA,EACZF,KAAKgB,MAAQf,EACbD,KAAKiB,OAAShB,EAAOiF,EACrBlF,KAAKkB,KAAOhB,EACZF,KAAKmB,QAAUjB,EAAOgF,EACtBlF,KAAKL,MAAQA,EACbK,KAAKkF,KAAOA,EACZlF,KAAKuD,MAAQA,EACbvD,KAAKH,YAAcmF,EAAOmB,MAC1BnG,KAAKF,aAAekF,EAAOoB,OAC3BpG,KAAKY,eAAiBA,EACtBZ,KAAKqG,aAAerG,KAAKkF,KAAO,EAChClF,KAAKmF,WAAaA,EAClBnF,KAAKsG,cAAgBnB,EAAWoB,OAEhCvG,KAAKwG,SAAW,GAChB,IAAMC,EAAsBzB,EAAO0B,wBACnC1G,KAAK2G,QAAUF,EAAWG,KAC1B5G,KAAK6G,QAAUJ,EAAWK,IAE1B9G,KAAK+G,QAAU/B,EAAOmB,MAAQ,EAC9BnG,KAAKgH,QAAUhC,EAAOoB,OAAS,CACnC,CA0QJ,OAxQW,YAAAjE,KAAP,SAAYC,GACR,IAAIpC,KAAKD,YAAT,CAIAqC,EAAQI,UAAYxC,KAAKuD,MACzBnB,EAAQ6E,SAASjH,KAAKC,KAAMD,KAAKE,KAAMF,KAAKkF,KAAMlF,KAAKkF,MAEvD9C,EAAQ2B,YAAY,IACpB3B,EAAQ8E,SAAW,QACnB9E,EAAQO,YAAc,QACtBP,EAAQM,UAAY,EACpBN,EAAQ+E,WAAWnH,KAAKC,KAAMD,KAAKE,KAAMF,KAAKkF,KAAMlF,KAAKkF,MAEzD9C,EAAQC,YACRD,EAAQE,IAAItC,KAAKC,KAAOD,KAAKqG,aAAcrG,KAAKE,KAAOF,KAAKqG,aAAcrG,KAAKkF,KAAO,EAAG,EAAGlF,KAAKqF,OACjGjD,EAAQQ,SAER,IAAMwE,EAAOpH,KAAKC,KAAOD,KAAKqG,aAAgBjG,KAAKC,IAAIL,KAAKwG,UAAYxG,KAAKkF,KACvEmC,EAAOrH,KAAKE,KAAOF,KAAKqG,aAAgBjG,KAAKG,IAAIP,KAAKwG,UAAYxG,KAAKkF,KAC7E9C,EAAQC,YACRD,EAAQ4B,OAAOhE,KAAKC,KAAOD,KAAKqG,aAAcrG,KAAKE,KAAOF,KAAKqG,cAC/DjE,EAAQ6B,OAAOmD,EAAMC,GACrBjF,EAAQM,UAAY1C,KAAKoF,gBACzBhD,EAAQQ,QArBR,CAsBJ,EAEO,YAAAjC,eAAP,WACOX,KAAKsH,MAAQtH,KAAKuH,QACjBvH,KAAKwH,gBAGDxH,KAAKsH,MAAQtH,KAAK4G,OACtB5G,KAAKyH,gBAGDzH,KAAK0H,QAAU1H,KAAKuH,QACxBvH,KAAK2H,gBAGD3H,KAAK0H,QAAU1H,KAAK4G,OACxB5G,KAAK4H,gBAGD5H,KAAKsH,KACTtH,KAAK6H,YAGD7H,KAAK0H,OACT1H,KAAK8H,YAGD9H,KAAK4G,OACT5G,KAAK+H,WAGD/H,KAAKuH,SACTvH,KAAKgI,WAGThI,KAAKgB,MAAQhB,KAAKC,KAClBD,KAAKiB,OAASjB,KAAKC,KAAOD,KAAKkF,KAC/BlF,KAAKkB,KAAOlB,KAAKE,KACjBF,KAAKmB,QAAUnB,KAAKE,KAAOF,KAAKkF,IACpC,EAEO,YAAA+C,IAAP,SAAWpE,EAAmBC,EAAmB5B,GAC7C,IAAIlC,KAAKD,YAAT,CAIA,IAAImI,EACAC,EACJA,EAAKtE,EAAY7D,KAAKC,KAAOD,KAAKqG,aAClC6B,EAAKpE,EAAY9D,KAAKE,KAAOF,KAAKqG,aAClC,IAAI3G,EAAQU,KAAKgI,MAAMF,EAAIC,GACvBzI,EAAQ,IACRA,GAAS,EAAIU,KAAKmC,IAEtBvC,KAAKwG,SAAW9G,CAVhB,CAWJ,EAEO,YAAA2I,MAAP,SAAanG,GAEb,EAEO,YAAA2F,UAAP,WAGI,IADA,IAAIS,GAAmB,EACdC,EAAI,EAAGA,EAAIvI,KAAKY,eAAeC,UAAU0F,OAAQgC,IAAK,CAC3D,IAAMxH,EAAWf,KAAKY,eAAeC,UAAU0H,GAC3CvI,KAAKE,KAAOF,KAAKL,MAAQoB,EAASG,KAAOH,EAASqF,QAAUpG,KAAKE,KAAOa,EAASG,MACjFH,EAASC,MAAQhB,KAAKC,KAAOD,KAAKkF,MAAQlF,KAAKC,KAAOc,EAASE,SAC/DjB,KAAKE,KAAOa,EAASI,QACrBmH,GAAU,EAElB,CAEKA,IACDtI,KAAKE,KAAOE,KAAKoI,IAAIxI,KAAKE,KAAOF,KAAKL,MAAO,GAErD,EAEO,YAAAmI,UAAP,WAEI,IADA,IAAIQ,GAAmB,EACdC,EAAI,EAAGA,EAAIvI,KAAKY,eAAeC,UAAU0F,OAAQgC,IAAK,CAC3D,IAAMxH,EAAWf,KAAKY,eAAeC,UAAU0H,GAC3CvI,KAAKE,KAAOF,KAAKL,MAAQK,KAAKkF,KAAOnE,EAASG,MAAQlB,KAAKE,KAAOa,EAASG,KAAOH,EAASqF,QAC3FrF,EAASC,MAAQhB,KAAKC,KAAOD,KAAKkF,MAAQlF,KAAKC,KAAOc,EAASE,SAC/DjB,KAAKE,KAAOa,EAASG,KAAOlB,KAAKkF,KACjCoD,GAAU,EAElB,CACKA,IACDtI,KAAKE,KAAOE,KAAKsB,IAAI1B,KAAKE,KAAOF,KAAKL,MAAOK,KAAKF,aAAeE,KAAKkF,MAE9E,EAEO,YAAA6C,SAAP,WAEI,IADA,IAAIO,GAAmB,EACdC,EAAI,EAAGA,EAAIvI,KAAKY,eAAeC,UAAU0F,OAAQgC,IAAK,CAC3D,IAAMxH,EAAWf,KAAKY,eAAeC,UAAU0H,GAC3CvI,KAAKC,KAAOD,KAAKL,MAAQoB,EAASE,QAAUjB,KAAKC,KAAOc,EAASC,OACjED,EAASG,KAAOlB,KAAKE,KAAOF,KAAKkF,MAAQlF,KAAKE,KAAOa,EAASI,UAC9DnB,KAAKC,KAAOc,EAASE,OACrBqH,GAAU,EAElB,CACKA,IACDtI,KAAKC,KAAOG,KAAKoI,IAAIxI,KAAKC,KAAOD,KAAKL,MAAO,GAErD,EAEO,YAAAqI,SAAP,WAEI,IADA,IAAIM,GAAmB,EACdC,EAAI,EAAGA,EAAIvI,KAAKY,eAAeC,UAAU0F,OAAQgC,IAAK,CAC3D,IAAMxH,EAAWf,KAAKY,eAAeC,UAAU0H,GAC3CvI,KAAKC,KAAOD,KAAKL,MAAQK,KAAKkF,KAAOnE,EAASC,OAAShB,KAAKC,KAAOc,EAASC,MAAQD,EAASoF,OAC7FpF,EAASG,KAAOlB,KAAKE,KAAOF,KAAKkF,MAAQlF,KAAKE,KAAOa,EAASI,UAC9DnB,KAAKC,KAAOc,EAASC,MAAQhB,KAAKkF,KAClCoD,GAAU,EAElB,CACKA,IACDtI,KAAKC,KAAOG,KAAKsB,IAAI1B,KAAKC,KAAOD,KAAKL,MAAOK,KAAKH,YAAcG,KAAKkF,MAE7E,EAEO,YAAAsC,cAAP,WAGI,IAFA,IAAIiB,GAAwB,EACxBC,GAAuB,EAClBH,EAAI,EAAGA,EAAIvI,KAAKY,eAAeC,UAAU0F,OAAQgC,IAAK,CAC3D,IAAMxH,EAAWf,KAAKY,eAAeC,UAAU0H,GAC3CvI,KAAKE,KAAOF,KAAKL,MAAQoB,EAASG,KAAOH,EAASqF,QAAUpG,KAAKE,KAAOa,EAASG,MACjFH,EAASC,MAAQhB,KAAKC,KAAOD,KAAKkF,MAAQlF,KAAKC,KAAOc,EAASE,SAC/DjB,KAAKE,KAAOa,EAASI,QACrBsH,GAAe,GAEfzI,KAAKC,KAAOD,KAAKL,MAAQK,KAAKkF,KAAOnE,EAASC,OAAShB,KAAKC,KAAOc,EAASC,MAAQD,EAASoF,OAC7FpF,EAASG,KAAOlB,KAAKE,KAAOF,KAAKkF,MAAQlF,KAAKE,KAAOa,EAASI,UAC9DnB,KAAKC,KAAOc,EAASC,MAAQhB,KAAKkF,KAClCwD,GAAc,EAEtB,CAEKD,IACDzI,KAAKE,KAAOE,KAAKoI,IAAIxI,KAAKE,KAAOF,KAAKL,MAAO,IAG5C+I,IACD1I,KAAKC,KAAOG,KAAKsB,IAAI1B,KAAKC,KAAOD,KAAKL,MAAOK,KAAKH,YAAcG,KAAKkF,MAE7E,EAEO,YAAAuC,cAAP,WAII,IAHA,IAAIgB,GAAwB,EACxBE,GAAuB,EAElBJ,EAAI,EAAGA,EAAIvI,KAAKY,eAAeC,UAAU0F,OAAQgC,IAAK,CAC3D,IAAMxH,EAAWf,KAAKY,eAAeC,UAAU0H,GAC3CvI,KAAKE,KAAOF,KAAKL,MAAQoB,EAASG,KAAOH,EAASqF,QAAUpG,KAAKE,KAAOa,EAASG,MACjFH,EAASC,MAAQhB,KAAKC,KAAOD,KAAKkF,MAAQlF,KAAKC,KAAOc,EAASE,SAC/DjB,KAAKE,KAAOa,EAASI,QACrBsH,GAAe,GAEfzI,KAAKC,KAAOD,KAAKL,MAAQoB,EAASE,QAAUjB,KAAKC,KAAOc,EAASC,OACjED,EAASG,KAAOlB,KAAKE,KAAOF,KAAKkF,MAAQlF,KAAKE,KAAOa,EAASI,UAC9DnB,KAAKC,KAAOc,EAASE,OACrB0H,GAAc,EAEtB,CAEKF,IACDzI,KAAKE,KAAOE,KAAKoI,IAAIxI,KAAKE,KAAOF,KAAKL,MAAO,IAE5CgJ,IACD3I,KAAKC,KAAOG,KAAKoI,IAAIxI,KAAKC,KAAOD,KAAKL,MAAO,GAErD,EAEO,YAAAgI,cAAP,WAGI,IAFA,IAAIiB,GAAwB,EACxBF,GAAuB,EAClBH,EAAI,EAAGA,EAAIvI,KAAKY,eAAeC,UAAU0F,OAAQgC,IAAK,CAC3D,IAAMxH,EAAWf,KAAKY,eAAeC,UAAU0H,GAC3CvI,KAAKE,KAAOF,KAAKL,MAAQK,KAAKkF,KAAOnE,EAASG,MAAQlB,KAAKE,KAAOa,EAASG,KAAOH,EAASqF,QAC3FrF,EAASC,MAAQhB,KAAKC,KAAOD,KAAKkF,MAAQlF,KAAKC,KAAOc,EAASE,SAC/DjB,KAAKE,KAAOa,EAASG,KAAOlB,KAAKkF,KACjC0D,GAAe,GAEf5I,KAAKC,KAAOD,KAAKL,MAAQK,KAAKkF,KAAOnE,EAASC,OAAShB,KAAKC,KAAOc,EAASC,MAAQD,EAASoF,OAC7FpF,EAASG,KAAOlB,KAAKE,KAAOF,KAAKkF,MAAQlF,KAAKE,KAAOa,EAASI,UAC9DnB,KAAKC,KAAOc,EAASC,MAAQhB,KAAKkF,KAClCwD,GAAc,EAEtB,CAEKE,IACD5I,KAAKE,KAAOE,KAAKsB,IAAI1B,KAAKE,KAAOF,KAAKL,MAAOK,KAAKF,aAAeE,KAAKkF,OAErEwD,IACD1I,KAAKC,KAAOG,KAAKsB,IAAI1B,KAAKC,KAAOD,KAAKL,MAAOK,KAAKH,YAAcG,KAAKkF,MAE7E,EAEO,YAAA0C,cAAP,WAGI,IAFA,IAAIgB,GAAwB,EACxBD,GAAuB,EAClBJ,EAAI,EAAGA,EAAIvI,KAAKY,eAAeC,UAAU0F,OAAQgC,IAAK,CAC3D,IAAMxH,EAAWf,KAAKY,eAAeC,UAAU0H,GAC3CvI,KAAKE,KAAOF,KAAKL,MAAQK,KAAKkF,KAAOnE,EAASG,MAAQlB,KAAKE,KAAOa,EAASG,KAAOH,EAASqF,QAC3FrF,EAASC,MAAQhB,KAAKC,KAAOD,KAAKkF,MAAQlF,KAAKC,KAAOc,EAASE,SAC/DjB,KAAKE,KAAOa,EAASG,KAAOlB,KAAKkF,KACjC0D,GAAe,GAEf5I,KAAKC,KAAOD,KAAKL,MAAQoB,EAASE,QAAUjB,KAAKC,KAAOc,EAASC,OACjED,EAASG,KAAOlB,KAAKE,KAAOF,KAAKkF,MAAQlF,KAAKE,KAAOa,EAASI,UAC9DnB,KAAKC,KAAOc,EAASE,OACrB0H,GAAc,EAEtB,CACKC,IACD5I,KAAKE,KAAOE,KAAKsB,IAAI1B,KAAKE,KAAOF,KAAKL,MAAOK,KAAKF,aAAeE,KAAKkF,OAErEyD,IACD3I,KAAKC,KAAOG,KAAKoI,IAAIxI,KAAKC,KAAOD,KAAKL,MAAO,GAErD,EAEO,YAAA2H,GAAP,WACI,OAAOtH,KAAKsF,UAAUC,SAAWvF,KAAKsF,UAAUK,GAAK3F,KAAKsF,UAAUS,CACxE,EAEO,YAAA2B,KAAP,WACI,OAAO1H,KAAKsF,UAAUE,WAAaxF,KAAKsF,UAAUO,GAAK7F,KAAKsF,UAAUW,CAC1E,EAEO,YAAAW,KAAP,WACI,OAAO5G,KAAKsF,UAAUG,WAAazF,KAAKsF,UAAUM,GAAK5F,KAAKsF,UAAUU,CAC1E,EAEO,YAAAuB,MAAP,WACI,OAAOvH,KAAKsF,UAAUI,YAAc1F,KAAKsF,UAAUQ,GAAK9F,KAAKsF,UAAUY,CAC3E,EACJ,EA9UA,GAgVA,cAGI,WAAYlB,EAA2BC,EAAoBhF,EAAcC,EAAcP,EAAeuF,EAAc3B,EAAe3C,EAAgCuE,GAC/J,QAAK,UAACH,EAAQC,EAAUhF,EAAMC,EAAMP,EAAOuF,EAAM3B,EAAO3C,EAAgBuE,IAAW,K,OACnF,EAAK0D,cAAgB,IAAInI,MAAM,GAE/BoI,SAASC,iBAAiB,WAAW,SAACC,GAC9B,EAAK1D,UAAU2D,eAAeD,EAAME,OACpC,EAAK5D,UAAU0D,EAAME,MAAO,EAEpC,IAEAJ,SAASC,iBAAiB,SAAS,SAACC,GAC5B,EAAK1D,UAAU2D,eAAeD,EAAME,OACpC,EAAK5D,UAAU0D,EAAME,MAAO,EAEpC,IAEAlE,EAAO+D,iBAAiB,aAAa,SAACC,GAClC,EAAKjC,QAAUiC,EAAMG,QAAU,EAAKxC,QACpC,EAAKK,QAAUgC,EAAMI,QAAU,EAAKvC,OACxC,IAEA7B,EAAO+D,iBAAiB,SAAS,SAACC,GAC9B,IAAMK,EAA2B,EAAKlE,WAAWmE,WAAU,SAAAnE,GAAc,OAAAA,EAAWpF,WAAX,KACvC,IAA9BsJ,IACA,EAAKR,cAAc/G,OACnB,EAAKqD,WAAWkE,GAA4B,IAAIE,EAAiB,EAAKtJ,KAAQ,EAAKiF,KAAO,EAAI,EAAKhF,KAAQ,EAAKgF,KAAO,EAAI,EAAKsB,SAAUxB,EAAOmB,MAAOnB,EAAOoB,QAAQ,GAE/K,I,CACJ,CAqBJ,OApDgC,OAiCrB,YAAA6B,IAAP,SAAWpE,EAAmBC,EAAmB5B,GAC7C,IAAIlC,KAAKD,YAAT,CAGA,IAAImI,EACAC,EACJA,EAAKtE,EAAY7D,KAAKC,KAAOD,KAAKqG,aAClC6B,EAAKpE,EAAY9D,KAAKE,KAAOF,KAAKqG,aAClC,IAAI3G,EAAQU,KAAKgI,MAAMF,EAAIC,GACvBzI,EAAQ,IACRA,GAAS,EAAIU,KAAKmC,IAEtBvC,KAAKwG,SAAW9G,CAThB,CAUJ,EAEO,YAAA2I,MAAP,SAAanG,GAGb,EACJ,EApDA,CAAgCsH,GAsDhC,cACI,WAAYxE,EAA2BC,EAAoBhF,EAAcC,EAAcP,EAAeuF,EAAc3B,EAAe3C,EAAgCuE,GAC/J,SAAK,UAACH,EAAQC,EAAUhF,EAAMC,EAAMP,EAAOuF,EAAM3B,EAAO3C,EAAgBuE,IAAW,IACvF,CACJ,OAJ+B,OAI/B,EAJA,CAA+BqE,GAM/B,cACI,WAAYxE,EAA2B/E,EAAcC,EAAcU,GAAnE,WAIQuE,EAA2B,CAC3B,IAAIsE,EAAkB,EAAG,EAAG,EAAG,EAAG,GAAG,I,OAEzC,IAAK,UAACzE,EAAQ,IAAI0E,EAAczJ,EAAMC,EANV,EACD,GACC,UAI4DU,EAAgBuE,IAAW,KACnHwE,aAAY,WACR,IAAI,EAAK5J,YAAT,CAGA,IAAMsJ,EAA2B,EAAKlE,WAAWmE,WAAU,SAAAnE,GAAc,OAAAA,EAAWpF,WAAX,KACvC,IAA9BsJ,IACA,EAAKlE,WAAWkE,GAA4B,IAAII,EAAkB,EAAKxJ,KAAQ,EAAKiF,KAAO,EAAI,EAAKhF,KAAQ,EAAKgF,KAAO,EAAI,EAAKsB,SAAU,EAAK3G,YAAa,EAAKC,cAAc,GAHpL,CAKJ,GAAG,K,CACP,CAqBJ,OAvCoC,OAoBzB,YAAAuI,MAAP,SAAanG,GAEb,EAEO,YAAA+F,IAAP,SAAWpE,EAAmBC,EAAmB5B,GAC7C,IAAIlC,KAAKD,YAAT,CAIA,IAAImI,EACAC,EACJA,EAAKjG,EAAWjC,KAAQiC,EAAWgD,KAAO,EAAKlF,KAAKC,KAAOD,KAAKqG,aAChE6B,EAAKhG,EAAWhC,KAAQgC,EAAWgD,KAAO,EAAKlF,KAAKE,KAAOF,KAAKqG,aAChE,IAAI3G,EAAQU,KAAKgI,MAAMF,EAAIC,GACvBzI,EAAQ,IACRA,GAAS,EAAIU,KAAKmC,IAEtBvC,KAAKwG,SAAW9G,CAVhB,CAWJ,EACJ,EAvCA,CAAoCkK,GAyCpC,cAGI,WAAY5E,EAA2B/E,EAAcC,EAAcU,EAAgCuE,GAAnG,W,OAII,IAAK,UAACH,EAAQ,IAAI0E,EAAczJ,EAAMC,EAHV,EACD,GACC,UAC4DU,EAAgBuE,IAAW,MANhH0E,qBAA+B,E,CAOtC,CAqCJ,OA7C6C,OAUjC,YAAAC,qBAAR,WAII,OAD2B1J,KAAK2J,MAAsB,IAAhB3J,KAAK4J,WADzB,GAGtB,EAEO,YAAA3B,MAAP,SAAanG,GACT,IAAMmH,EAA2BrJ,KAAKmF,WAAWmE,WAAU,SAAAnE,GAAc,OAAAA,EAAWpF,WAAX,KACvC,IAA9BsJ,IACArJ,KAAKmF,WAAWkE,GAA0BvG,OAAO9C,KAAKC,KAAQD,KAAKkF,KAAO,EAAIlF,KAAKE,KAAQF,KAAKkF,KAAO,EAAIlF,KAAKwG,UAAU,EAAMxG,KAAKH,YAAaG,KAAKF,cACtHE,KAAKmF,WAAWkE,GAA0BtG,kBAAkB/C,KAAKY,eAAgBsB,KAE9GlC,KAAKmF,WAAWkE,GAA0BtJ,aAAc,GAIpE,EAEO,YAAAkI,IAAP,SAAWpE,EAAmBC,EAAmB5B,GACzClC,KAAKD,cAGLC,KAAK6J,qBAAuB,GAC5B7J,KAAKwG,UAAY,IACjBxG,KAAK6J,sBAAwB,GAExB7J,KAAK6J,qBAAuB,GACjC7J,KAAKwG,UAAY,IACjBxG,KAAK6J,sBAAwB,GAG7B7J,KAAK6J,qBAAuB7J,KAAK8J,uBAEzC,EACJ,EA7CA,CAA6CF,GA+C7C,cACI,WAAY5E,EAA2B/E,EAAcC,EAAcU,GAC/D,IAEIqJ,EAAiC,UACjC9E,EAA2B,CAC3B,IAAIoE,EAAiB,EAAG,EAAG,EAAG,EAAG,GAAG,GACpC,IAAIA,EAAiB,EAAG,EAAG,EAAG,EAAG,GAAG,GACpC,IAAIA,EAAiB,EAAG,EAAG,EAAG,EAAG,GAAG,GACpC,IAAIA,EAAiB,EAAG,EAAG,EAAG,EAAG,GAAG,GACpC,IAAIA,EAAiB,EAAG,EAAG,EAAG,EAAG,GAAG,IAExC,SAAK,UAACvE,EAAQ,IAAIkF,EATkB,GASkCD,EAAwBjF,EAAOmB,OAAQlG,EAAMC,EAV9E,EACD,GASoI+J,EAAwBrJ,EAAgBuE,IAAW,IAC/N,CACJ,OAduC,OAcvC,EAdA,CAAuCgF,GCxevC,aAGI,WAAmBnF,GAAA,KAAAA,OAAAA,EACf,IAAM5C,EAAUpC,KAAKgF,OAAOoF,WAAW,MACvC,IAAKhI,EACD,MAAM,IAAIiI,MAAM,yDAEpBrK,KAAKoC,QAAUA,CACnB,CA6CJ,OA3CW,YAAAkI,iBAAP,SAAwBnE,EAAeC,GACnCpG,KAAKgF,OAAOmB,MAAQA,EACpBnG,KAAKgF,OAAOoB,OAASA,CACzB,EAEA,YAAAmE,OAAA,SAAOC,EAAkBtI,EAAkBN,GAA3C,WACI,IAAK5B,KAAKoC,QACN,MAAM,IAAIiI,MAAM,yDAEpBrK,KAAKoC,QAAQqI,UAAU,EAAG,EAAGzK,KAAKgF,OAAOmB,MAAOnG,KAAKgF,OAAOoB,QAE5DlE,EAAWvB,iBACXuB,EAAW+F,IAAI/F,EAAW6E,QAAS7E,EAAW8E,QAAS9E,GACvDN,EAAWd,SAAQ,SAAA4J,GACfA,EAAK/J,iBACL+J,EAAKzC,IAAIyC,EAAK3D,QAAS2D,EAAK1D,QAAS9E,GACrCwI,EAAKrC,MAAMnG,EACf,IAEAN,EAAWd,SAAQ,SAAA4J,GACfA,EAAKvI,KAAK,EAAKC,SACfsI,EAAKzF,SAAS9C,KAAK,EAAKC,QAAqCsI,EAAKzK,KAAMyK,EAAKxK,KAAMwK,EAAK3D,QAAS2D,EAAK1D,SACtG0D,EAAKvF,WAAWrE,SAAQ,SAAAqE,GACjBA,EAAWpF,cAGdoF,EAAWxE,eAAe+J,EAAK9J,gBAC/BuE,EAAWlD,eAAeC,GAC1BiD,EAAWhD,KAAK,EAAKC,SACzB,GACJ,IAEAF,EAAWC,KAAKnC,KAAKoC,SACrBF,EAAW+C,SAAS9C,KAAKnC,KAAKoC,QAAqCF,EAAWjC,KAAMiC,EAAWhC,KAAMgC,EAAW6E,QAAS7E,EAAW8E,SACpI9E,EAAWiD,WAAWrE,SAAQ,SAAAqE,GACvBA,EAAWpF,cAGdoF,EAAWxE,eAAeuB,EAAWtB,gBACrCuE,EAAWxD,cAAcC,GACzBuD,EAAWhD,KAAK,EAAKC,SACzB,GACJ,EACJ,EAtDA,GCEA,aASI,WAAYuI,EAAwBxE,EAAeC,EAAgBxF,GAN3D,KAAAgB,WAAqB,GAOzB5B,KAAKmG,MAAQA,EACbnG,KAAKoG,OAASA,EACdpG,KAAKY,eAAiBA,EACtBZ,KAAK4K,aAAe,IAAIC,EAAa/B,SAASgC,cAAcH,IAC5D3K,KAAK4K,aAAaN,iBAAiBtK,KAAKmG,MAAOnG,KAAKoG,QACpDpG,KAAK+K,eAAiB,EACtBC,OAAOjC,iBAAiB,SAAU/I,KAAKiL,aAAaC,KAAKlL,OACzDA,KAAKkC,WAAa,IAAIiJ,EAAkBnL,KAAK4K,aAAa5F,OAAQ,IAAK,IAAKpE,GAC5EwK,sBAAsBpL,KAAKqL,SAASH,KAAKlL,MAC7C,CAgBJ,OAdY,YAAAiL,aAAR,WAEA,EAEQ,YAAAI,SAAR,SAAiBC,GACb,IAAMd,EAAWc,EAAYtL,KAAK+K,eAClC/K,KAAK4K,aAAaL,OAAOC,EAAUxK,KAAKkC,WAAYlC,KAAK4B,YACzD5B,KAAK+K,eAAiBO,EACtBF,sBAAsBpL,KAAKqL,SAASH,KAAKlL,MAC7C,EAEO,YAAAuL,aAAP,SAAoBb,GAChB1K,KAAK4B,WAAW4J,KAAKd,EACzB,EACJ,EAnCA,GCJA,aAQI,WAAalL,EAAgBC,EAAgB0G,EAAeC,GACxDpG,KAAKgB,MAAQxB,EACbQ,KAAKkB,KAAOzB,EACZO,KAAKmG,MAAQA,EACbnG,KAAKoG,OAASA,EACdpG,KAAKmB,QAAUnB,KAAKkB,KAAOlB,KAAKoG,OAChCpG,KAAKiB,OAASjB,KAAKgB,MAAQhB,KAAKmG,KACpC,CAQJ,OANI,YAAAhE,KAAA,SAAMC,GACFA,EAAQC,YACRD,EAAQqJ,KAAKzL,KAAKgB,MAAOhB,KAAKkB,KAAMlB,KAAKmG,MAAOnG,KAAKoG,QACrDhE,EAAQI,UAAY,QACpBJ,EAAQK,MACZ,EACJ,EAvBA,GCkBM7B,EAAiB,IChBvB,WAMI,WAAY8K,EAAgCvF,EAAeC,EAAgBvF,GAA3E,WAJO,KAAAA,UAAwB,GAK3Bb,KAAKmG,MAAQA,EACbnG,KAAKoG,OAASA,EACdpG,KAAKa,UAAYA,EACjBmK,OAAOjC,iBAAiB,SAAU/I,KAAKiL,aAAaC,KAAKlL,OACzDA,KAAKY,eAAiBkI,SAASgC,cAAcY,GAC7C1L,KAAKY,eAAeuF,MAAQA,EAC5BnG,KAAKY,eAAewF,OAASA,EAC7BvF,EAAUC,SAAQ,SAAAC,GACdA,EAASoB,KAAK,EAAKvB,eAAewJ,WAAW,MACjD,GACJ,CAKJ,OAHY,YAAAa,aAAR,WAEA,EACJ,EAtBA,GDgBuB,CAAmB,mBAPtB,IACC,IAMoE,CAJrE,IAAIU,EAAS,IAAK,IAAK,IAAK,KAC3B,IAAIA,EAAS,IAAK,IAAK,GAAI,KAC3B,IAAIA,EAAS,IAAK,IAAK,GAAI,OAG1CC,EAAW,IAAIC,EAAW,eARZ,IACC,IAOsDjL,GACrEkL,EAAU,IAAIC,EAAeH,EAAShB,aAAa5F,OAAQ,IAAK,IAAKpE,GAEvEoL,EAA0B,CAC1B,IAAIvC,EAAkB,EAAG,EAAG,EAAG,EAAG,GAAG,IAErCwC,EAA0B,CAC1B,IAAIC,EAAkB,EAAG,EAAG,EAAG,EAAG,GAAG,IAEnCC,EAAS,IAAIC,EAAwBR,EAAShB,aAAa5F,OAAQ,IAAK,IAAKpE,EAAgBqL,GAC7FI,EAAU,IAAID,EAAwBR,EAAShB,aAAa5F,OAAQ,IAAK,IAAKpE,EAAgBoL,GAEpGJ,EAASL,aAAaY,GACtBP,EAASL,aAAaO,GACtBF,EAASL,aAAac,E","sources":["webpack://treads/./src/assets/computer.ico","webpack://treads/./src/game/Ammunition.ts","webpack://treads/./src/game/Reticule.ts","webpack://treads/./src/game/Tank.ts","webpack://treads/./src/game/GameRenderer.ts","webpack://treads/./src/game/GameCanvas.ts","webpack://treads/./src/game/Obstacle.ts","webpack://treads/./src/index.ts","webpack://treads/./src/game/ObstacleCanvas.ts"],"sourcesContent":["export default __webpack_public_path__ + \"assets/computer.ico\";","import { ObstacleCanvas } from \"./ObstacleCanvas\";\r\nimport { Tank } from \"./Tank\";\r\nimport tankDestroy from \"../assets/audio/tankDestroy.mp3\"\r\n\r\nexport class Ammunition {\r\n    public xPos: number;\r\n    public yPos: number;\r\n    public xVelocity: number;\r\n    public yVelocity: number;\r\n    public theta: number;\r\n    public bounces: number;\r\n    public maxBounces: number;\r\n    public speed: number;\r\n    public canvasWidth: number;\r\n    public canvasHeight: number;\r\n    public isDestroyed: boolean;\r\n\r\n    public tankDestroyAudio: HTMLAudioElement;\r\n\r\n    constructor (startX: number, startY: number, theta: number, speed: number, maxBounces: number, canvasWidth: number, canvasHeight: number, isDestroyed: boolean) {\r\n        this.xPos = startX;\r\n        this.yPos = startY;\r\n        this.theta = theta;\r\n        this.speed = speed;\r\n        this.xVelocity = Math.cos(this.theta) * this.speed;\r\n        this.yVelocity = Math.sin(this.theta) * this.speed;\r\n        this.bounces = 0;\r\n        this.maxBounces = maxBounces;\r\n        this.canvasWidth = canvasWidth;\r\n        this.canvasHeight = canvasHeight;\r\n        this.isDestroyed = isDestroyed;\r\n        this.tankDestroyAudio = new Audio(tankDestroy)\r\n    }\r\n\r\n    updatePosition (obstacleCanvas: ObstacleCanvas): void {\r\n        this.xPos += this.xVelocity;\r\n        this.yPos += this.yVelocity;\r\n\r\n        if (this.xPos <= 0 || this.xPos > this.canvasWidth) {\r\n            this.xVelocity = -this.xVelocity;\r\n            this.bounces++;\r\n        }\r\n\r\n        if (this.yPos <= 0 || this.yPos > this.canvasHeight) {\r\n            this.yVelocity = -this.yVelocity;\r\n            this.bounces++;\r\n        }\r\n\r\n        obstacleCanvas.obstacles.forEach(obstacle => {\r\n            if (this.xPos > obstacle.xLeft && this.xPos < obstacle.xRight && this.yPos > obstacle.yTop && this.yPos < obstacle.yBottom) {\r\n              this.bounces++;\r\n              const fromLeft = Math.abs(this.xPos - obstacle.xLeft);\r\n              const fromRight = Math.abs(this.xPos - obstacle.xRight);\r\n              const fromTop = Math.abs(this.yPos - obstacle.yTop);\r\n              const fromBottom = Math.abs(this.yPos - obstacle.yBottom);\r\n          \r\n              const minDistance = Math.min(fromLeft, fromRight, fromTop, fromBottom);\r\n          \r\n              if (minDistance === fromTop) {\r\n                this.yPos = obstacle.yTop - 1;\r\n                this.yVelocity = -this.yVelocity;\r\n              } else if (minDistance === fromBottom) {\r\n                this.yPos = obstacle.yBottom + 1;\r\n                this.yVelocity = -this.yVelocity;\r\n              } else if (minDistance === fromLeft) {\r\n                this.xPos = obstacle.xLeft - 1;\r\n                this.xVelocity = -this.xVelocity;\r\n              } else if (minDistance === fromRight) {\r\n                this.xPos = obstacle.xRight + 1;\r\n                this.xVelocity = -this.xVelocity;\r\n              }\r\n            }\r\n        });\r\n\r\n        if (this.bounces > this.maxBounces) {\r\n            this.isDestroyed = true;\r\n        }\r\n    }\r\n\r\n    checkEnemyHit (enemyTanks: Tank[]): void {\r\n        enemyTanks.forEach(enemyTank => {\r\n            if (enemyTank.isDestroyed) {\r\n                return;\r\n            }\r\n            if (this.xPos > enemyTank.xLeft && this.xPos < enemyTank.xRight && this.yPos > enemyTank.yTop && this.yPos < enemyTank.yBottom) {\r\n                this.isDestroyed = true;\r\n                enemyTank.isDestroyed = true;\r\n                this.tankDestroyAudio.play();\r\n                console.log(\"Enemy hit!!!\");\r\n            }\r\n        })\r\n    }\r\n\r\n    checkPlayerHit (playerTank: Tank): void {\r\n        if (playerTank.isDestroyed) {\r\n            return;\r\n        }\r\n        if (this.xPos > playerTank.xLeft && this.xPos < playerTank.xRight && this.yPos > playerTank.yTop && this.yPos < playerTank.yBottom) {\r\n            // playerTank.isDestroyed = true;\r\n            this.isDestroyed = true;\r\n            console.log(\"Player Hit!!!\");\r\n        }\r\n    }\r\n\r\n    draw (context: CanvasRenderingContext2D): void {\r\n        context.beginPath();\r\n        context.arc(this.xPos, this.yPos, 3, 0, 2 * Math.PI);\r\n        context.fillStyle = 'white';\r\n        context.fill();\r\n        context.lineWidth = 2;\r\n        context.strokeStyle = 'black';\r\n        context.stroke();\r\n        context.closePath();\r\n    }\r\n\r\n    reload (startX: number, startY: number, theta: number, isDestroyed: boolean, canvasWidth: number, canvasHeight: number, ) {\r\n        this.xPos = startX;\r\n        this.yPos = startY;\r\n        this.theta = theta;\r\n        this.isDestroyed = isDestroyed;\r\n        this.xVelocity = Math.cos(this.theta) * this.speed;\r\n        this.yVelocity = Math.sin(this.theta) * this.speed;\r\n        this.canvasWidth = canvasWidth;\r\n        this.canvasHeight = canvasHeight;\r\n        this.bounces = 0;\r\n    }\r\n\r\n    willHitPlayerTank(obstacleCanvas: ObstacleCanvas, playerTank: Tank): boolean {\r\n        let predictedXPosition: number = this.xPos;\r\n        let predictedYPosition: number = this.yPos;\r\n        let predictedXVelocity: number = this.xVelocity;\r\n        let predictedYVelocity: number = this.yVelocity;\r\n        let predictedBounces: number = 0;\r\n        while (predictedBounces <= this.maxBounces) {\r\n            if (predictedBounces == 1) {\r\n                console.log(1);\r\n            }\r\n            predictedXPosition += predictedXVelocity;\r\n            predictedYPosition += predictedYVelocity;\r\n            if (predictedXPosition <= 0 || predictedXPosition > this.canvasWidth) {\r\n                predictedXVelocity = -predictedXVelocity;\r\n                predictedBounces++;\r\n            }\r\n            if (predictedYPosition <= 0 || predictedYPosition > this.canvasHeight) {\r\n                predictedYVelocity = -predictedYVelocity;\r\n                predictedBounces++;\r\n            }\r\n            obstacleCanvas.obstacles.forEach(obstacle => {\r\n                if (predictedXPosition > obstacle.xLeft && predictedXPosition < obstacle.xRight && predictedYPosition > obstacle.yTop && predictedYPosition < obstacle.yBottom) {\r\n                    predictedBounces++;\r\n                    predictedXVelocity = -predictedXVelocity;\r\n                    predictedYVelocity = -predictedYVelocity;\r\n                }\r\n            });\r\n            if (predictedXPosition > playerTank.xLeft && predictedXPosition < playerTank.xRight && predictedYPosition > playerTank.yTop && predictedYPosition < playerTank.yBottom) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n}\r\n\r\nexport class PlayerAmmunition extends Ammunition {\r\n    constructor (startX: number, startY: number, theta: number, canvasWidth: number, canvasHeight: number, isDestroyed: boolean) {\r\n        let playerAmmunitionMaxBounces: number = 1;\r\n        let playerAmmunitionSpeed: number = 5;\r\n        super(startX, startY, theta, playerAmmunitionSpeed, playerAmmunitionMaxBounces, canvasWidth, canvasHeight, isDestroyed);\r\n    }\r\n}\r\n\r\nexport class BasicAIAmmunition extends Ammunition {\r\n    constructor (startX: number, startY: number, theta: number, canvasWidth: number, canvasHeight: number, isDestroyed: boolean) {\r\n        let BasicAIAmmunitionMaxBounces: number = 0;\r\n        let BasicAIAmmunitionSpeed: number = 10;\r\n        super(startX, startY, theta, BasicAIAmmunitionSpeed, BasicAIAmmunitionMaxBounces, canvasWidth, canvasHeight, isDestroyed);\r\n    }\r\n}\r\n\r\nexport class SuperAIAmmunition extends Ammunition {\r\n    constructor (startX: number, startY: number, theta: number, canvasWidth: number, canvasHeight: number, isDestroyed: boolean) {\r\n        let superAIAmmunitionMaxBounces: number = 2;\r\n        let superAIAmmunitionSpeed: number = 11;\r\n        super(startX, startY, theta, superAIAmmunitionSpeed, superAIAmmunitionMaxBounces, canvasWidth, canvasHeight, isDestroyed);\r\n    }\r\n}\r\n","export class Reticule {\r\n    protected color: string;\r\n    protected dashPattern: [number, number]; // [dashLengthInPixels, spaceLengthInPixels]\r\n    protected renderReticule: boolean;\r\n    protected tankSize: number;\r\n    protected reticuleWidth: number = 5;\r\n\r\n    constructor (dashPattern: [number, number], color: string, renderReticule: boolean, tankSize: number) {\r\n        this.color = color;\r\n        this.dashPattern = dashPattern;\r\n        this.renderReticule = renderReticule;\r\n        this.tankSize = tankSize;\r\n    }\r\n\r\n    public draw(context: CanvasRenderingContext2D, tankXPos: number, tankYPos: number, mouseXPos: number, mouseYpos: number): void {\r\n        if (this.renderReticule) {\r\n            context.strokeStyle = this.color;\r\n            context.setLineDash(this.dashPattern);\r\n            context.beginPath();\r\n            context.moveTo(tankXPos + (this.tankSize / 2), tankYPos + (this.tankSize / 2));\r\n            context.lineTo(mouseXPos, mouseYpos);\r\n            context.lineWidth = this.reticuleWidth\r\n            context.stroke();\r\n        }\r\n    }\r\n}\r\n\r\nexport class NoReticule extends Reticule {\r\n    constructor() {\r\n        super([0, 0], 'blue', false, 0);\r\n    }\r\n}\r\n\r\nexport class SimplePlayerReticule extends Reticule {\r\n    constructor(tankSize: number) {\r\n        super([5, 5], 'blue', true, tankSize);\r\n    }\r\n}\r\n\r\nexport class CustomColorReticule extends Reticule {\r\n    constructor(tankSize: number, color: string) {\r\n        super([4, 1], color, true, tankSize);\r\n    }\r\n}\r\n\r\nexport class AdjustingCustomColorReticule extends Reticule {\r\n    private maxReticuleLength: number;\r\n\r\n    constructor (tankSize: number, color: string, maxReticuleLength: number) {\r\n        super([1, 1], color, true, tankSize);\r\n        this.maxReticuleLength = maxReticuleLength;\r\n    }\r\n\r\n    override draw(context: CanvasRenderingContext2D, tankXPosition: number, tankYPosition: number, mouseXPosition: number, mouseYPosition: number): void {\r\n        const xDist = mouseXPosition - tankXPosition;\r\n        const yDist = mouseYPosition - tankYPosition;\r\n        const distance = Math.sqrt(Math.pow(xDist, 2) + Math.pow(yDist, 2));\r\n        const distanceToMaxDistanceRatio = distance / this.maxReticuleLength;\r\n        const distanceToMaxDistanceRatioInverse = 1 - distanceToMaxDistanceRatio;\r\n        let dashLength = distanceToMaxDistanceRatio * 10 + 2;\r\n        let spaceLength = distanceToMaxDistanceRatioInverse * 10 + 5;\r\n\r\n        if (this.renderReticule) {\r\n            context.strokeStyle = this.color;\r\n            context.setLineDash([dashLength, spaceLength]);\r\n            context.beginPath();\r\n            context.moveTo(tankXPosition + (this.tankSize / 2), tankYPosition + (this.tankSize / 2),);\r\n            context.lineTo(mouseXPosition, mouseYPosition);\r\n            context.lineWidth = this.reticuleWidth\r\n            context.stroke();\r\n\r\n            context.setLineDash([]);\r\n            let xLength = 10;\r\n            context.beginPath();\r\n            context.moveTo(mouseXPosition - xLength, mouseYPosition - xLength);\r\n            context.lineTo(mouseXPosition + xLength, mouseYPosition + xLength);\r\n            context.stroke();\r\n\r\n            context.beginPath();\r\n            context.moveTo(mouseXPosition - xLength, mouseYPosition + xLength);\r\n            context.lineTo(mouseXPosition + xLength, mouseYPosition - xLength);\r\n            context.stroke();\r\n        }\r\n    }\r\n}\r\n","import { KeyStates } from \"../utils/KeyStates\";\r\nimport { Ammunition, BasicAIAmmunition, PlayerAmmunition } from \"./Ammunition\";\r\nimport { ObstacleCanvas } from \"./ObstacleCanvas\";\r\nimport { Reticule, AdjustingCustomColorReticule, NoReticule } from \"./Reticule\";\r\nimport tankFire from \"../assets/audio/tankFire.mp3\"\r\n\r\nexport class Tank {\r\n    public xPos: number;\r\n    public yPos: number;\r\n    public xLeft: number;\r\n    public xRight: number;\r\n    public yTop: number;\r\n    public yBottom: number;\r\n    public speed: number;\r\n    public size: number;\r\n    public tankMidpoint: number;\r\n    public color: string;\r\n    public reticule: Reticule;\r\n    public gunBarrellWidth: number = 7;\r\n    public isDestroyed: boolean = false;\r\n    public obstacleCanvas: ObstacleCanvas;\r\n    public twoPi: number = 2 * Math.PI;\r\n\r\n    public keyStates: KeyStates = {\r\n        ArrowUp: false,\r\n        ArrowDown: false,\r\n        ArrowLeft: false,\r\n        ArrowRight: false,\r\n        w: false,\r\n        a: false,\r\n        s: false,\r\n        d: false,\r\n        W: false,\r\n        A: false,\r\n        S: false,\r\n        D: false\r\n    }\r\n\r\n    public aimAngle: number;\r\n    public aimXPos: number;\r\n    public aimYPos: number;\r\n    public xOffset: number;\r\n    public yOffset: number;\r\n    public ammunition: Ammunition[] = [];\r\n    public maxAmmunition: number;\r\n\r\n    protected canvasWidth: number;\r\n    protected canvasHeight: number;\r\n\r\n    constructor(canvas: HTMLCanvasElement, reticule: Reticule, xPos: number, yPos: number, speed: number, size: number, color: string, obstacleCanvas: ObstacleCanvas, ammunition: Ammunition[]) {\r\n        this.reticule = reticule;\r\n        this.xPos = xPos;\r\n        this.yPos = yPos;\r\n        this.xLeft = xPos;\r\n        this.xRight = xPos + size;\r\n        this.yTop = yPos;\r\n        this.yBottom = yPos + size;\r\n        this.speed = speed;\r\n        this.size = size;\r\n        this.color = color;\r\n        this.canvasWidth = canvas.width;\r\n        this.canvasHeight = canvas.height;\r\n        this.obstacleCanvas = obstacleCanvas;\r\n        this.tankMidpoint = this.size / 2;\r\n        this.ammunition = ammunition;\r\n        this.maxAmmunition = ammunition.length\r\n\r\n        this.aimAngle = 90;\r\n        const canvasRect: DOMRect = canvas.getBoundingClientRect();\r\n        this.xOffset = canvasRect.left;\r\n        this.yOffset = canvasRect.top;\r\n        // Set the initital awX and Y aim position to the center of the canvas\r\n        this.aimXPos = canvas.width / 2;\r\n        this.aimYPos = canvas.height / 2;\r\n    }\r\n\r\n    public draw(context: CanvasRenderingContext2D): void {\r\n        if (this.isDestroyed) {\r\n            return;\r\n        }\r\n\r\n        context.fillStyle = this.color;\r\n        context.fillRect(this.xPos, this.yPos, this.size, this.size);\r\n\r\n        context.setLineDash([]);\r\n        context.lineJoin = 'bevel'\r\n        context.strokeStyle = 'black';\r\n        context.lineWidth = 2;\r\n        context.strokeRect(this.xPos, this.yPos, this.size, this.size);\r\n\r\n        context.beginPath();\r\n        context.arc(this.xPos + this.tankMidpoint, this.yPos + this.tankMidpoint, this.size / 3, 0, this.twoPi);\r\n        context.stroke();\r\n\r\n        const endX = this.xPos + this.tankMidpoint + (Math.cos(this.aimAngle) * this.size);\r\n        const endY = this.yPos + this.tankMidpoint + (Math.sin(this.aimAngle) * this.size);\r\n        context.beginPath();\r\n        context.moveTo(this.xPos + this.tankMidpoint, this.yPos + this.tankMidpoint);\r\n        context.lineTo(endX, endY);\r\n        context.lineWidth = this.gunBarrellWidth;\r\n        context.stroke();\r\n    }\r\n\r\n    public updatePosition(): void {\r\n        if(this.up() && this.right()) {\r\n            this.moveNorthEast();\r\n        }\r\n\r\n        else if(this.up() && this.left()) {\r\n            this.moveNorthWest();\r\n        }\r\n\r\n        else if(this.down() && this.right()) {\r\n            this.moveSouthEast();\r\n        }\r\n\r\n        else if(this.down() && this.left()) {\r\n            this.moveSouthWest();\r\n        }\r\n\r\n        else if(this.up()) {\r\n            this.moveNorth();\r\n        }\r\n\r\n        else if(this.down()) {\r\n            this.moveSouth();\r\n        }\r\n\r\n        else if(this.left()) {\r\n            this.moveWest();\r\n        }\r\n\r\n        else if(this.right()) {\r\n            this.moveEast();\r\n        }\r\n\r\n        this.xLeft = this.xPos;\r\n        this.xRight = this.xPos + this.size;\r\n        this.yTop = this.yPos;\r\n        this.yBottom = this.yPos + this.size;\r\n    }\r\n\r\n    public aim(mouseXPos: number, mouseYpos: number, playerTank: Tank): void {\r\n        if (this.isDestroyed) {\r\n            return;\r\n        }\r\n\r\n        let dy: number;\r\n        let dx: number;\r\n        dx = mouseXPos - this.xPos - this.tankMidpoint;\r\n        dy = mouseYpos - this.yPos - this.tankMidpoint;\r\n        let theta = Math.atan2(dy, dx);\r\n        if (theta < 0) {\r\n            theta += 2 * Math.PI;\r\n        }\r\n        this.aimAngle = theta;\r\n    }\r\n\r\n    public shoot(playerTank: Tank): void {\r\n        return;\r\n    }\r\n\r\n    public moveNorth(): void {\r\n        // Loop through all obstacles and check if the tank will collide with any of them. Set the tank y position accordingly.\r\n        let blocked: boolean = false;\r\n        for (let i = 0; i < this.obstacleCanvas.obstacles.length; i++) {\r\n            const obstacle = this.obstacleCanvas.obstacles[i];\r\n            if (this.yPos - this.speed < obstacle.yTop + obstacle.height && this.yPos > obstacle.yTop &&\r\n                obstacle.xLeft < this.xPos + this.size && this.xPos < obstacle.xRight) {\r\n                this.yPos = obstacle.yBottom;\r\n                blocked = true;\r\n            }\r\n        }\r\n\r\n        if (!blocked) {\r\n            this.yPos = Math.max(this.yPos - this.speed, 0);\r\n        }\r\n    }\r\n\r\n    public moveSouth(): void {\r\n        let blocked: boolean = false;\r\n        for (let i = 0; i < this.obstacleCanvas.obstacles.length; i++) {\r\n            const obstacle = this.obstacleCanvas.obstacles[i];\r\n            if (this.yPos + this.speed + this.size > obstacle.yTop && this.yPos < obstacle.yTop + obstacle.height &&\r\n                obstacle.xLeft < this.xPos + this.size && this.xPos < obstacle.xRight) {\r\n                this.yPos = obstacle.yTop - this.size;\r\n                blocked = true;\r\n            }\r\n        }\r\n        if (!blocked) {\r\n            this.yPos = Math.min(this.yPos + this.speed, this.canvasHeight - this.size);\r\n        }\r\n    }\r\n\r\n    public moveWest(): void {\r\n        let blocked: boolean = false;\r\n        for (let i = 0; i < this.obstacleCanvas.obstacles.length; i++) {\r\n            const obstacle = this.obstacleCanvas.obstacles[i];\r\n            if (this.xPos - this.speed < obstacle.xRight && this.xPos > obstacle.xLeft &&\r\n                obstacle.yTop < this.yPos + this.size && this.yPos < obstacle.yBottom) {\r\n                this.xPos = obstacle.xRight;\r\n                blocked = true;\r\n            }\r\n        }\r\n        if (!blocked) {\r\n            this.xPos = Math.max(this.xPos - this.speed, 0);\r\n        }\r\n    }\r\n\r\n    public moveEast(): void {\r\n        let blocked: boolean = false;\r\n        for (let i = 0; i < this.obstacleCanvas.obstacles.length; i++) {\r\n            const obstacle = this.obstacleCanvas.obstacles[i];\r\n            if (this.xPos + this.speed + this.size > obstacle.xLeft && this.xPos < obstacle.xLeft + obstacle.width &&\r\n                obstacle.yTop < this.yPos + this.size && this.yPos < obstacle.yBottom) {\r\n                this.xPos = obstacle.xLeft - this.size;\r\n                blocked = true;\r\n            }\r\n        }\r\n        if (!blocked) {\r\n            this.xPos = Math.min(this.xPos + this.speed, this.canvasWidth - this.size);\r\n        }\r\n    }\r\n\r\n    public moveNorthEast(): void {\r\n        let blockedNorth: boolean = false;\r\n        let blockedEast: boolean = false;\r\n        for (let i = 0; i < this.obstacleCanvas.obstacles.length; i++) {\r\n            const obstacle = this.obstacleCanvas.obstacles[i];\r\n            if (this.yPos - this.speed < obstacle.yTop + obstacle.height && this.yPos > obstacle.yTop &&\r\n                obstacle.xLeft < this.xPos + this.size && this.xPos < obstacle.xRight) {\r\n                this.yPos = obstacle.yBottom;\r\n                blockedNorth = true;\r\n            }\r\n            if (this.xPos + this.speed + this.size > obstacle.xLeft && this.xPos < obstacle.xLeft + obstacle.width &&\r\n                obstacle.yTop < this.yPos + this.size && this.yPos < obstacle.yBottom) {\r\n                this.xPos = obstacle.xLeft - this.size;\r\n                blockedEast = true;\r\n            }\r\n        }\r\n\r\n        if (!blockedNorth) {\r\n            this.yPos = Math.max(this.yPos - this.speed, 0);\r\n        }\r\n\r\n        if (!blockedEast) {\r\n            this.xPos = Math.min(this.xPos + this.speed, this.canvasWidth - this.size);\r\n        }\r\n    }\r\n\r\n    public moveNorthWest(): void {\r\n        let blockedNorth: boolean = false;\r\n        let blockedWest: boolean = false;\r\n\r\n        for (let i = 0; i < this.obstacleCanvas.obstacles.length; i++) {\r\n            const obstacle = this.obstacleCanvas.obstacles[i];\r\n            if (this.yPos - this.speed < obstacle.yTop + obstacle.height && this.yPos > obstacle.yTop &&\r\n                obstacle.xLeft < this.xPos + this.size && this.xPos < obstacle.xRight) {\r\n                this.yPos = obstacle.yBottom;\r\n                blockedNorth = true;\r\n            }\r\n            if (this.xPos - this.speed < obstacle.xRight && this.xPos > obstacle.xLeft &&\r\n                obstacle.yTop < this.yPos + this.size && this.yPos < obstacle.yBottom) {\r\n                this.xPos = obstacle.xRight;\r\n                blockedWest = true;\r\n            }\r\n        }\r\n\r\n        if (!blockedNorth) {\r\n            this.yPos = Math.max(this.yPos - this.speed, 0);\r\n        }\r\n        if (!blockedWest) {\r\n            this.xPos = Math.max(this.xPos - this.speed, 0);\r\n        }\r\n    }\r\n\r\n    public moveSouthEast(): void {\r\n        let blockedSouth: boolean = false;\r\n        let blockedEast: boolean = false;\r\n        for (let i = 0; i < this.obstacleCanvas.obstacles.length; i++) {\r\n            const obstacle = this.obstacleCanvas.obstacles[i];\r\n            if (this.yPos + this.speed + this.size > obstacle.yTop && this.yPos < obstacle.yTop + obstacle.height &&\r\n                obstacle.xLeft < this.xPos + this.size && this.xPos < obstacle.xRight) {\r\n                this.yPos = obstacle.yTop - this.size;\r\n                blockedSouth = true;\r\n            }\r\n            if (this.xPos + this.speed + this.size > obstacle.xLeft && this.xPos < obstacle.xLeft + obstacle.width &&\r\n                obstacle.yTop < this.yPos + this.size && this.yPos < obstacle.yBottom) {\r\n                this.xPos = obstacle.xLeft - this.size;\r\n                blockedEast = true;\r\n            }\r\n        }\r\n\r\n        if (!blockedSouth) {\r\n            this.yPos = Math.min(this.yPos + this.speed, this.canvasHeight - this.size);\r\n        }\r\n        if (!blockedEast) {\r\n            this.xPos = Math.min(this.xPos + this.speed, this.canvasWidth - this.size);\r\n        }\r\n    }\r\n\r\n    public moveSouthWest(): void {\r\n        let blockedSouth: boolean = false;\r\n        let blockedWest: boolean = false;\r\n        for (let i = 0; i < this.obstacleCanvas.obstacles.length; i++) {\r\n            const obstacle = this.obstacleCanvas.obstacles[i];\r\n            if (this.yPos + this.speed + this.size > obstacle.yTop && this.yPos < obstacle.yTop + obstacle.height &&\r\n                obstacle.xLeft < this.xPos + this.size && this.xPos < obstacle.xRight) {\r\n                this.yPos = obstacle.yTop - this.size;\r\n                blockedSouth = true;\r\n            }\r\n            if (this.xPos - this.speed < obstacle.xRight && this.xPos > obstacle.xLeft &&\r\n                obstacle.yTop < this.yPos + this.size && this.yPos < obstacle.yBottom) {\r\n                this.xPos = obstacle.xRight;\r\n                blockedWest = true;\r\n            }\r\n        }\r\n        if (!blockedSouth) {\r\n            this.yPos = Math.min(this.yPos + this.speed, this.canvasHeight - this.size);\r\n        }\r\n        if (!blockedWest) {\r\n            this.xPos = Math.max(this.xPos - this.speed, 0);\r\n        }\r\n    }\r\n\r\n    public up(): boolean {\r\n        return this.keyStates.ArrowUp || this.keyStates.w || this.keyStates.W;\r\n    }\r\n\r\n    public down(): boolean {\r\n        return this.keyStates.ArrowDown || this.keyStates.s || this.keyStates.S;\r\n    }\r\n\r\n    public left(): boolean {\r\n        return this.keyStates.ArrowLeft || this.keyStates.a || this.keyStates.A;\r\n    }\r\n\r\n    public right(): boolean {\r\n        return this.keyStates.ArrowRight || this.keyStates.d || this.keyStates.D;\r\n    }\r\n}\r\n\r\nexport class PlayerTank extends Tank {\r\n    public tankFireAudio: HTMLAudioElement;\r\n\r\n    constructor(canvas: HTMLCanvasElement, reticule: Reticule, xPos: number, yPos: number, speed: number, size: number, color: string, obstacleCanvas: ObstacleCanvas, ammunition: Ammunition[]) {\r\n        super(canvas, reticule, xPos, yPos, speed, size, color, obstacleCanvas, ammunition)\r\n        this.tankFireAudio = new Audio(tankFire)\r\n\r\n        document.addEventListener('keydown', (event: KeyboardEvent) => {\r\n            if (this.keyStates.hasOwnProperty(event.key)) {\r\n                this.keyStates[event.key] = true;\r\n            }\r\n        });\r\n\r\n        document.addEventListener('keyup', (event: KeyboardEvent) => {\r\n            if (this.keyStates.hasOwnProperty(event.key)) {\r\n                this.keyStates[event.key] = false;\r\n            }\r\n        });\r\n\r\n        canvas.addEventListener('mousemove', (event: MouseEvent) => {\r\n            this.aimXPos = event.clientX - this.xOffset;\r\n            this.aimYPos = event.clientY - this.yOffset;\r\n        });\r\n\r\n        canvas.addEventListener('click', (event: MouseEvent) => {\r\n            const availableAmmunitionIndex = this.ammunition.findIndex(ammunition => ammunition.isDestroyed)\r\n            if (availableAmmunitionIndex !== -1) {\r\n                this.tankFireAudio.play()\r\n                this.ammunition[availableAmmunitionIndex] = new PlayerAmmunition(this.xPos + (this.size / 2), this.yPos + (this.size / 2), this.aimAngle, canvas.width, canvas.height, false);\r\n            }\r\n        });\r\n    }\r\n\r\n    public aim(mouseXPos: number, mouseYpos: number, playerTank: Tank): void {\r\n        if (this.isDestroyed) {\r\n            return;\r\n        }\r\n        let dy: number;\r\n        let dx: number;\r\n        dx = mouseXPos - this.xPos - this.tankMidpoint;\r\n        dy = mouseYpos - this.yPos - this.tankMidpoint;\r\n        let theta = Math.atan2(dy, dx);\r\n        if (theta < 0) {\r\n            theta += 2 * Math.PI;\r\n        }\r\n        this.aimAngle = theta;\r\n    }\r\n\r\n    public shoot(playerTank: Tank): void {\r\n        // Shoot logic is in the constructor\r\n        return;\r\n    }\r\n}\r\n\r\nexport class EnemyTank extends Tank {\r\n    constructor(canvas: HTMLCanvasElement, reticule: Reticule, xPos: number, yPos: number, speed: number, size: number, color: string, obstacleCanvas: ObstacleCanvas, ammunition: Ammunition[]) {\r\n        super(canvas, reticule, xPos, yPos, speed, size, color, obstacleCanvas, ammunition)\r\n    }\r\n}\r\n\r\nexport class StationaryTank extends EnemyTank {\r\n    constructor(canvas: HTMLCanvasElement, xPos: number, yPos: number, obstacleCanvas: ObstacleCanvas) {\r\n        let fastTankSpeed: number = 0;\r\n        let fastTankSize: number = 30;\r\n        let fastTankColor: string = '#935217';\r\n        let ammunition: Ammunition[] = [\r\n            new BasicAIAmmunition(0, 0, 0, 0, 0, true),\r\n        ]\r\n        super(canvas, new NoReticule(), xPos, yPos, fastTankSpeed, fastTankSize, fastTankColor, obstacleCanvas, ammunition);\r\n        setInterval(() => {\r\n            if (this.isDestroyed) {\r\n                return;\r\n            }\r\n            const availableAmmunitionIndex = this.ammunition.findIndex(ammunition => ammunition.isDestroyed)\r\n            if (availableAmmunitionIndex !== -1) {\r\n                this.ammunition[availableAmmunitionIndex] = new BasicAIAmmunition(this.xPos + (this.size / 2), this.yPos + (this.size / 2), this.aimAngle, this.canvasWidth, this.canvasHeight, false);\r\n            }\r\n        }, 5000);\r\n    }\r\n\r\n    public shoot(playerTank: Tank): void {\r\n        return;\r\n    }\r\n\r\n    public aim(mouseXPos: number, mouseYpos: number, playerTank: Tank): void {\r\n        if (this.isDestroyed) {\r\n            return;\r\n        }\r\n\r\n        let dy: number;\r\n        let dx: number;\r\n        dx = playerTank.xPos + (playerTank.size / 2) - this.xPos - this.tankMidpoint;\r\n        dy = playerTank.yPos + (playerTank.size / 2) - this.yPos - this.tankMidpoint;\r\n        let theta = Math.atan2(dy, dx);\r\n        if (theta < 0) {\r\n            theta += 2 * Math.PI;\r\n        }\r\n        this.aimAngle = theta;\r\n    }\r\n}\r\n\r\nexport class StationaryRandomAimTank extends EnemyTank {\r\n    public aimAngleChangeAmount: number = 0\r\n\r\n    constructor(canvas: HTMLCanvasElement, xPos: number, yPos: number, obstacleCanvas: ObstacleCanvas, ammunition: Ammunition[]) {\r\n        let fastTankSpeed: number = 0;\r\n        let fastTankSize: number = 30;\r\n        let fastTankColor: string = '#ffce47';\r\n        super(canvas, new NoReticule(), xPos, yPos, fastTankSpeed, fastTankSize, fastTankColor, obstacleCanvas, ammunition);\r\n    }\r\n\r\n    private getAngleChangeAmount(): number {\r\n        let max: number = 360;\r\n        let min: number = -360;\r\n        let randomAmount: number = Math.floor(Math.random() * (max - min + 1)) + min; \r\n        return randomAmount;\r\n    }\r\n\r\n    public shoot(playerTank: Tank): void {\r\n        const availableAmmunitionIndex = this.ammunition.findIndex(ammunition => ammunition.isDestroyed)\r\n        if (availableAmmunitionIndex !== -1) {\r\n            this.ammunition[availableAmmunitionIndex].reload(this.xPos + (this.size / 2), this.yPos + (this.size / 2), this.aimAngle, true, this.canvasWidth, this.canvasHeight);\r\n            let willHitPlayerTank: boolean = this.ammunition[availableAmmunitionIndex].willHitPlayerTank(this.obstacleCanvas, playerTank);\r\n            if (willHitPlayerTank) {\r\n                this.ammunition[availableAmmunitionIndex].isDestroyed = false;\r\n            }\r\n        }\r\n        return;\r\n    }\r\n\r\n    public aim(mouseXPos: number, mouseYpos: number, playerTank: Tank): void {\r\n        if (this.isDestroyed) {\r\n            return;\r\n        }\r\n        if (this.aimAngleChangeAmount > 0) {\r\n            this.aimAngle += 0.01\r\n            this.aimAngleChangeAmount -= 1\r\n        }\r\n        else if (this.aimAngleChangeAmount < 0) {\r\n            this.aimAngle -= 0.01\r\n            this.aimAngleChangeAmount += 1\r\n        }\r\n        else {\r\n            this.aimAngleChangeAmount = this.getAngleChangeAmount()\r\n        }\r\n    }\r\n}\r\n\r\nexport class DefaultPlayerTank extends PlayerTank {\r\n    constructor(canvas: HTMLCanvasElement, xPos: number, yPos: number, obstacleCanvas: ObstacleCanvas) {\r\n        let defaultPlayerTankSpeed: number = 2;\r\n        let defaultPlayerTankSize: number = 30;\r\n        let defaultPlayerTankColor: string = '#6384a1';\r\n        let ammunition: Ammunition[] = [\r\n            new PlayerAmmunition(0, 0, 0, 0, 0, true),\r\n            new PlayerAmmunition(0, 0, 0, 0, 0, true),\r\n            new PlayerAmmunition(0, 0, 0, 0, 0, true),\r\n            new PlayerAmmunition(0, 0, 0, 0, 0, true),\r\n            new PlayerAmmunition(0, 0, 0, 0, 0, true),\r\n        ]\r\n        super(canvas, new AdjustingCustomColorReticule(defaultPlayerTankSize, defaultPlayerTankColor, canvas.width), xPos, yPos, defaultPlayerTankSpeed, defaultPlayerTankSize, defaultPlayerTankColor, obstacleCanvas, ammunition);\r\n    }\r\n}\r\n","import { Tank } from \"./Tank\";\r\n\r\nexport class GameRenderer {\r\n    private context: CanvasRenderingContext2D | null;\r\n\r\n    constructor(public canvas: HTMLCanvasElement) {\r\n        const context = this.canvas.getContext('2d');\r\n        if (!context) {\r\n            throw new Error('2d context not supported or canvas element not found.');\r\n        }\r\n        this.context = context;\r\n    }\r\n\r\n    public initializeCanvas(width: number, height: number): void {\r\n        this.canvas.width = width;\r\n        this.canvas.height = height;\r\n    }\r\n\r\n    render(progress: number, playerTank: Tank, enemyTanks: Tank[]): void {\r\n        if (!this.context) {\r\n            throw new Error('2d context not supported or canvas element not found.');\r\n        }\r\n        this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n\r\n        playerTank.updatePosition()\r\n        playerTank.aim(playerTank.aimXPos, playerTank.aimYPos, playerTank)\r\n        enemyTanks.forEach(tank => {\r\n            tank.updatePosition()\r\n            tank.aim(tank.aimXPos, tank.aimYPos, playerTank)\r\n            tank.shoot(playerTank)\r\n        });\r\n\r\n        enemyTanks.forEach(tank => {\r\n            tank.draw(this.context as CanvasRenderingContext2D)\r\n            tank.reticule.draw(this.context as CanvasRenderingContext2D, tank.xPos, tank.yPos, tank.aimXPos, tank.aimYPos);\r\n            tank.ammunition.forEach(ammunition => {\r\n                if(ammunition.isDestroyed) {\r\n                    return;\r\n                }\r\n                ammunition.updatePosition(tank.obstacleCanvas);\r\n                ammunition.checkPlayerHit(playerTank);\r\n                ammunition.draw(this.context as CanvasRenderingContext2D);\r\n            });\r\n        });\r\n\r\n        playerTank.draw(this.context as CanvasRenderingContext2D)\r\n        playerTank.reticule.draw(this.context as CanvasRenderingContext2D, playerTank.xPos, playerTank.yPos, playerTank.aimXPos, playerTank.aimYPos);\r\n        playerTank.ammunition.forEach(ammunition => {\r\n            if(ammunition.isDestroyed) {\r\n                return;\r\n            }\r\n            ammunition.updatePosition(playerTank.obstacleCanvas);\r\n            ammunition.checkEnemyHit(enemyTanks);\r\n            ammunition.draw(this.context as CanvasRenderingContext2D);\r\n        });\r\n    }\r\n}\r\n","import { Tank, DefaultPlayerTank } from './Tank';\r\nimport { GameRenderer } from './GameRenderer';\r\nimport { ObstacleCanvas } from './ObstacleCanvas';\r\n\r\nexport class GameCanvas {\r\n    public gameRenderer: GameRenderer;\r\n    private playerTank: Tank;\r\n    private enemyTanks: Tank[] = [];\r\n    private lastRenderTime: number;\r\n    public obstacleCanvas: ObstacleCanvas;\r\n    public width: number;\r\n    public height: number;\r\n\r\n    constructor(canvasSelector: string, width: number, height: number, obstacleCanvas: ObstacleCanvas) {\r\n        this.width = width;\r\n        this.height = height;\r\n        this.obstacleCanvas = obstacleCanvas;\r\n        this.gameRenderer = new GameRenderer(document.querySelector(canvasSelector) as HTMLCanvasElement);\r\n        this.gameRenderer.initializeCanvas(this.width, this.height);\r\n        this.lastRenderTime = 0;\r\n        window.addEventListener('resize', this.resizeCanvas.bind(this));\r\n        this.playerTank = new DefaultPlayerTank(this.gameRenderer.canvas, 200, 250, obstacleCanvas);\r\n        requestAnimationFrame(this.gameLoop.bind(this));\r\n    }\r\n\r\n    private resizeCanvas(): void {\r\n\r\n    }\r\n\r\n    private gameLoop(timeStamp: number): void {\r\n        const progress = timeStamp - this.lastRenderTime;\r\n        this.gameRenderer.render(progress, this.playerTank, this.enemyTanks);\r\n        this.lastRenderTime = timeStamp;\r\n        requestAnimationFrame(this.gameLoop.bind(this));\r\n    }\r\n\r\n    public addEnemyTank(tank: Tank): void {\r\n        this.enemyTanks.push(tank);\r\n    }\r\n}\r\n","export class Obstacle {\r\n    public xLeft: number;\r\n    public xRight: number;\r\n    public yTop: number;\r\n    public yBottom: number;\r\n    public width: number;\r\n    public height: number;\r\n\r\n    constructor (startX: number, startY: number, width: number, height: number) {\r\n        this.xLeft = startX;\r\n        this.yTop = startY;\r\n        this.width = width;\r\n        this.height = height;\r\n        this.yBottom = this.yTop + this.height;\r\n        this.xRight = this.xLeft + this.width;\r\n    }\r\n\r\n    draw (context: CanvasRenderingContext2D): void {\r\n        context.beginPath();\r\n        context.rect(this.xLeft, this.yTop, this.width, this.height);\r\n        context.fillStyle = 'black';\r\n        context.fill();\r\n    }\r\n}\r\n","import './css/style.css';\r\nimport './assets/computer.ico';\r\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\r\nimport '../node_modules/bootstrap/dist/js/bootstrap.min.js';\r\n\r\nimport { GameCanvas } from './game/GameCanvas';\r\nimport { StationaryRandomAimTank, StationaryTank } from './game/Tank';\r\nimport { Obstacle } from './game/Obstacle';\r\nimport { ObstacleCanvas } from './game/ObstacleCanvas';\r\nimport { Ammunition, BasicAIAmmunition, SuperAIAmmunition } from './game/Ammunition';\r\n\r\nconst canvasWidth = 1000;\r\nconst canvasHeight = 500;\r\n\r\nlet obs: Obstacle = new Obstacle(100, 100, 200, 100);\r\nlet obs2: Obstacle = new Obstacle(700, 100, 30, 100);\r\nlet obs3: Obstacle = new Obstacle(700, 350, 30, 100);\r\n\r\nconst obstacleCanvas = new ObstacleCanvas('#obstacle-canvas', canvasWidth, canvasHeight, [obs, obs2, obs3]);\r\nconst gameArea = new GameCanvas('#game-canvas', canvasWidth, canvasHeight, obstacleCanvas);\r\nconst aiTank2 = new StationaryTank(gameArea.gameRenderer.canvas, 800, 200, obstacleCanvas);\r\n\r\nlet basicAmmo: Ammunition[] = [\r\n    new BasicAIAmmunition(0, 0, 0, 0, 0, true)\r\n]\r\nlet superAmmo: Ammunition[] = [\r\n    new SuperAIAmmunition(0, 0, 0, 0, 0, true)\r\n]\r\nconst aiTank = new StationaryRandomAimTank(gameArea.gameRenderer.canvas, 800, 100, obstacleCanvas, superAmmo);\r\nconst aiTank3 = new StationaryRandomAimTank(gameArea.gameRenderer.canvas, 800, 300, obstacleCanvas, basicAmmo);\r\n\r\ngameArea.addEnemyTank(aiTank);\r\ngameArea.addEnemyTank(aiTank2);\r\ngameArea.addEnemyTank(aiTank3);\r\n","import { Obstacle } from './Obstacle';\r\n\r\nexport class ObstacleCanvas {\r\n    private obstacleCanvas: HTMLCanvasElement;\r\n    public obstacles: Obstacle[] = [];\r\n    public width: number;\r\n    public height: number;\r\n\r\n    constructor(obstacleCanvasSelector: string, width: number, height: number, obstacles: Obstacle[]) {\r\n        this.width = width;\r\n        this.height = height;\r\n        this.obstacles = obstacles;\r\n        window.addEventListener('resize', this.resizeCanvas.bind(this));\r\n        this.obstacleCanvas = document.querySelector(obstacleCanvasSelector) as HTMLCanvasElement\r\n        this.obstacleCanvas.width = width;\r\n        this.obstacleCanvas.height = height;\r\n        obstacles.forEach(obstacle => {\r\n            obstacle.draw(this.obstacleCanvas.getContext('2d') as CanvasRenderingContext2D);\r\n        });\r\n    }\r\n\r\n    private resizeCanvas(): void {\r\n\r\n    }\r\n}\r\n"],"names":["startX","startY","theta","speed","maxBounces","canvasWidth","canvasHeight","isDestroyed","this","xPos","yPos","xVelocity","Math","cos","yVelocity","sin","bounces","tankDestroyAudio","Audio","updatePosition","obstacleCanvas","obstacles","forEach","obstacle","xLeft","xRight","yTop","yBottom","fromLeft","abs","fromRight","fromTop","fromBottom","minDistance","min","checkEnemyHit","enemyTanks","enemyTank","play","console","log","checkPlayerHit","playerTank","draw","context","beginPath","arc","PI","fillStyle","fill","lineWidth","strokeStyle","stroke","closePath","reload","willHitPlayerTank","predictedXPosition","predictedYPosition","predictedXVelocity","predictedYVelocity","predictedBounces","Ammunition","dashPattern","color","renderReticule","tankSize","reticuleWidth","tankXPos","tankYPos","mouseXPos","mouseYpos","setLineDash","moveTo","lineTo","Reticule","maxReticuleLength","tankXPosition","tankYPosition","mouseXPosition","mouseYPosition","xDist","yDist","distanceToMaxDistanceRatio","sqrt","pow","dashLength","spaceLength","xLength","canvas","reticule","size","ammunition","gunBarrellWidth","twoPi","keyStates","ArrowUp","ArrowDown","ArrowLeft","ArrowRight","w","a","s","d","W","A","S","D","width","height","tankMidpoint","maxAmmunition","length","aimAngle","canvasRect","getBoundingClientRect","xOffset","left","yOffset","top","aimXPos","aimYPos","fillRect","lineJoin","strokeRect","endX","endY","up","right","moveNorthEast","moveNorthWest","down","moveSouthEast","moveSouthWest","moveNorth","moveSouth","moveWest","moveEast","aim","dy","dx","atan2","shoot","blocked","i","max","blockedNorth","blockedEast","blockedWest","blockedSouth","tankFireAudio","document","addEventListener","event","hasOwnProperty","key","clientX","clientY","availableAmmunitionIndex","findIndex","PlayerAmmunition","Tank","BasicAIAmmunition","NoReticule","setInterval","EnemyTank","aimAngleChangeAmount","getAngleChangeAmount","floor","random","defaultPlayerTankColor","AdjustingCustomColorReticule","PlayerTank","getContext","Error","initializeCanvas","render","progress","clearRect","tank","canvasSelector","gameRenderer","GameRenderer","querySelector","lastRenderTime","window","resizeCanvas","bind","DefaultPlayerTank","requestAnimationFrame","gameLoop","timeStamp","addEnemyTank","push","rect","obstacleCanvasSelector","Obstacle","gameArea","GameCanvas","aiTank2","StationaryTank","basicAmmo","superAmmo","SuperAIAmmunition","aiTank","StationaryRandomAimTank","aiTank3"],"sourceRoot":""}