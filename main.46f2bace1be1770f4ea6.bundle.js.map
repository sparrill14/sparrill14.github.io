{"version":3,"file":"main.46f2bace1be1770f4ea6.bundle.js","mappings":"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","sources":["webpack://treads/./src/assets/computer.ico","webpack://treads/./src/game/Obstacle.ts","webpack://treads/./src/game/AudioManager.ts","webpack://treads/./src/game/Tank.ts","webpack://treads/./src/game/Ammunition.ts","webpack://treads/./src/game/Reticule.ts","webpack://treads/./src/game/Bomb.ts","webpack://treads/./src/game/ObstacleCanvas.ts","webpack://treads/./src/game/GameRenderer.ts","webpack://treads/./src/game/GameCanvas.ts","webpack://treads/./src/game/NavigationGrid.ts","webpack://treads/./src/game/Level.ts","webpack://treads/./src/index.ts","webpack://treads/./src/ui/LevelSelector.ts"],"sourcesContent":["export default __webpack_public_path__ + \"assets/computer.ico\";","export class Obstacle {\r\n    public xLeft: number;\r\n    public xRight: number;\r\n    public yTop: number;\r\n    public yBottom: number;\r\n    public width: number;\r\n    public height: number;\r\n\r\n    constructor (startX: number, startY: number, width: number, height: number) {\r\n        this.xLeft = startX;\r\n        this.yTop = startY;\r\n        this.width = width;\r\n        this.height = height;\r\n        this.yBottom = this.yTop + this.height;\r\n        this.xRight = this.xLeft + this.width;\r\n    }\r\n\r\n    draw (context: CanvasRenderingContext2D): void {\r\n        context.beginPath();\r\n        context.rect(this.xLeft, this.yTop, this.width, this.height);\r\n        context.fillStyle = 'black';\r\n        context.fill();\r\n    }\r\n}\r\n","import tankFire from \"../assets/audio/tankFire.mp3\";\r\nimport tankDestroy from \"../assets/audio/tankDestroy.mp3\";\r\nimport bombExplode from \"../assets/audio/bombExplode.mp3\";\r\nimport backgroundMusic from \"../assets/audio/backgroundMusic.mp3\";\r\n\r\nexport enum AudioFile {\r\n    TANK_FIRE = 1,\r\n    TANK_DESTROY = 2,\r\n    BOMB_EXPLODE = 3,\r\n    BACKGROUND_MUSIC = 4,\r\n}\r\n\r\nexport class AudioManager {\r\n    private audioContext: AudioContext;\r\n    private audioBuffers: Map<AudioFile, AudioBuffer>;\r\n    private backgroundMusicSource: AudioBufferSourceNode | null;\r\n\r\n    constructor() {\r\n        this.audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();\r\n        this.audioBuffers = new Map();\r\n        this.backgroundMusicSource = null;\r\n    }\r\n\r\n    loadAllAudio(): Promise<void[]> {\r\n        const promises = [\r\n            this.loadAudio(AudioFile.TANK_FIRE, tankFire),\r\n            this.loadAudio(AudioFile.TANK_DESTROY, tankDestroy),\r\n            this.loadAudio(AudioFile.BOMB_EXPLODE, bombExplode),\r\n            this.loadAudio(AudioFile.BACKGROUND_MUSIC, backgroundMusic)\r\n        ];\r\n        return Promise.all(promises);\r\n    }\r\n\r\n    loadAudio(audioFile: AudioFile, url: string): Promise<void> {\r\n        return fetch(url)\r\n            .then(response => response.arrayBuffer())\r\n            .then(arrayBuffer => this.audioContext.decodeAudioData(arrayBuffer))\r\n            .then(audioBuffer => {\r\n                this.audioBuffers.set(audioFile, audioBuffer);\r\n            })\r\n            .catch(error => console.error(`Error loading audio file: ${url}`, error));\r\n    }\r\n\r\n    play(audioFile: AudioFile): void {\r\n        const buffer = this.audioBuffers.get(audioFile);\r\n        if (buffer) {\r\n            const source = this.audioContext.createBufferSource();\r\n            source.buffer = buffer;\r\n            source.connect(this.audioContext.destination);\r\n            source.start(0);\r\n        } else {\r\n            console.warn(`Audio buffer for ${audioFile} not found`);\r\n        }\r\n    }\r\n\r\n    getAudioContext(): AudioContext {\r\n        return this.audioContext;\r\n    }\r\n\r\n    playBackgroundMusic(): void {\r\n        const buffer = this.audioBuffers.get(AudioFile.BACKGROUND_MUSIC);\r\n        if (buffer) {\r\n            this.stopBackgroundMusic();\r\n            this.backgroundMusicSource = this.audioContext.createBufferSource();\r\n            this.backgroundMusicSource.buffer = buffer;\r\n            this.backgroundMusicSource.loop = true;\r\n            this.backgroundMusicSource.connect(this.audioContext.destination);\r\n            this.backgroundMusicSource.start(0);\r\n        } else {\r\n            console.warn(`Background music buffer not found`);\r\n        }\r\n    }\r\n\r\n    stopBackgroundMusic(): void {\r\n        if (this.backgroundMusicSource) {\r\n            this.backgroundMusicSource.stop(0);\r\n            this.backgroundMusicSource.disconnect();\r\n            this.backgroundMusicSource = null;\r\n        }\r\n    }\r\n}\r\n","import { KeyStates } from \"../utils/KeyStates\";\r\nimport { Ammunition, BasicAIAmmunition, PlayerAmmunition } from \"./Ammunition\";\r\nimport { ObstacleCanvas } from \"./ObstacleCanvas\";\r\nimport { Reticule, AdjustingCustomColorReticule, NoReticule } from \"./Reticule\";\r\nimport { NavigationGrid, Node } from \"./NavigationGrid\";\r\nimport { Bomb, PlayerBomb } from \"./Bomb\";\r\nimport { AudioFile, AudioManager } from \"./AudioManager\";\r\n\r\nexport enum Direction {\r\n    NORTH = 1,\r\n    SOUTH = 2,\r\n    EAST = 3,\r\n    WEST = 4,\r\n    NORTHEAST = 5,\r\n    NORTHWEST = 6,\r\n    SOUTHEAST = 7,\r\n    SOUTHWEST = 8,\r\n    UNKNOWN = 9\r\n}\r\n\r\nexport class Tank {\r\n    public xPos: number;\r\n    public yPos: number;\r\n    public xLeft: number;\r\n    public xRight: number;\r\n    public yTop: number;\r\n    public yBottom: number;\r\n    public speed: number;\r\n    public size: number;\r\n    public tankMidpoint: number;\r\n    public color: string;\r\n    public reticule: Reticule;\r\n    public gunBarrellWidth: number = 7;\r\n    public isDestroyed: boolean = false;\r\n    public obstacleCanvas: ObstacleCanvas;\r\n    public twoPi: number = 2 * Math.PI;\r\n    public lastDirectionMoved: Direction = Direction.UNKNOWN;\r\n    public wasLastMoveBlocked: boolean = false;\r\n    public consecutiveDirectionMoves: number = 0;\r\n    public audioManager: AudioManager;\r\n    public aimAngle: number;\r\n    public aimXPos: number;\r\n    public aimYPos: number;\r\n    public xOffset: number;\r\n    public yOffset: number;\r\n    public ammunition: Ammunition[] = [];\r\n    public maxAmmunition: number;\r\n    public bombs: Bomb[] = [];\r\n    public maxBombs: number;\r\n    public canvasWidth: number;\r\n    public canvasHeight: number;\r\n\r\n    public keyStates: KeyStates = {\r\n        ArrowUp: false,\r\n        ArrowDown: false,\r\n        ArrowLeft: false,\r\n        ArrowRight: false,\r\n        w: false,\r\n        a: false,\r\n        s: false,\r\n        d: false,\r\n        W: false,\r\n        A: false,\r\n        S: false,\r\n        D: false\r\n    }\r\n\r\n    constructor(canvas: HTMLCanvasElement, reticule: Reticule, xPos: number, yPos: number, speed: number, size: number, color: string, obstacleCanvas: ObstacleCanvas, ammunition: Ammunition[], bombs: Bomb[], audioManager: AudioManager) {\r\n        this.reticule = reticule;\r\n        this.xPos = xPos;\r\n        this.yPos = yPos;\r\n        this.xLeft = xPos;\r\n        this.xRight = xPos + size;\r\n        this.yTop = yPos;\r\n        this.yBottom = yPos + size;\r\n        this.speed = speed;\r\n        this.size = size;\r\n        this.color = color;\r\n        this.canvasWidth = canvas.width;\r\n        this.canvasHeight = canvas.height;\r\n        this.obstacleCanvas = obstacleCanvas;\r\n        this.tankMidpoint = this.size / 2;\r\n        this.ammunition = ammunition;\r\n        this.maxAmmunition = ammunition.length;\r\n        this.bombs = bombs;\r\n        this.maxBombs = bombs.length;\r\n        this.audioManager = audioManager;\r\n\r\n        this.aimAngle = 90;\r\n        const canvasRect: DOMRect = canvas.getBoundingClientRect();\r\n        this.xOffset = canvasRect.left;\r\n        this.yOffset = canvasRect.top;\r\n        // Set the initital X and Y aim position to the center of the canvas\r\n        this.aimXPos = canvas.width / 2;\r\n        this.aimYPos = canvas.height / 2;\r\n    }\r\n\r\n    public draw(context: CanvasRenderingContext2D): void {\r\n        if (this.isDestroyed) {\r\n            return;\r\n        }\r\n\r\n        context.fillStyle = this.color;\r\n        context.fillRect(this.xPos, this.yPos, this.size, this.size);\r\n\r\n        context.setLineDash([]);\r\n        context.lineJoin = 'bevel'\r\n        context.strokeStyle = 'black';\r\n        context.lineWidth = 2;\r\n        context.strokeRect(this.xPos, this.yPos, this.size, this.size);\r\n\r\n        context.beginPath();\r\n        context.arc(this.xPos + this.tankMidpoint, this.yPos + this.tankMidpoint, this.size / 3, 0, this.twoPi);\r\n        context.stroke();\r\n\r\n        const endX = this.xPos + this.tankMidpoint + (Math.cos(this.aimAngle) * this.size);\r\n        const endY = this.yPos + this.tankMidpoint + (Math.sin(this.aimAngle) * this.size);\r\n        context.beginPath();\r\n        context.moveTo(this.xPos + this.tankMidpoint, this.yPos + this.tankMidpoint);\r\n        context.lineTo(endX, endY);\r\n        context.lineWidth = this.gunBarrellWidth;\r\n        context.stroke();\r\n    }\r\n\r\n    public updatePosition(playerTank: Tank): void {\r\n        // Move the tank\r\n        if(this.up() && this.right()) {\r\n            this.moveNorthEast();\r\n        }\r\n\r\n        else if(this.up() && this.left()) {\r\n            this.moveNorthWest();\r\n        }\r\n\r\n        else if(this.down() && this.right()) {\r\n            this.moveSouthEast();\r\n        }\r\n\r\n        else if(this.down() && this.left()) {\r\n            this.moveSouthWest();\r\n        }\r\n\r\n        else if(this.up()) {\r\n            this.moveNorth();\r\n        }\r\n\r\n        else if(this.down()) {\r\n            this.moveSouth();\r\n        }\r\n\r\n        else if(this.left()) {\r\n            this.moveWest();\r\n        }\r\n\r\n        else if(this.right()) {\r\n            this.moveEast();\r\n        }\r\n\r\n        this.xLeft = this.xPos;\r\n        this.xRight = this.xPos + this.size;\r\n        this.yTop = this.yPos;\r\n        this.yBottom = this.yPos + this.size;\r\n    }\r\n\r\n    public aim(mouseXPos: number, mouseYpos: number, playerTank: Tank): void {\r\n        if (this.isDestroyed) {\r\n            return;\r\n        }\r\n\r\n        let dy: number;\r\n        let dx: number;\r\n        dx = mouseXPos - this.xPos - this.tankMidpoint;\r\n        dy = mouseYpos - this.yPos - this.tankMidpoint;\r\n        let theta = Math.atan2(dy, dx);\r\n        if (theta < 0) {\r\n            theta += 2 * Math.PI;\r\n        }\r\n        this.aimAngle = theta;\r\n    }\r\n\r\n    public shoot(playerTank: Tank): void {\r\n        return;\r\n    }\r\n\r\n    public plantBomb(playerTank: Tank): void {\r\n        if (!this.isDestroyed) {\r\n            const availableBombIndex = this.bombs.findIndex(bomb => bomb.isDestroyed)\r\n            if (availableBombIndex !== -1) {\r\n                this.bombs[availableBombIndex].xPos = this.xPos + (this.size / 2);\r\n                this.bombs[availableBombIndex].yPos = this.yPos + (this.size / 2);\r\n                this.bombs[availableBombIndex].isDestroyed = false;\r\n                this.bombs[availableBombIndex].setFuse();\r\n            }\r\n        }\r\n        return;\r\n    }\r\n\r\n    public moveInLastDirectionMoved(): void {\r\n        this.moveInCardinalDirection(this.lastDirectionMoved);\r\n    }\r\n\r\n    public getRandomDirection<Direction>(): Direction[keyof Direction] {\r\n        const enumValues = Object.keys(Direction)\r\n          .map(n => Number.parseInt(n))\r\n          .filter(n => !Number.isNaN(n)) as unknown as Direction[keyof Direction][]\r\n        const randomIndex = Math.floor(Math.random() * enumValues.length)\r\n        const randomEnumValue = enumValues[randomIndex]\r\n        return randomEnumValue;\r\n    }\r\n\r\n    public moveInCardinalDirection(direction: Direction): void {\r\n        switch(direction) {\r\n            case Direction.NORTH: {\r\n                this.moveNorth();\r\n                break;\r\n            }\r\n            case Direction.SOUTH: {\r\n                this.moveSouth();\r\n                break;\r\n            }\r\n            case Direction.EAST: {\r\n                this.moveEast();\r\n                break;\r\n            }\r\n            case Direction.WEST: {\r\n                this.moveWest();\r\n                break;\r\n            }\r\n            case Direction.NORTHEAST: {\r\n                this.moveNorthEast();\r\n                break;\r\n            }\r\n            case Direction.NORTHWEST: {\r\n                this.moveNorthWest();\r\n                break;\r\n            }\r\n            case Direction.SOUTHEAST: {\r\n                this.moveSouthEast();\r\n                break;\r\n            }\r\n            case Direction.SOUTHWEST: {\r\n                this.moveSouthWest();\r\n                break;\r\n            }\r\n            default: {\r\n                const enumValues = Object.values(Direction).filter(value => typeof value === \"number\") as Direction[];\r\n                const randomIndex = Math.floor(Math.random() * enumValues.length);\r\n                this.moveInCardinalDirection(enumValues[randomIndex]);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    public moveNorth(): void {\r\n        if (this.lastDirectionMoved == Direction.NORTH) {\r\n            this.consecutiveDirectionMoves += 1;\r\n        }\r\n        else {\r\n            this.consecutiveDirectionMoves = 0;\r\n        }\r\n        this.lastDirectionMoved = Direction.NORTH\r\n        let blocked: boolean = false;\r\n        for (let i = 0; i < this.obstacleCanvas.obstacles.length; i++) {\r\n            const obstacle = this.obstacleCanvas.obstacles[i];\r\n            if (this.yPos - this.speed < obstacle.yTop + obstacle.height && this.yPos > obstacle.yTop &&\r\n                obstacle.xLeft < this.xPos + this.size && this.xPos < obstacle.xRight) {\r\n                this.yPos = obstacle.yBottom;\r\n                blocked = true;\r\n                break;\r\n            }\r\n        }\r\n        if (!blocked) {\r\n            this.yPos = Math.max(this.yPos - this.speed, 0);\r\n        }\r\n        else {\r\n            this.wasLastMoveBlocked = true;\r\n        }\r\n    }\r\n\r\n    public moveSouth(): void {\r\n        if (this.lastDirectionMoved == Direction.SOUTH) {\r\n            this.consecutiveDirectionMoves += 1;\r\n        }\r\n        else {\r\n            this.consecutiveDirectionMoves = 0;\r\n        }\r\n        this.lastDirectionMoved = Direction.SOUTH\r\n        let blocked: boolean = false;\r\n        for (let i = 0; i < this.obstacleCanvas.obstacles.length; i++) {\r\n            const obstacle = this.obstacleCanvas.obstacles[i];\r\n            if (this.yPos + this.speed + this.size > obstacle.yTop && this.yPos < obstacle.yTop + obstacle.height &&\r\n                obstacle.xLeft < this.xPos + this.size && this.xPos < obstacle.xRight) {\r\n                this.yPos = obstacle.yTop - this.size;\r\n                blocked = true;\r\n                break;\r\n            }\r\n        }\r\n        if (!blocked) {\r\n            this.yPos = Math.min(this.yPos + this.speed, this.canvasHeight - this.size);\r\n        }\r\n        else {\r\n            this.wasLastMoveBlocked = true;\r\n        }\r\n    }\r\n\r\n    public moveWest(): void {\r\n        if (this.lastDirectionMoved == Direction.WEST) {\r\n            this.consecutiveDirectionMoves += 1;\r\n        }\r\n        else {\r\n            this.consecutiveDirectionMoves = 0;\r\n        }\r\n        this.lastDirectionMoved = Direction.WEST\r\n        let blocked: boolean = false;\r\n        for (let i = 0; i < this.obstacleCanvas.obstacles.length; i++) {\r\n            const obstacle = this.obstacleCanvas.obstacles[i];\r\n            if (this.xPos - this.speed < obstacle.xRight && this.xPos > obstacle.xLeft &&\r\n                obstacle.yTop < this.yPos + this.size && this.yPos < obstacle.yBottom) {\r\n                this.xPos = obstacle.xRight;\r\n                blocked = true;\r\n                break;\r\n            }\r\n        }\r\n        if (!blocked) {\r\n            this.xPos = Math.max(this.xPos - this.speed, 0);\r\n        }\r\n        else {\r\n            this.wasLastMoveBlocked = true;\r\n        }\r\n    }\r\n\r\n    public moveEast(): void {\r\n        if (this.lastDirectionMoved == Direction.EAST) {\r\n            this.consecutiveDirectionMoves += 1;\r\n        }\r\n        else {\r\n            this.consecutiveDirectionMoves = 0;\r\n        }\r\n        this.lastDirectionMoved = Direction.EAST\r\n        let blocked: boolean = false;\r\n        for (let i = 0; i < this.obstacleCanvas.obstacles.length; i++) {\r\n            const obstacle = this.obstacleCanvas.obstacles[i];\r\n            if (this.xPos + this.speed + this.size > obstacle.xLeft && this.xPos < obstacle.xLeft + obstacle.width &&\r\n                obstacle.yTop < this.yPos + this.size && this.yPos < obstacle.yBottom) {\r\n                this.xPos = obstacle.xLeft - this.size;\r\n                blocked = true;\r\n                break;\r\n            }\r\n        }\r\n        if (!blocked) {\r\n            this.xPos = Math.min(this.xPos + this.speed, this.canvasWidth - this.size);\r\n        }\r\n        else {\r\n            this.wasLastMoveBlocked = true;\r\n        }\r\n    }\r\n\r\n    public moveNorthEast(): void {\r\n        if (this.lastDirectionMoved == Direction.NORTHEAST) {\r\n            this.consecutiveDirectionMoves += 1;\r\n        }\r\n        else {\r\n            this.consecutiveDirectionMoves = 0;\r\n        }\r\n        this.lastDirectionMoved = Direction.NORTHEAST\r\n        let blockedNorth: boolean = false;\r\n        let blockedEast: boolean = false;\r\n        for (let i = 0; i < this.obstacleCanvas.obstacles.length; i++) {\r\n            const obstacle = this.obstacleCanvas.obstacles[i];\r\n            if (!blockedNorth && this.yPos - this.speed < obstacle.yTop + obstacle.height && this.yPos > obstacle.yTop &&\r\n                obstacle.xLeft < this.xPos + this.size && this.xPos < obstacle.xRight) {\r\n                this.yPos = obstacle.yBottom;\r\n                blockedNorth = true;\r\n            }\r\n            if (!blockedEast && this.xPos + this.speed + this.size > obstacle.xLeft && this.xPos < obstacle.xLeft + obstacle.width &&\r\n                obstacle.yTop < this.yPos + this.size && this.yPos < obstacle.yBottom) {\r\n                this.xPos = obstacle.xLeft - this.size;\r\n                blockedEast = true;\r\n            }\r\n        }\r\n        if (blockedNorth && blockedEast) {\r\n            this.wasLastMoveBlocked = true;\r\n        }\r\n        if (!blockedNorth) {\r\n            this.yPos = Math.max(this.yPos - this.speed, 0);\r\n        }\r\n        if (!blockedEast) {\r\n            this.xPos = Math.min(this.xPos + this.speed, this.canvasWidth - this.size);\r\n        }\r\n    }\r\n\r\n    public moveNorthWest(): void {\r\n        if (this.lastDirectionMoved == Direction.NORTHWEST) {\r\n            this.consecutiveDirectionMoves += 1;\r\n        }\r\n        else {\r\n            this.consecutiveDirectionMoves = 0;\r\n        }\r\n        this.lastDirectionMoved = Direction.NORTHWEST\r\n        let blockedNorth: boolean = false;\r\n        let blockedWest: boolean = false;\r\n\r\n        for (let i = 0; i < this.obstacleCanvas.obstacles.length; i++) {\r\n            const obstacle = this.obstacleCanvas.obstacles[i];\r\n            if (!blockedNorth && this.yPos - this.speed < obstacle.yTop + obstacle.height && this.yPos > obstacle.yTop &&\r\n                obstacle.xLeft < this.xPos + this.size && this.xPos < obstacle.xRight) {\r\n                this.yPos = obstacle.yBottom;\r\n                blockedNorth = true;\r\n            }\r\n            if (!blockedWest && this.xPos - this.speed < obstacle.xRight && this.xPos > obstacle.xLeft &&\r\n                obstacle.yTop < this.yPos + this.size && this.yPos < obstacle.yBottom) {\r\n                this.xPos = obstacle.xRight;\r\n                blockedWest = true;\r\n            }\r\n        }\r\n        if (blockedNorth && blockedWest) {\r\n            this.wasLastMoveBlocked = true;\r\n        }\r\n        if (!blockedNorth) {\r\n            this.yPos = Math.max(this.yPos - this.speed, 0);\r\n        }\r\n        if (!blockedWest) {\r\n            this.xPos = Math.max(this.xPos - this.speed, 0);\r\n        }\r\n    }\r\n\r\n    public moveSouthEast(): void {\r\n        if (this.lastDirectionMoved == Direction.SOUTHEAST) {\r\n            this.consecutiveDirectionMoves += 1;\r\n        }\r\n        else {\r\n            this.consecutiveDirectionMoves = 0;\r\n        }\r\n        this.lastDirectionMoved = Direction.SOUTHEAST\r\n        let blockedSouth: boolean = false;\r\n        let blockedEast: boolean = false;\r\n        for (let i = 0; i < this.obstacleCanvas.obstacles.length; i++) {\r\n            const obstacle = this.obstacleCanvas.obstacles[i];\r\n            if (!blockedSouth && this.yPos + this.speed + this.size > obstacle.yTop && this.yPos < obstacle.yTop + obstacle.height &&\r\n                obstacle.xLeft < this.xPos + this.size && this.xPos < obstacle.xRight) {\r\n                this.yPos = obstacle.yTop - this.size;\r\n                blockedSouth = true;\r\n            }\r\n            if (!blockedEast && this.xPos + this.speed + this.size > obstacle.xLeft && this.xPos < obstacle.xLeft + obstacle.width &&\r\n                obstacle.yTop < this.yPos + this.size && this.yPos < obstacle.yBottom) {\r\n                this.xPos = obstacle.xLeft - this.size;\r\n                blockedEast = true;\r\n            }\r\n        }\r\n        if (blockedSouth && blockedEast) {\r\n            this.wasLastMoveBlocked = true;\r\n        }\r\n        if (!blockedSouth) {\r\n            this.yPos = Math.min(this.yPos + this.speed, this.canvasHeight - this.size);\r\n        }\r\n        if (!blockedEast) {\r\n            this.xPos = Math.min(this.xPos + this.speed, this.canvasWidth - this.size);\r\n        }\r\n    }\r\n\r\n    public moveSouthWest(): void {\r\n        if (this.lastDirectionMoved == Direction.SOUTHWEST) {\r\n            this.consecutiveDirectionMoves += 1;\r\n        }\r\n        else {\r\n            this.consecutiveDirectionMoves = 0;\r\n        }\r\n        this.lastDirectionMoved = Direction.SOUTHWEST\r\n        let blockedSouth: boolean = false;\r\n        let blockedWest: boolean = false;\r\n        for (let i = 0; i < this.obstacleCanvas.obstacles.length; i++) {\r\n            const obstacle = this.obstacleCanvas.obstacles[i];\r\n            if (!blockedSouth && this.yPos + this.speed + this.size > obstacle.yTop && this.yPos < obstacle.yTop + obstacle.height &&\r\n                obstacle.xLeft < this.xPos + this.size && this.xPos < obstacle.xRight) {\r\n                this.yPos = obstacle.yTop - this.size;\r\n                blockedSouth = true;\r\n            }\r\n            if (!blockedWest && this.xPos - this.speed < obstacle.xRight && this.xPos > obstacle.xLeft &&\r\n                obstacle.yTop < this.yPos + this.size && this.yPos < obstacle.yBottom) {\r\n                this.xPos = obstacle.xRight;\r\n                blockedWest = true;\r\n            }\r\n        }\r\n        if (blockedSouth && blockedWest) {\r\n            this.wasLastMoveBlocked = true;\r\n        }\r\n        if (!blockedSouth) {\r\n            this.yPos = Math.min(this.yPos + this.speed, this.canvasHeight - this.size);\r\n        }\r\n        if (!blockedWest) {\r\n            this.xPos = Math.max(this.xPos - this.speed, 0);\r\n        }\r\n    }\r\n\r\n    public up(): boolean {\r\n        return this.keyStates.ArrowUp || this.keyStates.w || this.keyStates.W;\r\n    }\r\n\r\n    public down(): boolean {\r\n        return this.keyStates.ArrowDown || this.keyStates.s || this.keyStates.S;\r\n    }\r\n\r\n    public left(): boolean {\r\n        return this.keyStates.ArrowLeft || this.keyStates.a || this.keyStates.A;\r\n    }\r\n\r\n    public right(): boolean {\r\n        return this.keyStates.ArrowRight || this.keyStates.d || this.keyStates.D;\r\n    }\r\n}\r\n\r\nexport class PlayerTank extends Tank {\r\n    constructor(canvas: HTMLCanvasElement, reticule: Reticule, xPos: number, yPos: number, speed: number, size: number, color: string, obstacleCanvas: ObstacleCanvas, ammunition: Ammunition[], bombs: Bomb[], audioManager: AudioManager) {\r\n        super(canvas, reticule, xPos, yPos, speed, size, color, obstacleCanvas, ammunition, bombs, audioManager)\r\n\r\n        document.addEventListener('keydown', (event: KeyboardEvent) => {\r\n            if (this.keyStates.hasOwnProperty(event.key)) {\r\n                this.keyStates[event.key] = true;\r\n            }\r\n        });\r\n\r\n        document.addEventListener('keydown', (event: KeyboardEvent) => {\r\n            if (event.code === 'Space') {\r\n                this.plantBomb(this);\r\n            }\r\n        });\r\n\r\n        document.addEventListener('keyup', (event: KeyboardEvent) => {\r\n            if (this.keyStates.hasOwnProperty(event.key)) {\r\n                this.keyStates[event.key] = false;\r\n            }\r\n        });\r\n\r\n        canvas.addEventListener('mousemove', (event: MouseEvent) => {\r\n            this.aimXPos = event.clientX - this.xOffset;\r\n            this.aimYPos = event.clientY - this.yOffset;\r\n        });\r\n\r\n        canvas.addEventListener('click', (event: MouseEvent) => {\r\n            this.shoot(this);\r\n        });\r\n    }\r\n\r\n    public override aim(mouseXPos: number, mouseYpos: number, playerTank: Tank): void {\r\n        if (this.isDestroyed) {\r\n            return;\r\n        }\r\n        let dy: number;\r\n        let dx: number;\r\n        dx = mouseXPos - this.xPos - this.tankMidpoint;\r\n        dy = mouseYpos - this.yPos - this.tankMidpoint;\r\n        let theta = Math.atan2(dy, dx);\r\n        if (theta < 0) {\r\n            theta += 2 * Math.PI;\r\n        }\r\n        this.aimAngle = theta;\r\n    }\r\n\r\n    public override shoot(playerTank: Tank): void {\r\n        if (!this.isDestroyed) {\r\n            const availableAmmunitionIndex = this.ammunition.findIndex(ammunition => ammunition.isDestroyed)\r\n            if (availableAmmunitionIndex !== -1) {\r\n                this.audioManager.play(AudioFile.TANK_FIRE);\r\n                this.ammunition[availableAmmunitionIndex] = new PlayerAmmunition(this.xPos + (this.size / 2), this.yPos + (this.size / 2), this.aimAngle, this.canvasWidth, this.canvasHeight, false, this.audioManager);\r\n            }\r\n        }\r\n        return;\r\n    }\r\n}\r\n\r\nexport class EnemyTank extends Tank {\r\n    constructor(canvas: HTMLCanvasElement, reticule: Reticule, xPos: number, yPos: number, speed: number, size: number, color: string, obstacleCanvas: ObstacleCanvas, ammunition: Ammunition[], bombs: Bomb[], audioManager: AudioManager) {\r\n        super(canvas, reticule, xPos, yPos, speed, size, color, obstacleCanvas, ammunition, bombs, audioManager)\r\n    }\r\n}\r\n\r\nexport class StationaryTank extends EnemyTank {\r\n    minTimeBetweenShotsMS: number = 5000;\r\n    canTakeShot: boolean = true;\r\n\r\n    constructor(canvas: HTMLCanvasElement, xPos: number, yPos: number, obstacleCanvas: ObstacleCanvas, audioManager: AudioManager) {\r\n        let fastTankSpeed: number = 0;\r\n        let fastTankSize: number = 30;\r\n        let fastTankColor: string = '#5784ba';\r\n        let ammunition: Ammunition[] = [\r\n            new BasicAIAmmunition(0, 0, 0, 0, 0, true, audioManager),\r\n        ]\r\n        let bombs: Bomb[] = [];\r\n        super(canvas, new NoReticule(), xPos, yPos, fastTankSpeed, fastTankSize, fastTankColor, obstacleCanvas, ammunition, bombs, audioManager);\r\n    }\r\n\r\n    public override updatePosition(playerTank: Tank): void {\r\n        return; \r\n    }\r\n\r\n    public override shoot(): void {\r\n        if (!this.canTakeShot || this.isDestroyed) {\r\n            return;\r\n        }\r\n        const availableAmmunitionIndex = this.ammunition.findIndex(ammunition => ammunition.isDestroyed)\r\n        if (availableAmmunitionIndex !== -1) {\r\n            this.ammunition[availableAmmunitionIndex] = new BasicAIAmmunition(this.xPos + (this.size / 2), this.yPos + (this.size / 2), this.aimAngle, this.canvasWidth, this.canvasHeight, false, this.audioManager);\r\n            this.canTakeShot = false;\r\n            setTimeout(() => {\r\n                this.canTakeShot = true;\r\n            }, this.minTimeBetweenShotsMS)\r\n        }\r\n        return;\r\n    }\r\n\r\n    public override aim(mouseXPos: number, mouseYpos: number, playerTank: Tank): void {\r\n        if (this.isDestroyed) {\r\n            return;\r\n        }\r\n\r\n        let dy: number;\r\n        let dx: number;\r\n        dx = playerTank.xPos + (playerTank.size / 2) - this.xPos - this.tankMidpoint;\r\n        dy = playerTank.yPos + (playerTank.size / 2) - this.yPos - this.tankMidpoint;\r\n        let theta = Math.atan2(dy, dx);\r\n        if (theta < 0) {\r\n            theta += 2 * Math.PI;\r\n        }\r\n        this.aimAngle = theta;\r\n    }\r\n}\r\n\r\nexport class StationaryRandomAimTank extends EnemyTank {\r\n    public aimAngleChangeAmount: number = 0\r\n\r\n    constructor(canvas: HTMLCanvasElement, xPos: number, yPos: number, obstacleCanvas: ObstacleCanvas, ammunition: Ammunition[], audioManager: AudioManager) {\r\n        let fastTankSpeed: number = 0;\r\n        let fastTankSize: number = 30;\r\n        let fastTankColor: string = '#ebe1b9';\r\n        let bombs: Bomb[] = [];\r\n        super(canvas, new NoReticule(), xPos, yPos, fastTankSpeed, fastTankSize, fastTankColor, obstacleCanvas, ammunition, bombs, audioManager);\r\n    }\r\n\r\n    private getAngleChangeAmount(): number {\r\n        let max: number = 360;\r\n        let min: number = -360;\r\n        let randomAmount: number = Math.floor(Math.random() * (max - min + 1)) + min; \r\n        return randomAmount;\r\n    }\r\n\r\n    public override updatePosition(playerTank: Tank): void {\r\n        return;\r\n    }\r\n\r\n    public override shoot(playerTank: Tank): void {\r\n        const availableAmmunitionIndex = this.ammunition.findIndex(ammunition => ammunition.isDestroyed)\r\n        if (availableAmmunitionIndex !== -1) {\r\n            this.ammunition[availableAmmunitionIndex].reload(this.xPos + (this.size / 2), this.yPos + (this.size / 2), this.aimAngle, true, this.canvasWidth, this.canvasHeight);\r\n            let willHitPlayerTank: boolean = this.ammunition[availableAmmunitionIndex].willHitPlayerTank(this.obstacleCanvas, playerTank);\r\n            if (willHitPlayerTank) {\r\n                this.ammunition[availableAmmunitionIndex].isDestroyed = false;\r\n            }\r\n        }\r\n        return;\r\n    }\r\n\r\n    public override aim(mouseXPos: number, mouseYpos: number, playerTank: Tank): void {\r\n        if (this.isDestroyed) {\r\n            return;\r\n        }\r\n        if (this.aimAngleChangeAmount > 0) {\r\n            this.aimAngle += 0.01\r\n            this.aimAngleChangeAmount -= 1\r\n        }\r\n        else if (this.aimAngleChangeAmount < 0) {\r\n            this.aimAngle -= 0.01\r\n            this.aimAngleChangeAmount += 1\r\n        }\r\n        else {\r\n            this.aimAngleChangeAmount = this.getAngleChangeAmount()\r\n        }\r\n    }\r\n}\r\n\r\nexport class SimpleMovingTank extends EnemyTank {\r\n    public aimAngleChangeAmount: number = 0\r\n    public navigationGrid: NavigationGrid;\r\n    public aggressionFactor: number = 15; // Distance tank should maintain from its target\r\n    public currentNode: Node;\r\n    public path: Node[] | null = []\r\n    public pathRecaculationInterval: number = 60;\r\n    public drawNavigationGrid: boolean = false;\r\n\r\n    constructor(canvas: HTMLCanvasElement, xPos: number, yPos: number, obstacleCanvas: ObstacleCanvas, ammunition: Ammunition[], bombs: Bomb[], navigationGrid: NavigationGrid, audioManager: AudioManager) {\r\n        let simpleMovingTankSpeed: number = 1.2;\r\n        let simpleMovingTankSize: number = 30;\r\n        let simpleMovingTankColor: string = '#fd8a8a';\r\n        super(canvas, new NoReticule(), xPos, yPos, simpleMovingTankSpeed, simpleMovingTankSize, simpleMovingTankColor, obstacleCanvas, ammunition, bombs, audioManager);\r\n        this.navigationGrid = navigationGrid\r\n        this.currentNode = this.navigationGrid.getNodeFromTank(this)\r\n    }\r\n\r\n    public override draw(context: CanvasRenderingContext2D): void {\r\n        if (this.drawNavigationGrid) {\r\n            context.lineWidth = 1;\r\n            for (let i = 0; i <= this.navigationGrid.gridYLength; i++) {\r\n                context.fillStyle = \"blue\"\r\n                context.beginPath();\r\n                context.moveTo(0, i * this.navigationGrid.gridCellWidth);\r\n                context.lineTo(this.navigationGrid.gridXLength * this.navigationGrid.gridCellWidth, i * this.navigationGrid.gridCellWidth);\r\n                context.stroke();\r\n            }\r\n            for (let j = 0; j <= this.navigationGrid.gridXLength; j++) {\r\n                context.fillStyle = \"blue\"\r\n                context.beginPath();\r\n                context.moveTo(j * this.navigationGrid.gridCellWidth, 0);\r\n                context.lineTo(j * this.navigationGrid.gridCellWidth, this.navigationGrid.gridXLength * this.navigationGrid.gridCellWidth);\r\n                context.stroke();\r\n            }\r\n            context.fillStyle = this.color;\r\n            this.path?.forEach((value: Node, index:  number, array: Node[])=> {\r\n                context.beginPath();\r\n                context.arc(value.x * this.navigationGrid.gridCellWidth + this.navigationGrid.gridCellWidth / 2, value.y * this.navigationGrid.gridCellWidth + this.navigationGrid.gridCellWidth / 2, 5, 0, 2 * Math.PI);\r\n                context.fill();\r\n            })\r\n        }\r\n        super.draw(context);\r\n    }\r\n\r\n    public override updatePosition(playerTank: Tank): void {\r\n        this.pathRecaculationInterval -= 1;\r\n        if (this.path == null || this.path.length == 0 || this.pathRecaculationInterval == 0) {\r\n            this.navigationGrid.reset();\r\n            let startNode: Node = this.navigationGrid.getNodeFromTank(this);\r\n            let targetNode: Node = this.navigationGrid.getNodeFromTank(playerTank);\r\n            let destinationNode: Node = this.navigationGrid.getRandomNodeInRadiusOfTarget(targetNode, this.aggressionFactor);\r\n            this.path = this.navigationGrid.aStar(startNode, destinationNode);\r\n            this.pathRecaculationInterval = 60;\r\n            if (this.path == null) {\r\n                console.log(`Path is null`)\r\n            }\r\n        } else {\r\n            this.currentNode = this.navigationGrid.getNodeFromTank(this);\r\n            let dx = this.path[0].x - this.currentNode.x;\r\n            let dy = this.path[0].y - this.currentNode.y;\r\n\r\n            if (this.wasLastMoveBlocked && this.consecutiveDirectionMoves > 2) {\r\n                let randomDirection: Direction = this.getRandomDirection();\r\n                this.moveInCardinalDirection(randomDirection);\r\n                this.consecutiveDirectionMoves = 0;\r\n                let randomNumber: number = Math.random();\r\n                if (dx === 1 && dy === 0) {\r\n                    if (randomNumber < 0.5) {\r\n                        this.moveSouthEast();\r\n                    }\r\n                    else {\r\n                        this.moveNorthEast();\r\n                    }\r\n                } else if (dx === -1 && dy === 0) {\r\n                    if (randomNumber < 0.5) {\r\n                        this.moveNorthWest();\r\n                    }\r\n                    else {\r\n                        this.moveSouthWest();\r\n                    }\r\n                } else if (dx === 0 && dy === 1) {\r\n                    if (randomNumber < 0.5) {\r\n                        this.moveSouthEast();\r\n                    }\r\n                    else {\r\n                        this.moveSouthWest();\r\n                    }\r\n                } else if (dx === 0 && dy === -1) {\r\n                    if (randomNumber < 0.5) {\r\n                        this.moveNorthWest();\r\n                    }\r\n                    else {\r\n                        this.moveNorthEast();\r\n                    }\r\n                } else if (dx === 1 && dy === 1) {\r\n                    if (randomNumber < 0.5) {\r\n                        this.moveSouth();\r\n                    }\r\n                    else {\r\n                        this.moveEast();\r\n                    }\r\n                } else if (dx === 1 && dy === -1) {\r\n                    if (randomNumber < 0.5) {\r\n                        this.moveNorth();\r\n                    }\r\n                    else {\r\n                        this.moveEast();\r\n                    }\r\n                } else if (dx === -1 && dy === 1) {\r\n                    if (randomNumber < 0.5) {\r\n                        this.moveSouth();\r\n                    }\r\n                    else {\r\n                        this.moveWest();\r\n                    }\r\n                } else if (dx === -1 && dy === -1) {\r\n                    if (randomNumber < 0.5) {\r\n                        this.moveNorth();\r\n                    }\r\n                    else {\r\n                        this.moveWest();\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                if (dx === 1 && dy === 0) {\r\n                    this.moveEast();\r\n                } else if (dx === -1 && dy === 0) {\r\n                    this.moveWest();\r\n                } else if (dx === 0 && dy === 1) {\r\n                    this.moveSouth();\r\n                } else if (dx === 0 && dy === -1) {\r\n                    this.moveNorth();\r\n                } else if (dx === 1 && dy === 1) {\r\n                    this.moveSouthEast();\r\n                } else if (dx === 1 && dy === -1) {\r\n                    this.moveNorthEast();\r\n                } else if (dx === -1 && dy === 1) {\r\n                    this.moveSouthWest();\r\n                } else if (dx === -1 && dy === -1) {\r\n                    this.moveNorthWest();\r\n                }\r\n            }\r\n\r\n            if(this.path[0].x == this.currentNode.x && this.path[0].y == this.currentNode.y) {\r\n                this.path.splice(0, 1);\r\n            }\r\n        }\r\n\r\n        this.xLeft = this.xPos;\r\n        this.xRight = this.xPos + this.size;\r\n        this.yTop = this.yPos;\r\n        this.yBottom = this.yPos + this.size;\r\n    }\r\n\r\n    public override shoot(playerTank: Tank): void {\r\n        const availableAmmunitionIndex = this.ammunition.findIndex(ammunition => ammunition.isDestroyed)\r\n        if (availableAmmunitionIndex !== -1) {\r\n            this.ammunition[availableAmmunitionIndex].reload(this.xPos + (this.size / 2), this.yPos + (this.size / 2), this.aimAngle, true, this.canvasWidth, this.canvasHeight);\r\n            let willHitPlayerTank: boolean = this.ammunition[availableAmmunitionIndex].willHitPlayerTank(this.obstacleCanvas, playerTank);\r\n            if (willHitPlayerTank) {\r\n                this.ammunition[availableAmmunitionIndex].isDestroyed = false;\r\n            }\r\n        }\r\n        return;\r\n    }\r\n\r\n    public override aim(mouseXPos: number, mouseYpos: number, playerTank: Tank): void {\r\n        if (this.isDestroyed) {\r\n            return;\r\n        }\r\n\r\n        let dy: number;\r\n        let dx: number;\r\n        dx = playerTank.xPos + (playerTank.size / 2) - this.xPos - this.tankMidpoint;\r\n        dy = playerTank.yPos + (playerTank.size / 2) - this.yPos - this.tankMidpoint;\r\n        let theta = Math.atan2(dy, dx);\r\n        if (theta < 0) {\r\n            theta += 2 * Math.PI;\r\n        }\r\n        this.aimAngle = theta;\r\n    }\r\n}\r\n\r\nexport class BomberTank extends EnemyTank {\r\n    public aimAngleChangeAmount: number = 0\r\n    public navigationGrid: NavigationGrid;\r\n    public aggressionFactor: number = 5; // Distance tank should maintain from its target\r\n    public currentNode: Node;\r\n    public path: Node[] | null = []\r\n    public pathRecaculationInterval: number = 60;\r\n    public drawNavigationGrid: boolean = false;\r\n\r\n    public minTimeBetweenShotsMS: number = 20000;\r\n    public timeBetweenShotsIsElapsed: boolean = true;\r\n    public minTimeBetweenBombPlantsMS: number = 1000;\r\n    public timeBetweenPlantsIsElapsed: boolean = true;\r\n\r\n    constructor(canvas: HTMLCanvasElement, xPos: number, yPos: number, obstacleCanvas: ObstacleCanvas, ammunition: Ammunition[], bombs: Bomb[], navigationGrid: NavigationGrid, audioManager: AudioManager) {\r\n        let simpleMovingTankSpeed: number = 2;\r\n        let simpleMovingTankSize: number = 30;\r\n        let simpleMovingTankColor: string = 'yellow';\r\n        super(canvas, new NoReticule(), xPos, yPos, simpleMovingTankSpeed, simpleMovingTankSize, simpleMovingTankColor, obstacleCanvas, ammunition, bombs, audioManager);\r\n        this.navigationGrid = navigationGrid\r\n        this.currentNode = this.navigationGrid.getNodeFromTank(this)\r\n    }\r\n\r\n    public override draw(context: CanvasRenderingContext2D): void {\r\n        if (this.drawNavigationGrid) {\r\n            context.lineWidth = 1;\r\n            for (let i = 0; i <= this.navigationGrid.gridYLength; i++) {\r\n                context.fillStyle = \"blue\"\r\n                context.beginPath();\r\n                context.moveTo(0, i * this.navigationGrid.gridCellWidth);\r\n                context.lineTo(this.navigationGrid.gridXLength * this.navigationGrid.gridCellWidth, i * this.navigationGrid.gridCellWidth);\r\n                context.stroke();\r\n            }\r\n            for (let j = 0; j <= this.navigationGrid.gridXLength; j++) {\r\n                context.fillStyle = \"blue\"\r\n                context.beginPath();\r\n                context.moveTo(j * this.navigationGrid.gridCellWidth, 0);\r\n                context.lineTo(j * this.navigationGrid.gridCellWidth, this.navigationGrid.gridXLength * this.navigationGrid.gridCellWidth);\r\n                context.stroke();\r\n            }\r\n            context.fillStyle = this.color;\r\n            this.path?.forEach((value: Node, index:  number, array: Node[])=> {\r\n                context.beginPath();\r\n                context.arc(value.x * this.navigationGrid.gridCellWidth + this.navigationGrid.gridCellWidth / 2, value.y * this.navigationGrid.gridCellWidth + this.navigationGrid.gridCellWidth / 2, 5, 0, 2 * Math.PI);\r\n                context.fill();\r\n            })\r\n        }\r\n        super.draw(context);\r\n    }\r\n\r\n    public override updatePosition(playerTank: Tank): void {\r\n        this.pathRecaculationInterval -= 1;\r\n        if (this.path == null || this.path.length == 0 || this.pathRecaculationInterval == 0) {\r\n            this.navigationGrid.reset();\r\n            let startNode: Node = this.navigationGrid.getNodeFromTank(this);\r\n            let targetNode: Node = this.navigationGrid.getNodeFromTank(playerTank);\r\n            let destinationNode: Node = this.navigationGrid.getRandomNodeInRadiusOfTarget(targetNode, this.aggressionFactor);\r\n            this.path = this.navigationGrid.aStar(startNode, destinationNode);\r\n            this.pathRecaculationInterval = 60;\r\n            if (this.path == null) {\r\n                console.log(`Path is null`)\r\n            }\r\n        } else {\r\n            this.currentNode = this.navigationGrid.getNodeFromTank(this);\r\n            let dx = this.path[0].x - this.currentNode.x;\r\n            let dy = this.path[0].y - this.currentNode.y;\r\n\r\n            if (this.wasLastMoveBlocked && this.consecutiveDirectionMoves > 2) {\r\n                let randomDirection: Direction = this.getRandomDirection();\r\n                this.moveInCardinalDirection(randomDirection);\r\n                this.consecutiveDirectionMoves = 0;\r\n                let randomNumber: number = Math.random();\r\n                if (dx === 1 && dy === 0) {\r\n                    if (randomNumber < 0.5) {\r\n                        this.moveSouthEast();\r\n                    }\r\n                    else {\r\n                        this.moveNorthEast();\r\n                    }\r\n                } else if (dx === -1 && dy === 0) {\r\n                    if (randomNumber < 0.5) {\r\n                        this.moveNorthWest();\r\n                    }\r\n                    else {\r\n                        this.moveSouthWest();\r\n                    }\r\n                } else if (dx === 0 && dy === 1) {\r\n                    if (randomNumber < 0.5) {\r\n                        this.moveSouthEast();\r\n                    }\r\n                    else {\r\n                        this.moveSouthWest();\r\n                    }\r\n                } else if (dx === 0 && dy === -1) {\r\n                    if (randomNumber < 0.5) {\r\n                        this.moveNorthWest();\r\n                    }\r\n                    else {\r\n                        this.moveNorthEast();\r\n                    }\r\n                } else if (dx === 1 && dy === 1) {\r\n                    if (randomNumber < 0.5) {\r\n                        this.moveSouth();\r\n                    }\r\n                    else {\r\n                        this.moveEast();\r\n                    }\r\n                } else if (dx === 1 && dy === -1) {\r\n                    if (randomNumber < 0.5) {\r\n                        this.moveNorth();\r\n                    }\r\n                    else {\r\n                        this.moveEast();\r\n                    }\r\n                } else if (dx === -1 && dy === 1) {\r\n                    if (randomNumber < 0.5) {\r\n                        this.moveSouth();\r\n                    }\r\n                    else {\r\n                        this.moveWest();\r\n                    }\r\n                } else if (dx === -1 && dy === -1) {\r\n                    if (randomNumber < 0.5) {\r\n                        this.moveNorth();\r\n                    }\r\n                    else {\r\n                        this.moveWest();\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                if (dx === 1 && dy === 0) {\r\n                    this.moveEast();\r\n                } else if (dx === -1 && dy === 0) {\r\n                    this.moveWest();\r\n                } else if (dx === 0 && dy === 1) {\r\n                    this.moveSouth();\r\n                } else if (dx === 0 && dy === -1) {\r\n                    this.moveNorth();\r\n                } else if (dx === 1 && dy === 1) {\r\n                    this.moveSouthEast();\r\n                } else if (dx === 1 && dy === -1) {\r\n                    this.moveNorthEast();\r\n                } else if (dx === -1 && dy === 1) {\r\n                    this.moveSouthWest();\r\n                } else if (dx === -1 && dy === -1) {\r\n                    this.moveNorthWest();\r\n                }\r\n            }\r\n\r\n            if(this.path[0].x == this.currentNode.x && this.path[0].y == this.currentNode.y) {\r\n                this.path.splice(0, 1);\r\n            }\r\n        }\r\n\r\n        this.xLeft = this.xPos;\r\n        this.xRight = this.xPos + this.size;\r\n        this.yTop = this.yPos;\r\n        this.yBottom = this.yPos + this.size;\r\n    }\r\n\r\n    public override plantBomb(playerTank: Tank): void {\r\n        if (this.timeBetweenPlantsIsElapsed && !this.isDestroyed) {\r\n            const availableBombIndex = this.bombs.findIndex(bomb => bomb.isDestroyed)\r\n            if (availableBombIndex !== -1) {\r\n                this.bombs[availableBombIndex].xPos = this.xPos + (this.size / 2);\r\n                this.bombs[availableBombIndex].yPos = this.yPos + (this.size / 2);\r\n                let willHitPlayerTank: boolean = this.bombs[availableBombIndex].isPointInsideBlastRadius(playerTank.xPos + playerTank.tankMidpoint, playerTank.yPos + playerTank.tankMidpoint)\r\n                if (willHitPlayerTank) {\r\n                    this.bombs[availableBombIndex].isDestroyed = false;\r\n                    this.bombs[availableBombIndex].setFuse();\r\n                    this.timeBetweenPlantsIsElapsed = false;\r\n                    setTimeout(() => {\r\n                        this.timeBetweenPlantsIsElapsed = true;\r\n                    }, this.minTimeBetweenBombPlantsMS)\r\n                }\r\n            }\r\n        }\r\n        return;\r\n    }\r\n\r\n    public override shoot(playerTank: Tank): void {\r\n        if (this.timeBetweenShotsIsElapsed && !this.isDestroyed) {\r\n            const availableAmmunitionIndex = this.ammunition.findIndex(ammunition => ammunition.isDestroyed)\r\n            if (availableAmmunitionIndex !== -1) {\r\n                this.ammunition[availableAmmunitionIndex].reload(this.xPos + (this.size / 2), this.yPos + (this.size / 2), this.aimAngle, true, this.canvasWidth, this.canvasHeight);\r\n                let willHitPlayerTank: boolean = this.ammunition[availableAmmunitionIndex].willHitPlayerTank(this.obstacleCanvas, playerTank);\r\n                if (willHitPlayerTank) {\r\n                    this.ammunition[availableAmmunitionIndex].isDestroyed = false;\r\n                    this.timeBetweenShotsIsElapsed = false;\r\n                    setTimeout(() => {\r\n                        this.timeBetweenShotsIsElapsed = true;\r\n                    }, this.minTimeBetweenShotsMS)\r\n                }\r\n            }\r\n        }\r\n        return;\r\n    }\r\n\r\n    public override aim(mouseXPos: number, mouseYpos: number, playerTank: Tank): void {\r\n        if (this.isDestroyed) {\r\n            return;\r\n        }\r\n\r\n        let dy: number;\r\n        let dx: number;\r\n        dx = playerTank.xPos + (playerTank.size / 2) - this.xPos - this.tankMidpoint;\r\n        dy = playerTank.yPos + (playerTank.size / 2) - this.yPos - this.tankMidpoint;\r\n        let theta = Math.atan2(dy, dx);\r\n        if (theta < 0) {\r\n            theta += 2 * Math.PI;\r\n        }\r\n        this.aimAngle = theta;\r\n    }\r\n}\r\n\r\nexport class DefaultPlayerTank extends PlayerTank {\r\n    constructor(canvas: HTMLCanvasElement, xPos: number, yPos: number, obstacleCanvas: ObstacleCanvas, audioManager: AudioManager) {\r\n        let defaultPlayerTankSpeed: number = 2;\r\n        let defaultPlayerTankSize: number = 30;\r\n        let defaultPlayerTankColor: string = '#6384a1';\r\n        let ammunition: Ammunition[] = [\r\n            new PlayerAmmunition(0, 0, 0, 0, 0, true, audioManager),\r\n            new PlayerAmmunition(0, 0, 0, 0, 0, true, audioManager),\r\n            new PlayerAmmunition(0, 0, 0, 0, 0, true, audioManager),\r\n            new PlayerAmmunition(0, 0, 0, 0, 0, true, audioManager),\r\n            new PlayerAmmunition(0, 0, 0, 0, 0, true, audioManager),\r\n        ]\r\n        let bombs: Bomb[] = [\r\n            new PlayerBomb(0, 0, true, audioManager),\r\n            new PlayerBomb(0, 0, true, audioManager)\r\n        ];\r\n        super(canvas, new AdjustingCustomColorReticule(defaultPlayerTankSize, defaultPlayerTankColor, canvas.width), xPos, yPos, defaultPlayerTankSpeed, defaultPlayerTankSize, defaultPlayerTankColor, obstacleCanvas, ammunition, bombs, audioManager);\r\n    }\r\n}\r\n","import { ObstacleCanvas } from \"./ObstacleCanvas\";\r\nimport { Tank } from \"./Tank\";\r\nimport { AudioFile, AudioManager } from \"./AudioManager\";\r\n\r\nexport class Ammunition {\r\n    public xPos: number;\r\n    public yPos: number;\r\n    public xVelocity: number;\r\n    public yVelocity: number;\r\n    public theta: number;\r\n    public bounces: number;\r\n    public maxBounces: number;\r\n    public speed: number;\r\n    public canvasWidth: number;\r\n    public canvasHeight: number;\r\n    public isDestroyed: boolean;\r\n    public audioManager: AudioManager;\r\n\r\n    constructor (startX: number, startY: number, theta: number, speed: number, maxBounces: number, canvasWidth: number, canvasHeight: number, isDestroyed: boolean, audioManager: AudioManager) {\r\n        this.xPos = startX;\r\n        this.yPos = startY;\r\n        this.theta = theta;\r\n        this.speed = speed;\r\n        this.xVelocity = Math.cos(this.theta) * this.speed;\r\n        this.yVelocity = Math.sin(this.theta) * this.speed;\r\n        this.bounces = 0;\r\n        this.maxBounces = maxBounces;\r\n        this.canvasWidth = canvasWidth;\r\n        this.canvasHeight = canvasHeight;\r\n        this.isDestroyed = isDestroyed;\r\n        this.audioManager = audioManager;\r\n    }\r\n\r\n    updatePosition (obstacleCanvas: ObstacleCanvas): void {\r\n        this.xPos += this.xVelocity;\r\n        this.yPos += this.yVelocity;\r\n\r\n        if (this.xPos <= 0 || this.xPos > this.canvasWidth) {\r\n            this.xVelocity = -this.xVelocity;\r\n            this.bounces++;\r\n        }\r\n\r\n        if (this.yPos <= 0 || this.yPos > this.canvasHeight) {\r\n            this.yVelocity = -this.yVelocity;\r\n            this.bounces++;\r\n        }\r\n\r\n        obstacleCanvas.obstacles.forEach(obstacle => {\r\n            if (this.xPos > obstacle.xLeft && this.xPos < obstacle.xRight && this.yPos > obstacle.yTop && this.yPos < obstacle.yBottom) {\r\n              this.bounces++;\r\n              const fromLeft = Math.abs(this.xPos - obstacle.xLeft);\r\n              const fromRight = Math.abs(this.xPos - obstacle.xRight);\r\n              const fromTop = Math.abs(this.yPos - obstacle.yTop);\r\n              const fromBottom = Math.abs(this.yPos - obstacle.yBottom);\r\n              const minDistance = Math.min(fromLeft, fromRight, fromTop, fromBottom);\r\n          \r\n              if (minDistance === fromTop) {\r\n                this.yPos = obstacle.yTop - 1;\r\n                this.yVelocity = -this.yVelocity;\r\n              } else if (minDistance === fromBottom) {\r\n                this.yPos = obstacle.yBottom + 1;\r\n                this.yVelocity = -this.yVelocity;\r\n              } else if (minDistance === fromLeft) {\r\n                this.xPos = obstacle.xLeft - 1;\r\n                this.xVelocity = -this.xVelocity;\r\n              } else if (minDistance === fromRight) {\r\n                this.xPos = obstacle.xRight + 1;\r\n                this.xVelocity = -this.xVelocity;\r\n              }\r\n            }\r\n        });\r\n\r\n        if (this.bounces > this.maxBounces) {\r\n            this.isDestroyed = true;\r\n        }\r\n    }\r\n\r\n    checkEnemyHit (enemyTanks: Tank[]): void {\r\n        enemyTanks.forEach(enemyTank => {\r\n            if (enemyTank.isDestroyed) {\r\n                return;\r\n            }\r\n            if (this.xPos > enemyTank.xLeft && this.xPos < enemyTank.xRight && this.yPos > enemyTank.yTop && this.yPos < enemyTank.yBottom) {\r\n                this.isDestroyed = true;\r\n                enemyTank.isDestroyed = true;\r\n                this.audioManager.play(AudioFile.TANK_DESTROY);\r\n                console.log(\"Enemy hit!!!\");\r\n            }\r\n        })\r\n    }\r\n\r\n    checkPlayerHit (playerTank: Tank): void {\r\n        if (playerTank.isDestroyed) {\r\n            return;\r\n        }\r\n        if (this.xPos > playerTank.xLeft && this.xPos < playerTank.xRight && this.yPos > playerTank.yTop && this.yPos < playerTank.yBottom) {\r\n            playerTank.isDestroyed = true;\r\n            playerTank.isDestroyed = true;\r\n            this.isDestroyed = true;\r\n            console.log(\"Player Hit!!!\");\r\n        }\r\n    }\r\n\r\n    reload (startX: number, startY: number, theta: number, isDestroyed: boolean, canvasWidth: number, canvasHeight: number, ) {\r\n        this.xPos = startX;\r\n        this.yPos = startY;\r\n        this.theta = theta;\r\n        this.isDestroyed = isDestroyed;\r\n        this.xVelocity = Math.cos(this.theta) * this.speed;\r\n        this.yVelocity = Math.sin(this.theta) * this.speed;\r\n        this.canvasWidth = canvasWidth;\r\n        this.canvasHeight = canvasHeight;\r\n        this.bounces = 0;\r\n    }\r\n\r\n    draw (context: CanvasRenderingContext2D): void {\r\n        context.beginPath();\r\n        context.arc(this.xPos, this.yPos, 4, 0, 2 * Math.PI);\r\n        context.fillStyle = 'white';\r\n        context.fill();\r\n        context.lineWidth = 2;\r\n        context.strokeStyle = 'black';\r\n        context.stroke();\r\n        context.closePath();\r\n    }\r\n\r\n    willHitPlayerTank(obstacleCanvas: ObstacleCanvas, playerTank: Tank): boolean {\r\n        let predictedXPosition: number = this.xPos;\r\n        let predictedYPosition: number = this.yPos;\r\n        let predictedXVelocity: number = this.xVelocity;\r\n        let predictedYVelocity: number = this.yVelocity;\r\n        let predictedBounces: number = 0;\r\n        while (predictedBounces <= this.maxBounces) {\r\n            predictedXPosition += predictedXVelocity;\r\n            predictedYPosition += predictedYVelocity;\r\n            if (predictedXPosition <= 0 || predictedXPosition > this.canvasWidth) {\r\n                predictedXVelocity = -predictedXVelocity;\r\n                predictedBounces++;\r\n            }\r\n            if (predictedYPosition <= 0 || predictedYPosition > this.canvasHeight) {\r\n                predictedYVelocity = -predictedYVelocity;\r\n                predictedBounces++;\r\n            }\r\n            obstacleCanvas.obstacles.forEach(obstacle => {\r\n                if (predictedXPosition > obstacle.xLeft && predictedXPosition < obstacle.xRight && predictedYPosition > obstacle.yTop && predictedYPosition < obstacle.yBottom) {\r\n                    predictedBounces++;\r\n                    predictedXVelocity = -predictedXVelocity;\r\n                    predictedYVelocity = -predictedYVelocity;\r\n                }\r\n            });\r\n            if (predictedXPosition > playerTank.xLeft && predictedXPosition < playerTank.xRight && predictedYPosition > playerTank.yTop && predictedYPosition < playerTank.yBottom) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n}\r\n\r\nexport class PlayerAmmunition extends Ammunition {\r\n    constructor (startX: number, startY: number, theta: number, canvasWidth: number, canvasHeight: number, isDestroyed: boolean, audioManager: AudioManager) {\r\n        let playerAmmunitionMaxBounces: number = 1;\r\n        let playerAmmunitionSpeed: number = 4;\r\n        super(startX, startY, theta, playerAmmunitionSpeed, playerAmmunitionMaxBounces, canvasWidth, canvasHeight, isDestroyed, audioManager);\r\n    }\r\n}\r\n\r\nexport class BasicAIAmmunition extends Ammunition {\r\n    constructor (startX: number, startY: number, theta: number, canvasWidth: number, canvasHeight: number, isDestroyed: boolean, audioManager: AudioManager) {\r\n        let BasicAIAmmunitionMaxBounces: number = 0;\r\n        let BasicAIAmmunitionSpeed: number = 4;\r\n        super(startX, startY, theta, BasicAIAmmunitionSpeed, BasicAIAmmunitionMaxBounces, canvasWidth, canvasHeight, isDestroyed, audioManager);\r\n    }\r\n}\r\n\r\nexport class SuperAIAmmunition extends Ammunition {\r\n    constructor (startX: number, startY: number, theta: number, canvasWidth: number, canvasHeight: number, isDestroyed: boolean, audioManager: AudioManager) {\r\n        let superAIAmmunitionMaxBounces: number = 2;\r\n        let superAIAmmunitionSpeed: number = 6;\r\n        super(startX, startY, theta, superAIAmmunitionSpeed, superAIAmmunitionMaxBounces, canvasWidth, canvasHeight, isDestroyed, audioManager);\r\n    }\r\n}\r\n","export class Reticule {\r\n    protected color: string;\r\n    protected dashPattern: [number, number]; // [dashLengthInPixels, spaceLengthInPixels]\r\n    protected renderReticule: boolean;\r\n    protected tankSize: number;\r\n    protected reticuleWidth: number = 5;\r\n\r\n    constructor (dashPattern: [number, number], color: string, renderReticule: boolean, tankSize: number) {\r\n        this.color = color;\r\n        this.dashPattern = dashPattern;\r\n        this.renderReticule = renderReticule;\r\n        this.tankSize = tankSize;\r\n    }\r\n\r\n    public draw(context: CanvasRenderingContext2D, tankXPos: number, tankYPos: number, mouseXPos: number, mouseYpos: number): void {\r\n        if (this.renderReticule) {\r\n            context.strokeStyle = this.color;\r\n            context.setLineDash(this.dashPattern);\r\n            context.beginPath();\r\n            context.moveTo(tankXPos + (this.tankSize / 2), tankYPos + (this.tankSize / 2));\r\n            context.lineTo(mouseXPos, mouseYpos);\r\n            context.lineWidth = this.reticuleWidth\r\n            context.stroke();\r\n        }\r\n    }\r\n}\r\n\r\nexport class NoReticule extends Reticule {\r\n    constructor() {\r\n        super([0, 0], 'blue', false, 0);\r\n    }\r\n}\r\n\r\nexport class SimplePlayerReticule extends Reticule {\r\n    constructor(tankSize: number) {\r\n        super([5, 5], 'blue', true, tankSize);\r\n    }\r\n}\r\n\r\nexport class CustomColorReticule extends Reticule {\r\n    constructor(tankSize: number, color: string) {\r\n        super([4, 1], color, true, tankSize);\r\n    }\r\n}\r\n\r\nexport class AdjustingCustomColorReticule extends Reticule {\r\n    private maxReticuleLength: number;\r\n\r\n    constructor (tankSize: number, color: string, maxReticuleLength: number) {\r\n        super([1, 1], color, true, tankSize);\r\n        this.maxReticuleLength = maxReticuleLength;\r\n    }\r\n\r\n    override draw(context: CanvasRenderingContext2D, tankXPosition: number, tankYPosition: number, mouseXPosition: number, mouseYPosition: number): void {\r\n        const xDist = mouseXPosition - tankXPosition;\r\n        const yDist = mouseYPosition - tankYPosition;\r\n        const distance = Math.sqrt(Math.pow(xDist, 2) + Math.pow(yDist, 2));\r\n        const distanceToMaxDistanceRatio = distance / this.maxReticuleLength;\r\n        const distanceToMaxDistanceRatioInverse = 1 - distanceToMaxDistanceRatio;\r\n        let dashLength = distanceToMaxDistanceRatio * 10 + 2;\r\n        let spaceLength = distanceToMaxDistanceRatioInverse * 10 + 5;\r\n\r\n        if (this.renderReticule) {\r\n            context.strokeStyle = this.color;\r\n            context.setLineDash([dashLength, spaceLength]);\r\n            context.beginPath();\r\n            context.moveTo(tankXPosition + (this.tankSize / 2), tankYPosition + (this.tankSize / 2),);\r\n            context.lineTo(mouseXPosition, mouseYPosition);\r\n            context.lineWidth = this.reticuleWidth\r\n            context.stroke();\r\n\r\n            context.setLineDash([]);\r\n            let xLength = 10;\r\n            context.beginPath();\r\n            context.moveTo(mouseXPosition - xLength, mouseYPosition - xLength);\r\n            context.lineTo(mouseXPosition + xLength, mouseYPosition + xLength);\r\n            context.stroke();\r\n\r\n            context.beginPath();\r\n            context.moveTo(mouseXPosition - xLength, mouseYPosition + xLength);\r\n            context.lineTo(mouseXPosition + xLength, mouseYPosition - xLength);\r\n            context.stroke();\r\n        }\r\n    }\r\n}\r\n","import { AudioFile, AudioManager } from \"./AudioManager\";\r\nimport { Tank } from \"./Tank\";\r\n\r\nclass BombFragment {\r\n    public x: number;\r\n    public y: number;\r\n    public fragmentRadius: number;\r\n    public fragmentColor: string;\r\n    public velocityX: number;\r\n    public velocityY: number;\r\n    public blastRadius: number;\r\n    public life: number;\r\n\r\n    constructor(x: number, y: number, radius: number, color: string, velocityX: number, velocityY: number, life: number) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.fragmentRadius = radius;\r\n        this.fragmentColor = color;\r\n        this.velocityX = velocityX;\r\n        this.velocityY = velocityY;\r\n        this.blastRadius = life;\r\n        this.life = life;\r\n    }\r\n\r\n    update(): void {\r\n        this.x += this.velocityX;\r\n        this.y += this.velocityY;\r\n        this.life -= 1;\r\n    }\r\n\r\n    draw(context: CanvasRenderingContext2D): void {\r\n        context.beginPath();\r\n        context.arc(this.x, this.y, this.fragmentRadius * (this.life / this.blastRadius), 0, Math.PI * 2, false);\r\n        context.fillStyle = this.fragmentColor;\r\n        context.fill();\r\n        context.closePath();\r\n    }\r\n}\r\n\r\nexport class Bomb {\r\n    public xPos: number;\r\n    public yPos: number;\r\n    public blastRadius: number;\r\n    public blastDelayMS: number;\r\n    public isDestroyed: boolean;\r\n    public isExploding: boolean;\r\n    public fuseStartTime: number;\r\n    public shouldFlashRed: boolean;\r\n    public audioManager: AudioManager;\r\n\r\n    private fragments: BombFragment[];\r\n    // public bombExplodeAudio: HTMLAudioElement;\r\n\r\n    constructor (startX: number, startY: number, blastRadius: number, isDestroyed: boolean, audioManager: AudioManager) {\r\n        this.xPos = startX;\r\n        this.yPos = startY;\r\n        this.blastRadius = blastRadius;\r\n        this.isDestroyed = isDestroyed;\r\n        this.audioManager = audioManager;\r\n        this.blastDelayMS = 5000;\r\n        this.fuseStartTime = 0;\r\n        this.shouldFlashRed = false;\r\n        this.isExploding = false;\r\n        this.fragments = [];\r\n        // this.bombExplodeAudio = new Audio(tankDestroy)\r\n    }\r\n\r\n    checkEnemyHit (enemyTanks: Tank[]): void {\r\n        enemyTanks.forEach(enemyTank => {\r\n            if (enemyTank.isDestroyed) {\r\n                return;\r\n            }\r\n            if (this.isExploding) {\r\n                let inside: boolean = this.isPointInsideBlastRadius(enemyTank.xPos + enemyTank.tankMidpoint, enemyTank.yPos + enemyTank.tankMidpoint);\r\n                if (this.isExploding && this.isPointInsideBlastRadius(enemyTank.xPos + enemyTank.tankMidpoint, enemyTank.yPos + enemyTank.tankMidpoint)) {\r\n                    enemyTank.isDestroyed = true;\r\n                    console.log(\"Enemy hit with bomb!!!\");\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    checkPlayerHit (playerTank: Tank): void {\r\n        if (playerTank.isDestroyed) {\r\n            return;\r\n        }\r\n        if (this.isExploding && (this.isPointInsideBlastRadius(playerTank.xLeft, playerTank.yTop) ||\r\n        this.isPointInsideBlastRadius(playerTank.xRight, playerTank.yTop) ||\r\n        this.isPointInsideBlastRadius(playerTank.xLeft, playerTank.yBottom) ||\r\n        this.isPointInsideBlastRadius(playerTank.xRight, playerTank.yBottom) ||\r\n        this.isPointInsideBlastRadius(playerTank.xPos, playerTank.yPos))) {\r\n            playerTank.isDestroyed = true;\r\n            console.log(\"Player Hit with bomb!!!\");\r\n        }\r\n    }\r\n\r\n    setFuse(): void {\r\n        if (this.isDestroyed) {\r\n            return;\r\n        }\r\n        this.fuseStartTime = performance.now();\r\n        this.animateFuse();\r\n        setTimeout((): void => {\r\n            this.createFragments();\r\n            this.audioManager.play(AudioFile.BOMB_EXPLODE)\r\n            this.isExploding = true;\r\n            setTimeout((): void => {\r\n                this.isExploding = false;\r\n                this.isDestroyed = true;\r\n        }, 1000)\r\n        }, this.blastDelayMS);\r\n    }\r\n\r\n    private animateFuse(): void {\r\n        if (this.isDestroyed) {\r\n            return;\r\n        }\r\n        const elapsedTime = performance.now() - this.fuseStartTime;\r\n        const remainingTime = this.blastDelayMS - elapsedTime;\r\n        if (remainingTime <= 0) {\r\n            this.isDestroyed = true;\r\n            return;\r\n        }\r\n        const fractionElapsed = elapsedTime / this.blastDelayMS;\r\n        const flashThresholds = [0.25, 0.5, 0.625, 0.75, 0.8125, 0.875, 0.90625, 0.9375, 0.96875, 0.984375];\r\n        this.shouldFlashRed = flashThresholds.some(threshold => fractionElapsed > threshold && fractionElapsed < threshold + 0.01);\r\n        requestAnimationFrame(() => this.animateFuse());\r\n    }\r\n\r\n    isPointInsideBlastRadius(x: number, y: number): boolean {\r\n        const dx = x - this.xPos;\r\n        const dy = y - this.yPos;\r\n        return Math.sqrt(dx * dx + dy * dy) <= this.blastRadius;\r\n    }\r\n\r\n    createFragments(): void {\r\n        const fargmentCount = 50;\r\n        for (let i = 0; i < fargmentCount; i++) {\r\n            const angle = Math.random() * 2 * Math.PI;\r\n            const speed = Math.random() * 5 + 2;\r\n            const velocityX = Math.cos(angle) * speed;\r\n            const velocityY = Math.sin(angle) * speed;\r\n            const fragment = new BombFragment(\r\n                this.xPos,\r\n                this.yPos,\r\n                Math.random() * 2 + 1,\r\n                'rgba(255, 69, 0, 1)',\r\n                velocityX,\r\n                velocityY,\r\n                this.blastRadius\r\n            );\r\n            this.fragments.push(fragment);\r\n        }\r\n    }\r\n\r\n    draw(context: CanvasRenderingContext2D): void {\r\n        if (this.isExploding) {\r\n            this.drawExplosion(context);\r\n            return;\r\n        }\r\n\r\n        context.beginPath();\r\n        context.arc(this.xPos, this.yPos, 15, 0, 2 * Math.PI);\r\n        context.fillStyle = this.shouldFlashRed ? 'red' : 'yellow';\r\n        context.fill();\r\n        context.lineWidth = 3;\r\n        context.strokeStyle = 'black';\r\n        context.stroke();\r\n        context.closePath();\r\n    \r\n        context.beginPath();\r\n        context.arc(this.xPos, this.yPos, 10, 0, 2 * Math.PI);\r\n        context.lineWidth = 1.5;\r\n        context.strokeStyle = 'black';\r\n        context.stroke();\r\n        context.closePath();\r\n    }\r\n\r\n    drawExplosion(context: CanvasRenderingContext2D): void {\r\n        this.fragments.forEach(particle => {\r\n            particle.update();\r\n            particle.draw(context);\r\n        });\r\n\r\n        this.fragments = this.fragments.filter(particle => particle.life > 0);\r\n    }\r\n}\r\n\r\nexport class PlayerBomb extends Bomb {\r\n    constructor (startX: number, startY: number, isDestroyed: boolean, audioManager: AudioManager) {\r\n        let playerBombBlastRadius: number = 50;\r\n        super(startX, startY, playerBombBlastRadius, isDestroyed, audioManager);\r\n    }\r\n}\r\n\r\nexport class BasicBomb extends Bomb {\r\n    constructor (startX: number, startY: number, isDestroyed: boolean, audioManager: AudioManager) {\r\n        let basicBombBlastRadius: number = 80;\r\n        super(startX, startY, basicBombBlastRadius, isDestroyed, audioManager);\r\n    }\r\n}\r\n\r\nexport class SuperBomb extends Bomb {\r\n    constructor (startX: number, startY: number, isDestroyed: boolean, audioManager: AudioManager) {\r\n        let superBombBlastRadius: number = 20;\r\n        super(startX, startY, superBombBlastRadius, isDestroyed, audioManager);\r\n    }\r\n}\r\n","import { Obstacle } from './Obstacle';\r\n\r\nexport class ObstacleCanvas {\r\n    private obstacleCanvas: HTMLCanvasElement;\r\n    public obstacles: Obstacle[] = [];\r\n    public width: number;\r\n    public height: number;\r\n\r\n    constructor(obstacleCanvasSelector: string, width: number, height: number, obstacles: Obstacle[]) {\r\n        this.width = width;\r\n        this.height = height;\r\n        this.obstacles = obstacles;\r\n        window.addEventListener('resize', this.resizeCanvas.bind(this));\r\n        this.obstacleCanvas = document.querySelector(obstacleCanvasSelector) as HTMLCanvasElement\r\n        this.obstacleCanvas.width = width;\r\n        this.obstacleCanvas.height = height;\r\n        obstacles.forEach(obstacle => {\r\n            obstacle.draw(this.obstacleCanvas.getContext('2d') as CanvasRenderingContext2D);\r\n        });\r\n    }\r\n\r\n    public clearObstacles(): void {\r\n        const context = this.obstacleCanvas.getContext('2d');\r\n        if (context) {\r\n            context.clearRect(0, 0, this.obstacleCanvas.width, this.obstacleCanvas.height);\r\n        }\r\n        this.obstacles = [];\r\n    }\r\n\r\n    private resizeCanvas(): void {\r\n\r\n    }\r\n}\r\n","import { Tank } from \"./Tank\";\r\n\r\nexport class GameRenderer {\r\n    public playerWin: boolean = false;\r\n    public enemyWin: boolean = false;\r\n\r\n    private context: CanvasRenderingContext2D | null;\r\n\r\n    constructor(public canvas: HTMLCanvasElement) {\r\n        const context = this.canvas.getContext('2d');\r\n        if (!context) {\r\n            throw new Error('2d context not supported or canvas element not found.');\r\n        }\r\n        this.context = context;\r\n    }\r\n\r\n    public initializeCanvas(width: number, height: number): void {\r\n        this.canvas.width = width;\r\n        this.canvas.height = height;\r\n    }\r\n\r\n    renderLevelOverScreen() {\r\n        if (!this.context) {\r\n            throw new Error('2d context not supported or canvas element not found.');\r\n        }\r\n\r\n        const message = this.playerWin ? \"Win\" : this.enemyWin ? \"Lose\" : \"\";\r\n        if (message === \"\") {\r\n            return;\r\n        }\r\n\r\n        const fontSize = 100;\r\n        this.context.font = `${fontSize}px Arial`;\r\n        this.context.lineWidth = 5;\r\n        this.context.strokeStyle = this.playerWin ? 'green' : 'red';\r\n        this.context.fillStyle = this.playerWin ? 'green' : 'red';\r\n\r\n        const textWidth = this.context.measureText(message).width;\r\n        const x = (this.canvas.width - textWidth) / 2;\r\n        const y = this.canvas.height / 2 + fontSize / 2;\r\n\r\n        this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n        this.context.strokeText(message, x, y);\r\n        this.context.fillText(message, x, y);\r\n    }\r\n\r\n\r\n    render(progress: number, playerTank: Tank, enemyTanks: Tank[]): void {\r\n        if (!this.context) {\r\n            throw new Error('2d context not supported or canvas element not found.');\r\n        }\r\n        this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n\r\n        if (playerTank.isDestroyed) {\r\n            this.enemyWin = true;\r\n        }\r\n        else if (enemyTanks.every(tank => tank.isDestroyed)) {\r\n            this.playerWin = true;\r\n        }\r\n        else {\r\n            playerTank.updatePosition(playerTank)\r\n            playerTank.aim(playerTank.aimXPos, playerTank.aimYPos, playerTank)\r\n            \r\n            enemyTanks.forEach(enemyTank => {\r\n                enemyTank.updatePosition(playerTank)\r\n                enemyTank.aim(enemyTank.aimXPos, enemyTank.aimYPos, playerTank)\r\n                enemyTank.shoot(playerTank)\r\n                enemyTank.plantBomb(playerTank);\r\n            });\r\n    \r\n            enemyTanks.forEach(enemyTank => {\r\n                enemyTank.draw(this.context as CanvasRenderingContext2D)\r\n                enemyTank.reticule.draw(this.context as CanvasRenderingContext2D, enemyTank.xPos, enemyTank.yPos, enemyTank.aimXPos, enemyTank.aimYPos);\r\n                enemyTank.ammunition.forEach(ammunition => {\r\n                    if(ammunition.isDestroyed) {\r\n                        return;\r\n                    }\r\n                    ammunition.updatePosition(enemyTank.obstacleCanvas);\r\n                    ammunition.checkPlayerHit(playerTank);\r\n                    ammunition.draw(this.context as CanvasRenderingContext2D);\r\n                });\r\n                enemyTank.bombs.forEach(bomb => {\r\n                    if(bomb.isDestroyed && !bomb.isExploding) {\r\n                        return;\r\n                    }\r\n                    bomb.checkPlayerHit(playerTank);\r\n                    bomb.draw(this.context as CanvasRenderingContext2D);\r\n                });\r\n            });\r\n    \r\n            playerTank.draw(this.context as CanvasRenderingContext2D)\r\n            playerTank.reticule.draw(this.context as CanvasRenderingContext2D, playerTank.xPos, playerTank.yPos, playerTank.aimXPos, playerTank.aimYPos);\r\n            playerTank.ammunition.forEach(ammunition => {\r\n                if(ammunition.isDestroyed) {\r\n                    return;\r\n                }\r\n                ammunition.updatePosition(playerTank.obstacleCanvas);\r\n                ammunition.checkEnemyHit(enemyTanks);\r\n                ammunition.draw(this.context as CanvasRenderingContext2D);\r\n            });\r\n            playerTank.bombs.forEach(bomb => {\r\n                if(bomb.isDestroyed && !bomb.isExploding) {\r\n                    return;\r\n                }\r\n                bomb.checkEnemyHit(enemyTanks);\r\n                bomb.draw(this.context as CanvasRenderingContext2D);\r\n            });\r\n        }\r\n    }\r\n}\r\n","import { Tank } from './Tank';\r\nimport { GameRenderer } from './GameRenderer';\r\nimport { ObstacleCanvas } from './ObstacleCanvas';\r\n\r\nexport class GameCanvas {\r\n    public gameRenderer: GameRenderer;\r\n    private playerTank: Tank | null = null;\r\n    private enemyTanks: Tank[] = [];\r\n    private lastRenderTime: number;\r\n    public obstacleCanvas: ObstacleCanvas;\r\n    public width: number;\r\n    public height: number;\r\n    public animationFrameID: number | null = null;\r\n\r\n    constructor(canvasSelector: string, width: number, height: number, obstacleCanvas: ObstacleCanvas) {\r\n        this.width = width;\r\n        this.height = height;\r\n        this.obstacleCanvas = obstacleCanvas;\r\n        this.animationFrameID = null;\r\n        this.gameRenderer = new GameRenderer(document.querySelector(canvasSelector) as HTMLCanvasElement);\r\n        this.gameRenderer.initializeCanvas(this.width, this.height);\r\n        this.lastRenderTime = 0;\r\n        window.addEventListener('resize', this.resizeCanvas.bind(this));\r\n    }\r\n\r\n    public start() {\r\n        if (!this.animationFrameID) {\r\n            this.animationFrameID = requestAnimationFrame(this.gameLoop.bind(this));\r\n        }\r\n    }\r\n\r\n    public stop() {\r\n        if (this.animationFrameID) {\r\n            cancelAnimationFrame(this.animationFrameID)\r\n            this.animationFrameID = null;\r\n        }\r\n    }\r\n\r\n    private resizeCanvas(): void {\r\n\r\n    }\r\n\r\n    private gameLoop(timeStamp: number): void {\r\n        if (this.playerTank != null) {\r\n            const progress = timeStamp - this.lastRenderTime;\r\n            this.gameRenderer.render(progress, this.playerTank, this.enemyTanks);\r\n            if (this.gameRenderer.enemyWin || this.gameRenderer.playerWin) {\r\n                this.stop();\r\n                this.obstacleCanvas.clearObstacles();\r\n                this.gameRenderer.renderLevelOverScreen();\r\n            }\r\n            this.lastRenderTime = timeStamp;\r\n            this.animationFrameID = requestAnimationFrame(this.gameLoop.bind(this));\r\n        }\r\n    }\r\n\r\n    public addEnemyTank(tank: Tank): void {\r\n        this.enemyTanks.push(tank);\r\n    }\r\n\r\n    public addPlayerTank(tank: Tank): void {\r\n        this.playerTank = tank;\r\n    }\r\n}\r\n","import { GameCanvas } from \"./GameCanvas\";\r\nimport { ObstacleCanvas } from \"./ObstacleCanvas\";\r\nimport { Tank } from \"./Tank\";\r\n\r\nexport class Node {\r\n    public x: number\r\n    public y: number\r\n    public g: number = 0\r\n    public h: number = 0\r\n    public f: number = 0\r\n    public walkable: boolean = true\r\n    public parent: Node | null = null\r\n\r\n    constructor(x: number, y: number) {\r\n        this.x = x\r\n        this.y = y\r\n    }\r\n}\r\n\r\nexport class NavigationGrid {\r\n    public grid: Node[][] = []\r\n    public gridCellWidth: number = 30\r\n    public gridXLength: number\r\n    public gridYLength: number\r\n    public path: Node[] = [];\r\n    \r\n    constructor(gameCanvas: GameCanvas, obstacleCanvas: ObstacleCanvas) {\r\n        this.gridXLength = Math.floor(gameCanvas.width / this.gridCellWidth);\r\n        this.gridYLength = Math.floor(gameCanvas.height / this.gridCellWidth);\r\n        for (let x = 0; x < this.gridXLength; x++) {\r\n            this.grid[x] = []\r\n            for (let y = 0; y < this.gridYLength; y++) {\r\n                this.grid[x][y] = new Node(x, y);\r\n                let gridXLeft = x * this.gridCellWidth;\r\n                let gridXRight = gridXLeft + this.gridCellWidth;\r\n                let gridYTop = y * this.gridCellWidth;\r\n                let gridYBottom = gridYTop + this.gridCellWidth;\r\n                this.grid[x][y].walkable = !obstacleCanvas.obstacles.some(obs => \r\n                    gridXRight > obs.xLeft &&\r\n                    gridXLeft < obs.xRight &&\r\n                    gridYBottom > obs.yTop &&\r\n                    gridYTop < obs.yBottom\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    reset(): void {\r\n        for (let x = 0; x < this.gridXLength; x++) {\r\n            for (let y = 0; y < this.gridYLength; y++) {\r\n                this.grid[x][y].f = 0;\r\n                this.grid[x][y].g = 0;\r\n                this.grid[x][y].h = 0;\r\n                this.grid[x][y].parent = null;\r\n            }\r\n        }\r\n    }\r\n\r\n    getNodeFromTank(tank: Tank): Node {\r\n        let xGridCoordinate: number = Math.floor((tank.xPos + (tank.size / 2)) / this.gridCellWidth);\r\n        let yGridCoordinate: number = Math.floor((tank.yPos + (tank.size / 2)) / this.gridCellWidth);\r\n\r\n        xGridCoordinate = Math.max(0, Math.min(xGridCoordinate, this.gridXLength - 1));\r\n        yGridCoordinate = Math.max(0, Math.min(yGridCoordinate, this.gridYLength - 1));\r\n        return this.grid[xGridCoordinate][yGridCoordinate]\r\n    }\r\n\r\n    getRandomNodeInRadiusOfTarget(target: Node, radius: number): Node {\r\n        const candidateNodes: Node[] = [];\r\n        for (let x = 0; x < this.gridXLength; x++) {\r\n            for (let y = 0; y < this.gridYLength; y++) {\r\n                const node = this.grid[x][y];\r\n                const distance = Math.sqrt(Math.pow(node.x - target.x, 2) + Math.pow(node.y - target.y, 2));\r\n                if (distance <= radius + 1 && distance >= radius - 1 && node.walkable) {\r\n                    candidateNodes.push(node);\r\n                }\r\n            }\r\n        }\r\n        const randomIndex = Math.floor(Math.random() * candidateNodes.length);\r\n        return candidateNodes[randomIndex];\r\n    }\r\n\r\n    aStar(start: Node, target: Node): Node[] | null {\r\n        const openSet: Node[] = [start];\r\n        const closedSet: Set<Node> = new Set();\r\n    \r\n        while (openSet.length > 0) {\r\n            let current: Node | null = openSet.sort((a, b) => a.f - b.f)[0];\r\n\r\n            if (current.x === target.x && current.y === target.y) {\r\n                let path = [];\r\n                while (current !== null) {\r\n                    path.unshift(current);\r\n                    current = current.parent;\r\n                }\r\n                return path;\r\n            }\r\n\r\n            openSet.splice(openSet.indexOf(current), 1);\r\n            closedSet.add(current)\r\n    \r\n            let neighbors = this.getWalkableNeighbors(current);\r\n    \r\n            for (let neighbor of neighbors) {\r\n                if (closedSet.has(neighbor)) {\r\n                    continue;\r\n                }\r\n\r\n                let tentativeG = current.g + ((neighbor.x - current.x === 0 || neighbor.y - current.y === 0) ? 1 : Math.SQRT2);\r\n                if (!openSet.includes(neighbor)) {\r\n                    openSet.push(neighbor);\r\n                } else if (tentativeG >= neighbor.g) {\r\n                    continue;\r\n                }\r\n                neighbor.parent = current;\r\n                neighbor.g = tentativeG;\r\n                neighbor.h = Math.round(Math.sqrt(Math.pow((neighbor.x - target.x), 2) + Math.pow((neighbor.y - target.y), 2)))\r\n                neighbor.f = neighbor.g + neighbor.h\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    \r\n    getWalkableNeighbors(node: Node): Node[] {\r\n        // Get the 8 nodes surrounding the current only if its walkable\r\n        let neighbors: Node[] = [];\r\n        for (let dx = -1; dx <= 1; dx++) {\r\n            for (let dy = -1; dy <= 1; dy++) {\r\n                if (dx === 0 && dy === 0) {\r\n                    continue;\r\n                }\r\n    \r\n                let x = node.x + dx;\r\n                let y = node.y + dy;\r\n    \r\n                if (x >= 0 && y >= 0 && x < this.gridXLength && y < this.gridYLength && this.grid[x][y].walkable) {\r\n                    neighbors.push(this.grid[x][y]);\r\n                }\r\n            }\r\n        }\r\n        return neighbors;\r\n    }\r\n}","import { Obstacle } from \"./Obstacle\";\r\nimport { StationaryTank, StationaryRandomAimTank, SimpleMovingTank, DefaultPlayerTank, BomberTank } from \"./Tank\";\r\nimport { Ammunition, BasicAIAmmunition, SuperAIAmmunition } from \"./Ammunition\";\r\nimport { ObstacleCanvas } from \"./ObstacleCanvas\";\r\nimport { GameCanvas } from \"./GameCanvas\";\r\nimport { NavigationGrid } from \"./NavigationGrid\";\r\nimport { Bomb, BasicBomb } from \"./Bomb\";\r\nimport { AudioManager } from \"./AudioManager\";\r\n\r\nexport class Level {\r\n    public gameCanvas: GameCanvas\r\n    public obstacleCanvas: ObstacleCanvas\r\n    public canvasWidth: number = 1000;\r\n    public canvasHeight: number = 500;\r\n    public audioManager: AudioManager;\r\n\r\n    constructor(obstacleCanvas: ObstacleCanvas, audioManager: AudioManager) {\r\n        this.obstacleCanvas = obstacleCanvas;\r\n        this.gameCanvas = new GameCanvas('#game-canvas', this.canvasWidth, this.canvasHeight, obstacleCanvas)\r\n        this.audioManager = audioManager;\r\n    }\r\n\r\n    public stop() {\r\n        this.gameCanvas.stop();\r\n    }\r\n\r\n    public start() {\r\n        this.gameCanvas.start();\r\n    }\r\n}\r\n\r\nexport class Level1 extends Level {\r\n    constructor(audioManager: AudioManager) {\r\n        let obs: Obstacle = new Obstacle(300, 200, 40, 100);\r\n        const obstacleCanvas = new ObstacleCanvas('#obstacle-canvas', 1000, 500, [obs]);\r\n        super(obstacleCanvas, audioManager)\r\n        const stationaryTank = new StationaryTank(this.gameCanvas.gameRenderer.canvas, 900, 240, obstacleCanvas, audioManager);\r\n        this.gameCanvas.addEnemyTank(stationaryTank);\r\n\r\n        const playerTank = new DefaultPlayerTank(this.gameCanvas.gameRenderer.canvas, 100, 250, obstacleCanvas, audioManager);\r\n        this.gameCanvas.addPlayerTank(playerTank);\r\n    }\r\n}\r\n\r\nexport class Level2 extends Level {\r\n    constructor(audioManager: AudioManager) {\r\n        let obs: Obstacle = new Obstacle(300, 200, 40, 100);\r\n        const obstacleCanvas = new ObstacleCanvas('#obstacle-canvas', 1000, 500, [obs]);\r\n        super(obstacleCanvas, audioManager)\r\n\r\n        const stationaryTank1 = new StationaryTank(this.gameCanvas.gameRenderer.canvas, 800, 100, obstacleCanvas, audioManager);\r\n        const stationaryTank2 = new StationaryTank(this.gameCanvas.gameRenderer.canvas, 900, 240, obstacleCanvas, audioManager);\r\n        const stationaryTank3 = new StationaryTank(this.gameCanvas.gameRenderer.canvas, 800, 400, obstacleCanvas, audioManager);\r\n        this.gameCanvas.addEnemyTank(stationaryTank1);\r\n        this.gameCanvas.addEnemyTank(stationaryTank2);\r\n        this.gameCanvas.addEnemyTank(stationaryTank3);\r\n\r\n        const playerTank = new DefaultPlayerTank(this.gameCanvas.gameRenderer.canvas, 100, 250, obstacleCanvas, audioManager);\r\n        this.gameCanvas.addPlayerTank(playerTank);\r\n    }\r\n}\r\n\r\nexport class Level3 extends Level {\r\n    constructor(audioManager: AudioManager) {\r\n        let obs: Obstacle = new Obstacle(100, 100, 200, 100);\r\n        let obs2: Obstacle = new Obstacle(550, 200, 30, 200);\r\n        const obstacleCanvas = new ObstacleCanvas('#obstacle-canvas', 1000, 500, [obs, obs2]);\r\n        super(obstacleCanvas, audioManager)\r\n        let superAmmo: Ammunition[] = [\r\n            new SuperAIAmmunition(0, 0, 0, 0, 0, true, audioManager)\r\n        ]\r\n        const aiTank = new StationaryRandomAimTank(this.gameCanvas.gameRenderer.canvas, 800, 300, obstacleCanvas, superAmmo, audioManager);\r\n        this.gameCanvas.addEnemyTank(aiTank);\r\n\r\n        const playerTank = new DefaultPlayerTank(this.gameCanvas.gameRenderer.canvas, 200, 250, obstacleCanvas, audioManager);\r\n        this.gameCanvas.addPlayerTank(playerTank);\r\n    }\r\n}\r\n\r\nexport class Level4 extends Level {\r\n    constructor(audioManager: AudioManager) {\r\n        let obs: Obstacle = new Obstacle(250, 100, 600, 40);\r\n        let obs2: Obstacle = new Obstacle(100, 350, 600, 40);\r\n        const obstacleCanvas = new ObstacleCanvas('#obstacle-canvas', 1000, 500, [obs, obs2]);\r\n        super(obstacleCanvas, audioManager)\r\n        let basicAmmo: Ammunition[] = [\r\n            new BasicAIAmmunition(0, 0, 0, 0, 0, true, audioManager)\r\n        ]\r\n        let basicBomb: Bomb[] = []\r\n        let navigationGrid: NavigationGrid = new NavigationGrid(this.gameCanvas, this.obstacleCanvas)\r\n        const aiTank = new SimpleMovingTank(this.gameCanvas.gameRenderer.canvas, 900, 50, obstacleCanvas, basicAmmo, basicBomb, navigationGrid, audioManager);\r\n        this.gameCanvas.addEnemyTank(aiTank);\r\n\r\n        const playerTank = new DefaultPlayerTank(this.gameCanvas.gameRenderer.canvas, 50, 450, obstacleCanvas, audioManager);\r\n        this.gameCanvas.addPlayerTank(playerTank);\r\n    }\r\n}\r\n\r\nexport class Level5 extends Level {\r\n    constructor(audioManager: AudioManager) {\r\n        let obs: Obstacle = new Obstacle(100, 100, 200, 100);\r\n        let obs2: Obstacle = new Obstacle(700, 100, 30, 100);\r\n        let obs3: Obstacle = new Obstacle(700, 350, 30, 100);\r\n        const obstacleCanvas = new ObstacleCanvas('#obstacle-canvas', 1000, 500, [obs, obs2, obs3]);\r\n        super(obstacleCanvas, audioManager)\r\n        let basicAmmo: Ammunition[] = [\r\n            new BasicAIAmmunition(0, 0, 0, 0, 0, true, audioManager)\r\n        ]\r\n        let superAmmo: Ammunition[] = [\r\n            new SuperAIAmmunition(0, 0, 0, 0, 0, true, audioManager)\r\n        ]\r\n        let basicBomb: Bomb[] = []\r\n        let navigationGrid: NavigationGrid = new NavigationGrid(this.gameCanvas, this.obstacleCanvas)\r\n        const aiTank3 = new SimpleMovingTank(this.gameCanvas.gameRenderer.canvas, 800, 300, obstacleCanvas, basicAmmo, basicBomb, navigationGrid, audioManager);\r\n        const aiTank = new StationaryRandomAimTank(this.gameCanvas.gameRenderer.canvas, 800, 100, obstacleCanvas, superAmmo, audioManager);\r\n        const aiTank2 = new StationaryTank(this.gameCanvas.gameRenderer.canvas, 800, 200, obstacleCanvas, audioManager);\r\n        this.gameCanvas.addEnemyTank(aiTank3);\r\n        this.gameCanvas.addEnemyTank(aiTank);\r\n        this.gameCanvas.addEnemyTank(aiTank2);\r\n\r\n        const playerTank = new DefaultPlayerTank(this.gameCanvas.gameRenderer.canvas, 200, 250, obstacleCanvas, audioManager);\r\n        this.gameCanvas.addPlayerTank(playerTank);\r\n    }\r\n}\r\n\r\nexport class Level6 extends Level {\r\n    constructor(audioManager: AudioManager) {\r\n        let obs: Obstacle = new Obstacle(100, 100, 200, 100);\r\n        let obs2: Obstacle = new Obstacle(700, 100, 30, 300);\r\n        const obstacleCanvas = new ObstacleCanvas('#obstacle-canvas', 1000, 500, [obs, obs2]);\r\n        super(obstacleCanvas, audioManager)\r\n        let basicAmmo: Ammunition[] = [\r\n            new BasicAIAmmunition(0, 0, 0, 0, 0, true, audioManager)\r\n        ]\r\n        \r\n        let basicBombs: Bomb[] = [\r\n            new BasicBomb(0, 0, true, audioManager),\r\n            new BasicBomb(0, 0, true, audioManager),\r\n            new BasicBomb(0, 0, true, audioManager)\r\n        ]\r\n        let basicBombs2: Bomb[] = [\r\n            new BasicBomb(0, 0, true, audioManager),\r\n            new BasicBomb(0, 0, true, audioManager),\r\n            new BasicBomb(0, 0, true, audioManager)\r\n        ]\r\n        let basicBombs3: Bomb[] = [\r\n            new BasicBomb(0, 0, true, audioManager),\r\n            new BasicBomb(0, 0, true, audioManager),\r\n            new BasicBomb(0, 0, true, audioManager)\r\n        ]\r\n\r\n        let navigationGrid: NavigationGrid = new NavigationGrid(this.gameCanvas, this.obstacleCanvas)\r\n        const aiTank = new BomberTank(this.gameCanvas.gameRenderer.canvas, 800, 100, obstacleCanvas, [new BasicAIAmmunition(0, 0, 0, 0, 0, true, audioManager)], basicBombs, navigationGrid, audioManager);\r\n        const aiTank2 = new BomberTank(this.gameCanvas.gameRenderer.canvas, 800, 200, obstacleCanvas, [new BasicAIAmmunition(0, 0, 0, 0, 0, true, audioManager)], basicBombs2, navigationGrid, audioManager);\r\n        const aiTank3 = new BomberTank(this.gameCanvas.gameRenderer.canvas, 800, 300, obstacleCanvas, [new BasicAIAmmunition(0, 0, 0, 0, 0, true, audioManager)], basicBombs3, navigationGrid, audioManager);\r\n\r\n        this.gameCanvas.addEnemyTank(aiTank);\r\n        this.gameCanvas.addEnemyTank(aiTank2);\r\n        this.gameCanvas.addEnemyTank(aiTank3);\r\n\r\n        const playerTank = new DefaultPlayerTank(this.gameCanvas.gameRenderer.canvas, 200, 250, obstacleCanvas, audioManager);\r\n        this.gameCanvas.addPlayerTank(playerTank);\r\n    }\r\n}\r\n","import './css/style.css';\r\nimport './assets/computer.ico';\r\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\r\nimport '../node_modules/bootstrap/dist/js/bootstrap.min.js';\r\n\r\nimport { LevelSelector } from './ui/LevelSelector';\r\n\r\nconst levelSelector: LevelSelector = new LevelSelector(6);\r\n\r\nlevelSelector.startActiveLevel();","import * as d3 from 'd3';\r\nimport packageJson from '../../package.json';\r\nimport { Level, Level1, Level2, Level3, Level4, Level5, Level6 } from '../game/Level';\r\nimport { AudioManager } from '../game/AudioManager';\r\n\r\nexport class LevelSelector {\r\n    private levels: number;\r\n    private activeLevelNumber: number;\r\n    private activeLevel: Level;\r\n    private sliderWidth: number = Math.min(window.innerWidth * 0.8, 600); // Responsive width\r\n    private audioManager: AudioManager;\r\n\r\n    constructor(levels: number) {\r\n        this.levels = levels;\r\n        this.audioManager = new AudioManager();\r\n        let audioPromise: Promise<void[]> = this.audioManager.loadAllAudio();\r\n        audioPromise.then((): void => {\r\n            this.audioManager.playBackgroundMusic();\r\n        })\r\n        this.activeLevelNumber = 1;\r\n        this.activeLevel = new Level1(this.audioManager);\r\n        this.setHeader();\r\n        this.createSlider();\r\n        this.createJumbotron();\r\n    }\r\n\r\n    public setHeader() {\r\n        let header: HTMLElement | null = document.getElementById('main-header')\r\n        if (header) {\r\n            header.textContent = `Treads V${packageJson.version}`\r\n        }\r\n    }\r\n\r\n    public startActiveLevel() {\r\n        this.activeLevel.stop();\r\n        switch (this.activeLevelNumber) {\r\n            case 1:\r\n                this.activeLevel = new Level1(this.audioManager);\r\n                break;\r\n            case 2:\r\n                this.activeLevel = new Level2(this.audioManager);\r\n                break;\r\n            case 3:\r\n                this.activeLevel = new Level3(this.audioManager);\r\n                break;\r\n            case 4:\r\n                this.activeLevel = new Level4(this.audioManager);\r\n                break;\r\n            case 5:\r\n                this.activeLevel = new Level5(this.audioManager);\r\n                break;\r\n            case 6:\r\n                this.activeLevel = new Level6(this.audioManager);\r\n                break;\r\n            default:\r\n                this.activeLevel = new Level1(this.audioManager);\r\n                break;\r\n        }\r\n        this.activeLevel.start();\r\n    }\r\n\r\n    private createSlider(): void {\r\n        const margin: { top: number; right: number; bottom: number; left: number; } = { top: 10, right: 10, bottom: 20, left: 10 };\r\n        const effectiveWidth: number = this.sliderWidth - margin.left - margin.right;\r\n    \r\n        const scale: d3.ScaleLinear<number, number, never> = d3.scaleLinear()\r\n            .domain([1, this.levels])\r\n            .range([0, effectiveWidth])\r\n            .clamp(true);\r\n    \r\n        const svg: d3.Selection<SVGSVGElement, unknown, HTMLElement, any> = d3.select('#slider').append('svg')\r\n            .attr('width', this.sliderWidth)\r\n            .attr('height', 50);\r\n    \r\n        const sliderGroup: d3.Selection<SVGGElement, unknown, HTMLElement, any> = svg.append('g')\r\n            .attr('transform', `translate(${margin.left}, 30)`);\r\n    \r\n        sliderGroup.append('g')\r\n            .call(d3.axisBottom(scale).ticks(this.levels).tickFormat(d3.format('1')));\r\n    \r\n        const handle: d3.Selection<SVGCircleElement, unknown, HTMLElement, any> = sliderGroup.append('circle')\r\n            .attr('cx', scale(this.activeLevelNumber))\r\n            .attr('cy', -10)\r\n            .attr('r', 10)\r\n            .style('fill', 'red')\r\n            .style('cursor', 'ew-resize');\r\n        const dragHandler: d3.DragBehavior<SVGCircleElement, unknown, unknown> = d3.drag<SVGCircleElement, unknown>()\r\n            .on('drag', (event) => {\r\n                const x = event.x - margin.left;  // Adjusting for the left margin\r\n                const level = Math.round(scale.invert(x));\r\n                handle.attr('cx', scale(level));\r\n                this.updateActiveLevel(level);\r\n            });\r\n    \r\n        handle.call(dragHandler);\r\n    }\r\n\r\n    private createJumbotron(): void {\r\n        const jumbotron: d3.Selection<d3.BaseType, unknown, HTMLElement, any> = d3.select('#jumbotron');\r\n        for (let i = 1; i <= this.levels; i++) {\r\n            const box: d3.Selection<HTMLDivElement, unknown, HTMLElement, any> = jumbotron.append('div')\r\n                .attr('class', 'jumbotron-box inactive')\r\n                .on('click', () => this.updateActiveLevel(i));\r\n\r\n            // Example of how you can append an SVG to a jumbotron box.\r\n            const svg: d3.Selection<SVGSVGElement, unknown, HTMLElement, any> = box.append('svg')\r\n                .attr('width', '100%')\r\n                .attr('height', '100%');\r\n\r\n            svg.append('rect') // Placeholder for actual SVG content.\r\n                .attr('width', '100%')\r\n                .attr('height', '100%')\r\n                .attr('fill', 'transparent');\r\n            svg.append('text')\r\n                .attr('x', '50%')\r\n                .attr('y', '50%')\r\n                .attr('dominant-baseline', 'middle')\r\n                .attr('text-anchor', 'middle')\r\n                .text(`Level ${i}`);\r\n        }\r\n\r\n        this.updateActiveLevel(this.activeLevelNumber);\r\n    }\r\n\r\n    private updateActiveLevel(level: number): void {\r\n        this.activeLevelNumber = level;\r\n        d3.selectAll('.jumbotron-box')\r\n            .classed('active', (_, i) => i + 1 === level)\r\n            .classed('inactive', (_, i) => i + 1 !== level);\r\n        d3.select('circle').attr('cx', d3.scaleLinear()\r\n            .domain([1, this.levels])\r\n            .range([0, this.sliderWidth - 20])(level));\r\n        this.startActiveLevel();\r\n    }\r\n}\r\n"],"names":["startX","startY","width","height","this","xLeft","yTop","yBottom","xRight","draw","context","beginPath","rect","fillStyle","fill","AudioFile","Direction","audioContext","window","AudioContext","webkitAudioContext","audioBuffers","Map","backgroundMusicSource","loadAllAudio","promises","loadAudio","TANK_FIRE","TANK_DESTROY","BOMB_EXPLODE","BACKGROUND_MUSIC","Promise","all","audioFile","url","fetch","then","response","arrayBuffer","decodeAudioData","audioBuffer","set","catch","error","console","play","buffer","get","source","createBufferSource","connect","destination","start","warn","getAudioContext","playBackgroundMusic","stopBackgroundMusic","loop","stop","disconnect","theta","speed","maxBounces","canvasWidth","canvasHeight","isDestroyed","audioManager","xPos","yPos","xVelocity","Math","cos","yVelocity","sin","bounces","updatePosition","obstacleCanvas","obstacles","forEach","obstacle","fromLeft","abs","fromRight","fromTop","fromBottom","minDistance","min","checkEnemyHit","enemyTanks","enemyTank","log","checkPlayerHit","playerTank","reload","arc","PI","lineWidth","strokeStyle","stroke","closePath","willHitPlayerTank","predictedXPosition","predictedYPosition","predictedXVelocity","predictedYVelocity","predictedBounces","Ammunition","dashPattern","color","renderReticule","tankSize","reticuleWidth","tankXPos","tankYPos","mouseXPos","mouseYpos","setLineDash","moveTo","lineTo","Reticule","maxReticuleLength","tankXPosition","tankYPosition","mouseXPosition","mouseYPosition","xDist","yDist","distanceToMaxDistanceRatio","sqrt","pow","dashLength","spaceLength","xLength","x","y","radius","velocityX","velocityY","life","fragmentRadius","fragmentColor","blastRadius","update","blastDelayMS","fuseStartTime","shouldFlashRed","isExploding","fragments","isPointInsideBlastRadius","tankMidpoint","setFuse","performance","now","animateFuse","setTimeout","createFragments","elapsedTime","fractionElapsed","some","threshold","requestAnimationFrame","dx","dy","i","angle","random","fragment","BombFragment","push","drawExplosion","particle","filter","Bomb","canvas","reticule","size","ammunition","bombs","gunBarrellWidth","twoPi","lastDirectionMoved","UNKNOWN","wasLastMoveBlocked","consecutiveDirectionMoves","keyStates","ArrowUp","ArrowDown","ArrowLeft","ArrowRight","w","a","s","d","W","A","S","D","maxAmmunition","length","maxBombs","aimAngle","canvasRect","getBoundingClientRect","xOffset","left","yOffset","top","aimXPos","aimYPos","fillRect","lineJoin","strokeRect","endX","endY","up","right","moveNorthEast","moveNorthWest","down","moveSouthEast","moveSouthWest","moveNorth","moveSouth","moveWest","moveEast","aim","atan2","shoot","plantBomb","availableBombIndex","findIndex","bomb","moveInLastDirectionMoved","moveInCardinalDirection","getRandomDirection","enumValues","Object","keys","map","n","Number","parseInt","isNaN","floor","direction","NORTH","SOUTH","EAST","WEST","NORTHEAST","NORTHWEST","SOUTHEAST","SOUTHWEST","values","value","randomIndex","blocked","max","blockedNorth","blockedEast","blockedWest","blockedSouth","document","addEventListener","event","hasOwnProperty","key","code","clientX","clientY","availableAmmunitionIndex","PlayerAmmunition","Tank","BasicAIAmmunition","NoReticule","minTimeBetweenShotsMS","canTakeShot","EnemyTank","aimAngleChangeAmount","getAngleChangeAmount","navigationGrid","aggressionFactor","path","pathRecaculationInterval","drawNavigationGrid","currentNode","getNodeFromTank","gridYLength","gridCellWidth","gridXLength","j","index","array","reset","startNode","targetNode","destinationNode","getRandomNodeInRadiusOfTarget","aStar","randomDirection","randomNumber","splice","timeBetweenShotsIsElapsed","minTimeBetweenBombPlantsMS","timeBetweenPlantsIsElapsed","defaultPlayerTankColor","PlayerBomb","AdjustingCustomColorReticule","PlayerTank","obstacleCanvasSelector","resizeCanvas","bind","querySelector","getContext","clearObstacles","clearRect","playerWin","enemyWin","Error","initializeCanvas","renderLevelOverScreen","message","font","textWidth","measureText","fontSize","strokeText","fillText","render","progress","every","tank","canvasSelector","animationFrameID","gameRenderer","GameRenderer","lastRenderTime","gameLoop","cancelAnimationFrame","timeStamp","addEnemyTank","addPlayerTank","g","h","f","walkable","parent","gameCanvas","grid","Node","gridXLeft","gridXRight","gridYTop","gridYBottom","obs","xGridCoordinate","yGridCoordinate","target","candidateNodes","node","distance","openSet","closedSet","Set","current","sort","b","unshift","indexOf","add","getWalkableNeighbors","neighbor","has","tentativeG","SQRT2","includes","round","neighbors","GameCanvas","Obstacle","ObstacleCanvas","stationaryTank","StationaryTank","DefaultPlayerTank","Level","stationaryTank1","stationaryTank2","stationaryTank3","obs2","superAmmo","SuperAIAmmunition","aiTank","StationaryRandomAimTank","basicAmmo","NavigationGrid","SimpleMovingTank","obs3","aiTank3","aiTank2","basicBombs","BasicBomb","basicBombs2","basicBombs3","BomberTank","levels","sliderWidth","innerWidth","AudioManager","activeLevelNumber","activeLevel","Level1","setHeader","createSlider","createJumbotron","header","getElementById","textContent","startActiveLevel","Level2","Level3","Level4","Level5","Level6","margin","effectiveWidth","scale","domain","range","clamp","sliderGroup","append","attr","call","ticks","tickFormat","handle","style","dragHandler","on","level","invert","updateActiveLevel","jumbotron","svg","text","classed","_"],"sourceRoot":""}